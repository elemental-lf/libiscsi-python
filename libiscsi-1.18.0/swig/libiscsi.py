# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libiscsi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libiscsi')
    _libiscsi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libiscsi', [dirname(__file__)])
        except ImportError:
            import _libiscsi
            return _libiscsi
        try:
            _mod = imp.load_module('_libiscsi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libiscsi = swig_import_helper()
    del swig_import_helper
else:
    import _libiscsi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def bytes(ptr: 'void *', nelements: 'size_t') -> "BYTESCDATA":
    return _libiscsi.bytes(ptr, nelements)
bytes = _libiscsi.bytes
class scsi_datain_unmarshalled(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_datain_unmarshalled, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_datain_unmarshalled, name)
    __repr__ = _swig_repr
    __swig_setmethods__["readcapacity16"] = _libiscsi.scsi_datain_unmarshalled_readcapacity16_set
    __swig_getmethods__["readcapacity16"] = _libiscsi.scsi_datain_unmarshalled_readcapacity16_get
    if _newclass:
        readcapacity16 = _swig_property(_libiscsi.scsi_datain_unmarshalled_readcapacity16_get, _libiscsi.scsi_datain_unmarshalled_readcapacity16_set)

    def __init__(self):
        this = _libiscsi.new_scsi_datain_unmarshalled()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_datain_unmarshalled
    __del__ = lambda self: None
scsi_datain_unmarshalled_swigregister = _libiscsi.scsi_datain_unmarshalled_swigregister
scsi_datain_unmarshalled_swigregister(scsi_datain_unmarshalled)


def scsi_datain_unmarshall(task: 'scsi_task') -> "scsi_datain_unmarshalled *":
    return _libiscsi.scsi_datain_unmarshall(task)
scsi_datain_unmarshall = _libiscsi.scsi_datain_unmarshall
SCSI_CDB_MAX_SIZE = _libiscsi.SCSI_CDB_MAX_SIZE
SCSI_OPCODE_TESTUNITREADY = _libiscsi.SCSI_OPCODE_TESTUNITREADY
SCSI_OPCODE_READ6 = _libiscsi.SCSI_OPCODE_READ6
SCSI_OPCODE_INQUIRY = _libiscsi.SCSI_OPCODE_INQUIRY
SCSI_OPCODE_MODESELECT6 = _libiscsi.SCSI_OPCODE_MODESELECT6
SCSI_OPCODE_RESERVE6 = _libiscsi.SCSI_OPCODE_RESERVE6
SCSI_OPCODE_RELEASE6 = _libiscsi.SCSI_OPCODE_RELEASE6
SCSI_OPCODE_MODESENSE6 = _libiscsi.SCSI_OPCODE_MODESENSE6
SCSI_OPCODE_STARTSTOPUNIT = _libiscsi.SCSI_OPCODE_STARTSTOPUNIT
SCSI_OPCODE_PREVENTALLOW = _libiscsi.SCSI_OPCODE_PREVENTALLOW
SCSI_OPCODE_READCAPACITY10 = _libiscsi.SCSI_OPCODE_READCAPACITY10
SCSI_OPCODE_READ10 = _libiscsi.SCSI_OPCODE_READ10
SCSI_OPCODE_WRITE10 = _libiscsi.SCSI_OPCODE_WRITE10
SCSI_OPCODE_WRITE_VERIFY10 = _libiscsi.SCSI_OPCODE_WRITE_VERIFY10
SCSI_OPCODE_VERIFY10 = _libiscsi.SCSI_OPCODE_VERIFY10
SCSI_OPCODE_PREFETCH10 = _libiscsi.SCSI_OPCODE_PREFETCH10
SCSI_OPCODE_SYNCHRONIZECACHE10 = _libiscsi.SCSI_OPCODE_SYNCHRONIZECACHE10
SCSI_OPCODE_READ_DEFECT_DATA10 = _libiscsi.SCSI_OPCODE_READ_DEFECT_DATA10
SCSI_OPCODE_WRITE_SAME10 = _libiscsi.SCSI_OPCODE_WRITE_SAME10
SCSI_OPCODE_UNMAP = _libiscsi.SCSI_OPCODE_UNMAP
SCSI_OPCODE_READTOC = _libiscsi.SCSI_OPCODE_READTOC
SCSI_OPCODE_SANITIZE = _libiscsi.SCSI_OPCODE_SANITIZE
SCSI_OPCODE_MODESELECT10 = _libiscsi.SCSI_OPCODE_MODESELECT10
SCSI_OPCODE_MODESENSE10 = _libiscsi.SCSI_OPCODE_MODESENSE10
SCSI_OPCODE_PERSISTENT_RESERVE_IN = _libiscsi.SCSI_OPCODE_PERSISTENT_RESERVE_IN
SCSI_OPCODE_PERSISTENT_RESERVE_OUT = _libiscsi.SCSI_OPCODE_PERSISTENT_RESERVE_OUT
SCSI_OPCODE_EXTENDED_COPY = _libiscsi.SCSI_OPCODE_EXTENDED_COPY
SCSI_OPCODE_RECEIVE_COPY_RESULTS = _libiscsi.SCSI_OPCODE_RECEIVE_COPY_RESULTS
SCSI_OPCODE_READ16 = _libiscsi.SCSI_OPCODE_READ16
SCSI_OPCODE_COMPARE_AND_WRITE = _libiscsi.SCSI_OPCODE_COMPARE_AND_WRITE
SCSI_OPCODE_WRITE16 = _libiscsi.SCSI_OPCODE_WRITE16
SCSI_OPCODE_ORWRITE = _libiscsi.SCSI_OPCODE_ORWRITE
SCSI_OPCODE_WRITE_VERIFY16 = _libiscsi.SCSI_OPCODE_WRITE_VERIFY16
SCSI_OPCODE_VERIFY16 = _libiscsi.SCSI_OPCODE_VERIFY16
SCSI_OPCODE_PREFETCH16 = _libiscsi.SCSI_OPCODE_PREFETCH16
SCSI_OPCODE_SYNCHRONIZECACHE16 = _libiscsi.SCSI_OPCODE_SYNCHRONIZECACHE16
SCSI_OPCODE_WRITE_SAME16 = _libiscsi.SCSI_OPCODE_WRITE_SAME16
SCSI_OPCODE_WRITE_ATOMIC16 = _libiscsi.SCSI_OPCODE_WRITE_ATOMIC16
SCSI_OPCODE_SERVICE_ACTION_IN = _libiscsi.SCSI_OPCODE_SERVICE_ACTION_IN
SCSI_OPCODE_REPORTLUNS = _libiscsi.SCSI_OPCODE_REPORTLUNS
SCSI_OPCODE_MAINTENANCE_IN = _libiscsi.SCSI_OPCODE_MAINTENANCE_IN
SCSI_OPCODE_READ12 = _libiscsi.SCSI_OPCODE_READ12
SCSI_OPCODE_WRITE12 = _libiscsi.SCSI_OPCODE_WRITE12
SCSI_OPCODE_WRITE_VERIFY12 = _libiscsi.SCSI_OPCODE_WRITE_VERIFY12
SCSI_OPCODE_VERIFY12 = _libiscsi.SCSI_OPCODE_VERIFY12
SCSI_OPCODE_READ_DEFECT_DATA12 = _libiscsi.SCSI_OPCODE_READ_DEFECT_DATA12
SCSI_PERSISTENT_RESERVE_READ_KEYS = _libiscsi.SCSI_PERSISTENT_RESERVE_READ_KEYS
SCSI_PERSISTENT_RESERVE_READ_RESERVATION = _libiscsi.SCSI_PERSISTENT_RESERVE_READ_RESERVATION
SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES = _libiscsi.SCSI_PERSISTENT_RESERVE_REPORT_CAPABILITIES
SCSI_PERSISTENT_RESERVE_READ_FULL_STATUS = _libiscsi.SCSI_PERSISTENT_RESERVE_READ_FULL_STATUS
SCSI_READCAPACITY16 = _libiscsi.SCSI_READCAPACITY16
SCSI_GET_LBA_STATUS = _libiscsi.SCSI_GET_LBA_STATUS
SCSI_PERSISTENT_RESERVE_REGISTER = _libiscsi.SCSI_PERSISTENT_RESERVE_REGISTER
SCSI_PERSISTENT_RESERVE_RESERVE = _libiscsi.SCSI_PERSISTENT_RESERVE_RESERVE
SCSI_PERSISTENT_RESERVE_RELEASE = _libiscsi.SCSI_PERSISTENT_RESERVE_RELEASE
SCSI_PERSISTENT_RESERVE_CLEAR = _libiscsi.SCSI_PERSISTENT_RESERVE_CLEAR
SCSI_PERSISTENT_RESERVE_PREEMPT = _libiscsi.SCSI_PERSISTENT_RESERVE_PREEMPT
SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT = _libiscsi.SCSI_PERSISTENT_RESERVE_PREEMPT_AND_ABORT
SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY = _libiscsi.SCSI_PERSISTENT_RESERVE_REGISTER_AND_IGNORE_EXISTING_KEY
SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE = _libiscsi.SCSI_PERSISTENT_RESERVE_REGISTER_AND_MOVE
SCSI_PERSISTENT_RESERVE_SCOPE_LU = _libiscsi.SCSI_PERSISTENT_RESERVE_SCOPE_LU
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_REGISTRANTS_ONLY
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_REGISTRANTS_ONLY
SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_WRITE_EXCLUSIVE_ALL_REGISTRANTS
SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS = _libiscsi.SCSI_PERSISTENT_RESERVE_TYPE_EXCLUSIVE_ACCESS_ALL_REGISTRANTS
class scsi_persistent_reserve_out_basic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_persistent_reserve_out_basic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_persistent_reserve_out_basic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["reservation_key"] = _libiscsi.scsi_persistent_reserve_out_basic_reservation_key_set
    __swig_getmethods__["reservation_key"] = _libiscsi.scsi_persistent_reserve_out_basic_reservation_key_get
    if _newclass:
        reservation_key = _swig_property(_libiscsi.scsi_persistent_reserve_out_basic_reservation_key_get, _libiscsi.scsi_persistent_reserve_out_basic_reservation_key_set)
    __swig_setmethods__["service_action_reservation_key"] = _libiscsi.scsi_persistent_reserve_out_basic_service_action_reservation_key_set
    __swig_getmethods__["service_action_reservation_key"] = _libiscsi.scsi_persistent_reserve_out_basic_service_action_reservation_key_get
    if _newclass:
        service_action_reservation_key = _swig_property(_libiscsi.scsi_persistent_reserve_out_basic_service_action_reservation_key_get, _libiscsi.scsi_persistent_reserve_out_basic_service_action_reservation_key_set)
    __swig_setmethods__["spec_i_pt"] = _libiscsi.scsi_persistent_reserve_out_basic_spec_i_pt_set
    __swig_getmethods__["spec_i_pt"] = _libiscsi.scsi_persistent_reserve_out_basic_spec_i_pt_get
    if _newclass:
        spec_i_pt = _swig_property(_libiscsi.scsi_persistent_reserve_out_basic_spec_i_pt_get, _libiscsi.scsi_persistent_reserve_out_basic_spec_i_pt_set)
    __swig_setmethods__["all_tg_pt"] = _libiscsi.scsi_persistent_reserve_out_basic_all_tg_pt_set
    __swig_getmethods__["all_tg_pt"] = _libiscsi.scsi_persistent_reserve_out_basic_all_tg_pt_get
    if _newclass:
        all_tg_pt = _swig_property(_libiscsi.scsi_persistent_reserve_out_basic_all_tg_pt_get, _libiscsi.scsi_persistent_reserve_out_basic_all_tg_pt_set)
    __swig_setmethods__["aptpl"] = _libiscsi.scsi_persistent_reserve_out_basic_aptpl_set
    __swig_getmethods__["aptpl"] = _libiscsi.scsi_persistent_reserve_out_basic_aptpl_get
    if _newclass:
        aptpl = _swig_property(_libiscsi.scsi_persistent_reserve_out_basic_aptpl_get, _libiscsi.scsi_persistent_reserve_out_basic_aptpl_set)

    def __init__(self):
        this = _libiscsi.new_scsi_persistent_reserve_out_basic()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_persistent_reserve_out_basic
    __del__ = lambda self: None
scsi_persistent_reserve_out_basic_swigregister = _libiscsi.scsi_persistent_reserve_out_basic_swigregister
scsi_persistent_reserve_out_basic_swigregister(scsi_persistent_reserve_out_basic)

SCSI_REPORT_SUPPORTED_OP_CODES = _libiscsi.SCSI_REPORT_SUPPORTED_OP_CODES
SCSI_REPORT_SUPPORTING_OPS_ALL = _libiscsi.SCSI_REPORT_SUPPORTING_OPS_ALL
SCSI_REPORT_SUPPORTING_OPCODE = _libiscsi.SCSI_REPORT_SUPPORTING_OPCODE
SCSI_REPORT_SUPPORTING_SERVICEACTION = _libiscsi.SCSI_REPORT_SUPPORTING_SERVICEACTION
SCSI_SENSE_NO_SENSE = _libiscsi.SCSI_SENSE_NO_SENSE
SCSI_SENSE_RECOVERED_ERROR = _libiscsi.SCSI_SENSE_RECOVERED_ERROR
SCSI_SENSE_NOT_READY = _libiscsi.SCSI_SENSE_NOT_READY
SCSI_SENSE_MEDIUM_ERROR = _libiscsi.SCSI_SENSE_MEDIUM_ERROR
SCSI_SENSE_HARDWARE_ERROR = _libiscsi.SCSI_SENSE_HARDWARE_ERROR
SCSI_SENSE_ILLEGAL_REQUEST = _libiscsi.SCSI_SENSE_ILLEGAL_REQUEST
SCSI_SENSE_UNIT_ATTENTION = _libiscsi.SCSI_SENSE_UNIT_ATTENTION
SCSI_SENSE_DATA_PROTECTION = _libiscsi.SCSI_SENSE_DATA_PROTECTION
SCSI_SENSE_BLANK_CHECK = _libiscsi.SCSI_SENSE_BLANK_CHECK
SCSI_SENSE_VENDOR_SPECIFIC = _libiscsi.SCSI_SENSE_VENDOR_SPECIFIC
SCSI_SENSE_COPY_ABORTED = _libiscsi.SCSI_SENSE_COPY_ABORTED
SCSI_SENSE_COMMAND_ABORTED = _libiscsi.SCSI_SENSE_COMMAND_ABORTED
SCSI_SENSE_OBSOLETE_ERROR_CODE = _libiscsi.SCSI_SENSE_OBSOLETE_ERROR_CODE
SCSI_SENSE_OVERFLOW_COMMAND = _libiscsi.SCSI_SENSE_OVERFLOW_COMMAND
SCSI_SENSE_MISCOMPARE = _libiscsi.SCSI_SENSE_MISCOMPARE

def scsi_sense_key_str(key: 'int') -> "char const *":
    return _libiscsi.scsi_sense_key_str(key)
scsi_sense_key_str = _libiscsi.scsi_sense_key_str
SCSI_SENSE_ASCQ_NO_ADDL_SENSE = _libiscsi.SCSI_SENSE_ASCQ_NO_ADDL_SENSE
SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS = _libiscsi.SCSI_SENSE_ASCQ_SANITIZE_IN_PROGRESS
SCSI_SENSE_ASCQ_UNREACHABLE_COPY_TARGET = _libiscsi.SCSI_SENSE_ASCQ_UNREACHABLE_COPY_TARGET
SCSI_SENSE_ASCQ_COPY_TARGET_DEVICE_NOT_REACHABLE = _libiscsi.SCSI_SENSE_ASCQ_COPY_TARGET_DEVICE_NOT_REACHABLE
SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED = _libiscsi.SCSI_SENSE_ASCQ_WRITE_AFTER_SANITIZE_REQUIRED
SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR = _libiscsi.SCSI_SENSE_ASCQ_PARAMETER_LIST_LENGTH_ERROR
SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY = _libiscsi.SCSI_SENSE_ASCQ_MISCOMPARE_DURING_VERIFY
SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA = _libiscsi.SCSI_SENSE_ASCQ_MISCOMPARE_VERIFY_OF_UNMAPPED_LBA
SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE = _libiscsi.SCSI_SENSE_ASCQ_INVALID_OPERATION_CODE
SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE = _libiscsi.SCSI_SENSE_ASCQ_LBA_OUT_OF_RANGE
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB = _libiscsi.SCSI_SENSE_ASCQ_INVALID_FIELD_IN_CDB
SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED = _libiscsi.SCSI_SENSE_ASCQ_LOGICAL_UNIT_NOT_SUPPORTED
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST = _libiscsi.SCSI_SENSE_ASCQ_INVALID_FIELD_IN_PARAMETER_LIST
SCSI_SENSE_ASCQ_TOO_MANY_TARGET_DESCRIPTORS = _libiscsi.SCSI_SENSE_ASCQ_TOO_MANY_TARGET_DESCRIPTORS
SCSI_SENSE_ASCQ_UNSUPPORTED_TARGET_DESCRIPTOR_TYPE_CODE = _libiscsi.SCSI_SENSE_ASCQ_UNSUPPORTED_TARGET_DESCRIPTOR_TYPE_CODE
SCSI_SENSE_ASCQ_TOO_MANY_SEGMENT_DESCRIPTORS = _libiscsi.SCSI_SENSE_ASCQ_TOO_MANY_SEGMENT_DESCRIPTORS
SCSI_SENSE_ASCQ_UNSUPPORTED_SEGMENT_DESCRIPTOR_TYPE_CODE = _libiscsi.SCSI_SENSE_ASCQ_UNSUPPORTED_SEGMENT_DESCRIPTOR_TYPE_CODE
SCSI_SENSE_ASCQ_WRITE_PROTECTED = _libiscsi.SCSI_SENSE_ASCQ_WRITE_PROTECTED
SCSI_SENSE_ASCQ_HARDWARE_WRITE_PROTECTED = _libiscsi.SCSI_SENSE_ASCQ_HARDWARE_WRITE_PROTECTED
SCSI_SENSE_ASCQ_SOFTWARE_WRITE_PROTECTED = _libiscsi.SCSI_SENSE_ASCQ_SOFTWARE_WRITE_PROTECTED
SCSI_SENSE_ASCQ_BUS_RESET = _libiscsi.SCSI_SENSE_ASCQ_BUS_RESET
SCSI_SENSE_ASCQ_POWER_ON_OCCURED = _libiscsi.SCSI_SENSE_ASCQ_POWER_ON_OCCURED
SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED = _libiscsi.SCSI_SENSE_ASCQ_SCSI_BUS_RESET_OCCURED
SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED = _libiscsi.SCSI_SENSE_ASCQ_BUS_DEVICE_RESET_FUNCTION_OCCURED
SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET = _libiscsi.SCSI_SENSE_ASCQ_DEVICE_INTERNAL_RESET
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED = _libiscsi.SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_SINGLE_ENDED
SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD = _libiscsi.SCSI_SENSE_ASCQ_TRANSCEIVER_MODE_CHANGED_TO_LVD
SCSI_SENSE_ASCQ_NEXUS_LOSS = _libiscsi.SCSI_SENSE_ASCQ_NEXUS_LOSS
SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED = _libiscsi.SCSI_SENSE_ASCQ_MODE_PARAMETERS_CHANGED
SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED = _libiscsi.SCSI_SENSE_ASCQ_CAPACITY_DATA_HAS_CHANGED
SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED = _libiscsi.SCSI_SENSE_ASCQ_THIN_PROVISION_SOFT_THRES_REACHED
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT = _libiscsi.SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED = _libiscsi.SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_CLOSED
SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN = _libiscsi.SCSI_SENSE_ASCQ_MEDIUM_NOT_PRESENT_TRAY_OPEN
SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED = _libiscsi.SCSI_SENSE_ASCQ_INQUIRY_DATA_HAS_CHANGED
SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE = _libiscsi.SCSI_SENSE_ASCQ_INTERNAL_TARGET_FAILURE
SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED = _libiscsi.SCSI_SENSE_ASCQ_MEDIUM_LOAD_OR_EJECT_FAILED
SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED = _libiscsi.SCSI_SENSE_ASCQ_MEDIUM_REMOVAL_PREVENTED
SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT = _libiscsi.SCSI_SENSE_ASCQ_INVALID_FIELD_IN_INFORMATION_UNIT

def scsi_sense_ascq_str(ascq: 'int') -> "char const *":
    return _libiscsi.scsi_sense_ascq_str(ascq)
scsi_sense_ascq_str = _libiscsi.scsi_sense_ascq_str

def scsi_pr_type_str(pr_type: 'enum scsi_persistent_out_type') -> "char const *":
    return _libiscsi.scsi_pr_type_str(pr_type)
scsi_pr_type_str = _libiscsi.scsi_pr_type_str
SCSI_XFER_NONE = _libiscsi.SCSI_XFER_NONE
SCSI_XFER_READ = _libiscsi.SCSI_XFER_READ
SCSI_XFER_WRITE = _libiscsi.SCSI_XFER_WRITE

def scsi_cdb_readtoc(msf: 'int', format: 'int', track_session: 'int', alloc_len: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_readtoc(msf, format, track_session, alloc_len)
scsi_cdb_readtoc = _libiscsi.scsi_cdb_readtoc
SCSI_READ_TOC = _libiscsi.SCSI_READ_TOC
SCSI_READ_SESSION_INFO = _libiscsi.SCSI_READ_SESSION_INFO
SCSI_READ_FULL_TOC = _libiscsi.SCSI_READ_FULL_TOC
SCSI_READ_PMA = _libiscsi.SCSI_READ_PMA
SCSI_READ_ATIP = _libiscsi.SCSI_READ_ATIP
class scsi_readtoc_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_readtoc_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_readtoc_desc, name)
    __repr__ = _swig_repr
    __swig_getmethods__["desc"] = _libiscsi.scsi_readtoc_desc_desc_get
    if _newclass:
        desc = _swig_property(_libiscsi.scsi_readtoc_desc_desc_get)

    def __init__(self):
        this = _libiscsi.new_scsi_readtoc_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_readtoc_desc
    __del__ = lambda self: None
scsi_readtoc_desc_swigregister = _libiscsi.scsi_readtoc_desc_swigregister
scsi_readtoc_desc_swigregister(scsi_readtoc_desc)

class scsi_readtoc_desc_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_readtoc_desc_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_readtoc_desc_desc, name)
    __repr__ = _swig_repr
    __swig_getmethods__["toc"] = _libiscsi.scsi_readtoc_desc_desc_toc_get
    if _newclass:
        toc = _swig_property(_libiscsi.scsi_readtoc_desc_desc_toc_get)
    __swig_getmethods__["ses"] = _libiscsi.scsi_readtoc_desc_desc_ses_get
    if _newclass:
        ses = _swig_property(_libiscsi.scsi_readtoc_desc_desc_ses_get)
    __swig_getmethods__["full"] = _libiscsi.scsi_readtoc_desc_desc_full_get
    if _newclass:
        full = _swig_property(_libiscsi.scsi_readtoc_desc_desc_full_get)

    def __init__(self):
        this = _libiscsi.new_scsi_readtoc_desc_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_readtoc_desc_desc
    __del__ = lambda self: None
scsi_readtoc_desc_desc_swigregister = _libiscsi.scsi_readtoc_desc_desc_swigregister
scsi_readtoc_desc_desc_swigregister(scsi_readtoc_desc_desc)

class scsi_toc_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_toc_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_toc_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adr"] = _libiscsi.scsi_toc_desc_adr_set
    __swig_getmethods__["adr"] = _libiscsi.scsi_toc_desc_adr_get
    if _newclass:
        adr = _swig_property(_libiscsi.scsi_toc_desc_adr_get, _libiscsi.scsi_toc_desc_adr_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_toc_desc_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_toc_desc_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_toc_desc_control_get, _libiscsi.scsi_toc_desc_control_set)
    __swig_setmethods__["track"] = _libiscsi.scsi_toc_desc_track_set
    __swig_getmethods__["track"] = _libiscsi.scsi_toc_desc_track_get
    if _newclass:
        track = _swig_property(_libiscsi.scsi_toc_desc_track_get, _libiscsi.scsi_toc_desc_track_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_toc_desc_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_toc_desc_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_toc_desc_lba_get, _libiscsi.scsi_toc_desc_lba_set)

    def __init__(self):
        this = _libiscsi.new_scsi_toc_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_toc_desc
    __del__ = lambda self: None
scsi_toc_desc_swigregister = _libiscsi.scsi_toc_desc_swigregister
scsi_toc_desc_swigregister(scsi_toc_desc)

class scsi_session_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_session_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_session_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["adr"] = _libiscsi.scsi_session_desc_adr_set
    __swig_getmethods__["adr"] = _libiscsi.scsi_session_desc_adr_get
    if _newclass:
        adr = _swig_property(_libiscsi.scsi_session_desc_adr_get, _libiscsi.scsi_session_desc_adr_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_session_desc_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_session_desc_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_session_desc_control_get, _libiscsi.scsi_session_desc_control_set)
    __swig_setmethods__["first_in_last"] = _libiscsi.scsi_session_desc_first_in_last_set
    __swig_getmethods__["first_in_last"] = _libiscsi.scsi_session_desc_first_in_last_get
    if _newclass:
        first_in_last = _swig_property(_libiscsi.scsi_session_desc_first_in_last_get, _libiscsi.scsi_session_desc_first_in_last_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_session_desc_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_session_desc_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_session_desc_lba_get, _libiscsi.scsi_session_desc_lba_set)

    def __init__(self):
        this = _libiscsi.new_scsi_session_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_session_desc
    __del__ = lambda self: None
scsi_session_desc_swigregister = _libiscsi.scsi_session_desc_swigregister
scsi_session_desc_swigregister(scsi_session_desc)

class scsi_fulltoc_desc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_fulltoc_desc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_fulltoc_desc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["session"] = _libiscsi.scsi_fulltoc_desc_session_set
    __swig_getmethods__["session"] = _libiscsi.scsi_fulltoc_desc_session_get
    if _newclass:
        session = _swig_property(_libiscsi.scsi_fulltoc_desc_session_get, _libiscsi.scsi_fulltoc_desc_session_set)
    __swig_setmethods__["adr"] = _libiscsi.scsi_fulltoc_desc_adr_set
    __swig_getmethods__["adr"] = _libiscsi.scsi_fulltoc_desc_adr_get
    if _newclass:
        adr = _swig_property(_libiscsi.scsi_fulltoc_desc_adr_get, _libiscsi.scsi_fulltoc_desc_adr_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_fulltoc_desc_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_fulltoc_desc_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_fulltoc_desc_control_get, _libiscsi.scsi_fulltoc_desc_control_set)
    __swig_setmethods__["tno"] = _libiscsi.scsi_fulltoc_desc_tno_set
    __swig_getmethods__["tno"] = _libiscsi.scsi_fulltoc_desc_tno_get
    if _newclass:
        tno = _swig_property(_libiscsi.scsi_fulltoc_desc_tno_get, _libiscsi.scsi_fulltoc_desc_tno_set)
    __swig_setmethods__["point"] = _libiscsi.scsi_fulltoc_desc_point_set
    __swig_getmethods__["point"] = _libiscsi.scsi_fulltoc_desc_point_get
    if _newclass:
        point = _swig_property(_libiscsi.scsi_fulltoc_desc_point_get, _libiscsi.scsi_fulltoc_desc_point_set)
    __swig_setmethods__["min"] = _libiscsi.scsi_fulltoc_desc_min_set
    __swig_getmethods__["min"] = _libiscsi.scsi_fulltoc_desc_min_get
    if _newclass:
        min = _swig_property(_libiscsi.scsi_fulltoc_desc_min_get, _libiscsi.scsi_fulltoc_desc_min_set)
    __swig_setmethods__["sec"] = _libiscsi.scsi_fulltoc_desc_sec_set
    __swig_getmethods__["sec"] = _libiscsi.scsi_fulltoc_desc_sec_get
    if _newclass:
        sec = _swig_property(_libiscsi.scsi_fulltoc_desc_sec_get, _libiscsi.scsi_fulltoc_desc_sec_set)
    __swig_setmethods__["frame"] = _libiscsi.scsi_fulltoc_desc_frame_set
    __swig_getmethods__["frame"] = _libiscsi.scsi_fulltoc_desc_frame_get
    if _newclass:
        frame = _swig_property(_libiscsi.scsi_fulltoc_desc_frame_get, _libiscsi.scsi_fulltoc_desc_frame_set)
    __swig_setmethods__["zero"] = _libiscsi.scsi_fulltoc_desc_zero_set
    __swig_getmethods__["zero"] = _libiscsi.scsi_fulltoc_desc_zero_get
    if _newclass:
        zero = _swig_property(_libiscsi.scsi_fulltoc_desc_zero_get, _libiscsi.scsi_fulltoc_desc_zero_set)
    __swig_setmethods__["pmin"] = _libiscsi.scsi_fulltoc_desc_pmin_set
    __swig_getmethods__["pmin"] = _libiscsi.scsi_fulltoc_desc_pmin_get
    if _newclass:
        pmin = _swig_property(_libiscsi.scsi_fulltoc_desc_pmin_get, _libiscsi.scsi_fulltoc_desc_pmin_set)
    __swig_setmethods__["psec"] = _libiscsi.scsi_fulltoc_desc_psec_set
    __swig_getmethods__["psec"] = _libiscsi.scsi_fulltoc_desc_psec_get
    if _newclass:
        psec = _swig_property(_libiscsi.scsi_fulltoc_desc_psec_get, _libiscsi.scsi_fulltoc_desc_psec_set)
    __swig_setmethods__["pframe"] = _libiscsi.scsi_fulltoc_desc_pframe_set
    __swig_getmethods__["pframe"] = _libiscsi.scsi_fulltoc_desc_pframe_get
    if _newclass:
        pframe = _swig_property(_libiscsi.scsi_fulltoc_desc_pframe_get, _libiscsi.scsi_fulltoc_desc_pframe_set)

    def __init__(self):
        this = _libiscsi.new_scsi_fulltoc_desc()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_fulltoc_desc
    __del__ = lambda self: None
scsi_fulltoc_desc_swigregister = _libiscsi.scsi_fulltoc_desc_swigregister
scsi_fulltoc_desc_swigregister(scsi_fulltoc_desc)

class scsi_readtoc_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_readtoc_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_readtoc_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _libiscsi.scsi_readtoc_list_num_set
    __swig_getmethods__["num"] = _libiscsi.scsi_readtoc_list_num_get
    if _newclass:
        num = _swig_property(_libiscsi.scsi_readtoc_list_num_get, _libiscsi.scsi_readtoc_list_num_set)
    __swig_setmethods__["first"] = _libiscsi.scsi_readtoc_list_first_set
    __swig_getmethods__["first"] = _libiscsi.scsi_readtoc_list_first_get
    if _newclass:
        first = _swig_property(_libiscsi.scsi_readtoc_list_first_get, _libiscsi.scsi_readtoc_list_first_set)
    __swig_setmethods__["last"] = _libiscsi.scsi_readtoc_list_last_set
    __swig_getmethods__["last"] = _libiscsi.scsi_readtoc_list_last_get
    if _newclass:
        last = _swig_property(_libiscsi.scsi_readtoc_list_last_get, _libiscsi.scsi_readtoc_list_last_set)
    __swig_setmethods__["desc"] = _libiscsi.scsi_readtoc_list_desc_set
    __swig_getmethods__["desc"] = _libiscsi.scsi_readtoc_list_desc_get
    if _newclass:
        desc = _swig_property(_libiscsi.scsi_readtoc_list_desc_get, _libiscsi.scsi_readtoc_list_desc_set)

    def __init__(self):
        this = _libiscsi.new_scsi_readtoc_list()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_readtoc_list
    __del__ = lambda self: None
scsi_readtoc_list_swigregister = _libiscsi.scsi_readtoc_list_swigregister
scsi_readtoc_list_swigregister(scsi_readtoc_list)

class scsi_report_supported_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_report_supported_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_report_supported_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["return_timeouts"] = _libiscsi.scsi_report_supported_params_return_timeouts_set
    __swig_getmethods__["return_timeouts"] = _libiscsi.scsi_report_supported_params_return_timeouts_get
    if _newclass:
        return_timeouts = _swig_property(_libiscsi.scsi_report_supported_params_return_timeouts_get, _libiscsi.scsi_report_supported_params_return_timeouts_set)

    def __init__(self):
        this = _libiscsi.new_scsi_report_supported_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_report_supported_params
    __del__ = lambda self: None
scsi_report_supported_params_swigregister = _libiscsi.scsi_report_supported_params_swigregister
scsi_report_supported_params_swigregister(scsi_report_supported_params)

SCSI_SENSE_FIXED_CURRENT = _libiscsi.SCSI_SENSE_FIXED_CURRENT
SCSI_SENSE_FIXED_DEFERRED_ERRORS = _libiscsi.SCSI_SENSE_FIXED_DEFERRED_ERRORS
SCSI_SENSE_DESCRIPTOR_CURRENT = _libiscsi.SCSI_SENSE_DESCRIPTOR_CURRENT
SCSI_SENSE_DESCRIPTOR_DEFERRED_ERRORS = _libiscsi.SCSI_SENSE_DESCRIPTOR_DEFERRED_ERRORS
class scsi_sense(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_sense, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_sense, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_type"] = _libiscsi.scsi_sense_error_type_set
    __swig_getmethods__["error_type"] = _libiscsi.scsi_sense_error_type_get
    if _newclass:
        error_type = _swig_property(_libiscsi.scsi_sense_error_type_get, _libiscsi.scsi_sense_error_type_set)
    __swig_setmethods__["key"] = _libiscsi.scsi_sense_key_set
    __swig_getmethods__["key"] = _libiscsi.scsi_sense_key_get
    if _newclass:
        key = _swig_property(_libiscsi.scsi_sense_key_get, _libiscsi.scsi_sense_key_set)
    __swig_setmethods__["ascq"] = _libiscsi.scsi_sense_ascq_set
    __swig_getmethods__["ascq"] = _libiscsi.scsi_sense_ascq_get
    if _newclass:
        ascq = _swig_property(_libiscsi.scsi_sense_ascq_get, _libiscsi.scsi_sense_ascq_set)
    __swig_setmethods__["sense_specific"] = _libiscsi.scsi_sense_sense_specific_set
    __swig_getmethods__["sense_specific"] = _libiscsi.scsi_sense_sense_specific_get
    if _newclass:
        sense_specific = _swig_property(_libiscsi.scsi_sense_sense_specific_get, _libiscsi.scsi_sense_sense_specific_set)
    __swig_setmethods__["ill_param_in_cdb"] = _libiscsi.scsi_sense_ill_param_in_cdb_set
    __swig_getmethods__["ill_param_in_cdb"] = _libiscsi.scsi_sense_ill_param_in_cdb_get
    if _newclass:
        ill_param_in_cdb = _swig_property(_libiscsi.scsi_sense_ill_param_in_cdb_get, _libiscsi.scsi_sense_ill_param_in_cdb_set)
    __swig_setmethods__["bit_pointer_valid"] = _libiscsi.scsi_sense_bit_pointer_valid_set
    __swig_getmethods__["bit_pointer_valid"] = _libiscsi.scsi_sense_bit_pointer_valid_get
    if _newclass:
        bit_pointer_valid = _swig_property(_libiscsi.scsi_sense_bit_pointer_valid_get, _libiscsi.scsi_sense_bit_pointer_valid_set)
    __swig_setmethods__["bit_pointer"] = _libiscsi.scsi_sense_bit_pointer_set
    __swig_getmethods__["bit_pointer"] = _libiscsi.scsi_sense_bit_pointer_get
    if _newclass:
        bit_pointer = _swig_property(_libiscsi.scsi_sense_bit_pointer_get, _libiscsi.scsi_sense_bit_pointer_set)
    __swig_setmethods__["field_pointer"] = _libiscsi.scsi_sense_field_pointer_set
    __swig_getmethods__["field_pointer"] = _libiscsi.scsi_sense_field_pointer_get
    if _newclass:
        field_pointer = _swig_property(_libiscsi.scsi_sense_field_pointer_get, _libiscsi.scsi_sense_field_pointer_set)

    def __init__(self):
        this = _libiscsi.new_scsi_sense()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_sense
    __del__ = lambda self: None
scsi_sense_swigregister = _libiscsi.scsi_sense_swigregister
scsi_sense_swigregister(scsi_sense)

class scsi_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libiscsi.scsi_data_size_set
    __swig_getmethods__["size"] = _libiscsi.scsi_data_size_get
    if _newclass:
        size = _swig_property(_libiscsi.scsi_data_size_get, _libiscsi.scsi_data_size_set)
    __swig_setmethods__["data"] = _libiscsi.scsi_data_data_set
    __swig_getmethods__["data"] = _libiscsi.scsi_data_data_get
    if _newclass:
        data = _swig_property(_libiscsi.scsi_data_data_get, _libiscsi.scsi_data_data_set)

    def __init__(self):
        this = _libiscsi.new_scsi_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_data
    __del__ = lambda self: None
scsi_data_swigregister = _libiscsi.scsi_data_swigregister
scsi_data_swigregister(scsi_data)

SCSI_RESIDUAL_NO_RESIDUAL = _libiscsi.SCSI_RESIDUAL_NO_RESIDUAL
SCSI_RESIDUAL_UNDERFLOW = _libiscsi.SCSI_RESIDUAL_UNDERFLOW
SCSI_RESIDUAL_OVERFLOW = _libiscsi.SCSI_RESIDUAL_OVERFLOW
class scsi_iovec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_iovec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_iovec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iov_base"] = _libiscsi.scsi_iovec_iov_base_set
    __swig_getmethods__["iov_base"] = _libiscsi.scsi_iovec_iov_base_get
    if _newclass:
        iov_base = _swig_property(_libiscsi.scsi_iovec_iov_base_get, _libiscsi.scsi_iovec_iov_base_set)
    __swig_setmethods__["iov_len"] = _libiscsi.scsi_iovec_iov_len_set
    __swig_getmethods__["iov_len"] = _libiscsi.scsi_iovec_iov_len_get
    if _newclass:
        iov_len = _swig_property(_libiscsi.scsi_iovec_iov_len_get, _libiscsi.scsi_iovec_iov_len_set)

    def __init__(self):
        this = _libiscsi.new_scsi_iovec()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_iovec
    __del__ = lambda self: None
scsi_iovec_swigregister = _libiscsi.scsi_iovec_swigregister
scsi_iovec_swigregister(scsi_iovec)

class scsi_iovector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_iovector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_iovector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["iov"] = _libiscsi.scsi_iovector_iov_set
    __swig_getmethods__["iov"] = _libiscsi.scsi_iovector_iov_get
    if _newclass:
        iov = _swig_property(_libiscsi.scsi_iovector_iov_get, _libiscsi.scsi_iovector_iov_set)
    __swig_setmethods__["niov"] = _libiscsi.scsi_iovector_niov_set
    __swig_getmethods__["niov"] = _libiscsi.scsi_iovector_niov_get
    if _newclass:
        niov = _swig_property(_libiscsi.scsi_iovector_niov_get, _libiscsi.scsi_iovector_niov_set)
    __swig_setmethods__["nalloc"] = _libiscsi.scsi_iovector_nalloc_set
    __swig_getmethods__["nalloc"] = _libiscsi.scsi_iovector_nalloc_get
    if _newclass:
        nalloc = _swig_property(_libiscsi.scsi_iovector_nalloc_get, _libiscsi.scsi_iovector_nalloc_set)
    __swig_setmethods__["offset"] = _libiscsi.scsi_iovector_offset_set
    __swig_getmethods__["offset"] = _libiscsi.scsi_iovector_offset_get
    if _newclass:
        offset = _swig_property(_libiscsi.scsi_iovector_offset_get, _libiscsi.scsi_iovector_offset_set)
    __swig_setmethods__["consumed"] = _libiscsi.scsi_iovector_consumed_set
    __swig_getmethods__["consumed"] = _libiscsi.scsi_iovector_consumed_get
    if _newclass:
        consumed = _swig_property(_libiscsi.scsi_iovector_consumed_get, _libiscsi.scsi_iovector_consumed_set)

    def __init__(self):
        this = _libiscsi.new_scsi_iovector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_iovector
    __del__ = lambda self: None
scsi_iovector_swigregister = _libiscsi.scsi_iovector_swigregister
scsi_iovector_swigregister(scsi_iovector)

class scsi_task(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_task, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_task, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _libiscsi.scsi_task_status_set
    __swig_getmethods__["status"] = _libiscsi.scsi_task_status_get
    if _newclass:
        status = _swig_property(_libiscsi.scsi_task_status_get, _libiscsi.scsi_task_status_set)
    __swig_setmethods__["cdb_size"] = _libiscsi.scsi_task_cdb_size_set
    __swig_getmethods__["cdb_size"] = _libiscsi.scsi_task_cdb_size_get
    if _newclass:
        cdb_size = _swig_property(_libiscsi.scsi_task_cdb_size_get, _libiscsi.scsi_task_cdb_size_set)
    __swig_setmethods__["xfer_dir"] = _libiscsi.scsi_task_xfer_dir_set
    __swig_getmethods__["xfer_dir"] = _libiscsi.scsi_task_xfer_dir_get
    if _newclass:
        xfer_dir = _swig_property(_libiscsi.scsi_task_xfer_dir_get, _libiscsi.scsi_task_xfer_dir_set)
    __swig_setmethods__["expxferlen"] = _libiscsi.scsi_task_expxferlen_set
    __swig_getmethods__["expxferlen"] = _libiscsi.scsi_task_expxferlen_get
    if _newclass:
        expxferlen = _swig_property(_libiscsi.scsi_task_expxferlen_get, _libiscsi.scsi_task_expxferlen_set)
    __swig_setmethods__["cdb"] = _libiscsi.scsi_task_cdb_set
    __swig_getmethods__["cdb"] = _libiscsi.scsi_task_cdb_get
    if _newclass:
        cdb = _swig_property(_libiscsi.scsi_task_cdb_get, _libiscsi.scsi_task_cdb_set)
    __swig_setmethods__["residual_status"] = _libiscsi.scsi_task_residual_status_set
    __swig_getmethods__["residual_status"] = _libiscsi.scsi_task_residual_status_get
    if _newclass:
        residual_status = _swig_property(_libiscsi.scsi_task_residual_status_get, _libiscsi.scsi_task_residual_status_set)
    __swig_setmethods__["residual"] = _libiscsi.scsi_task_residual_set
    __swig_getmethods__["residual"] = _libiscsi.scsi_task_residual_get
    if _newclass:
        residual = _swig_property(_libiscsi.scsi_task_residual_get, _libiscsi.scsi_task_residual_set)
    __swig_setmethods__["sense"] = _libiscsi.scsi_task_sense_set
    __swig_getmethods__["sense"] = _libiscsi.scsi_task_sense_get
    if _newclass:
        sense = _swig_property(_libiscsi.scsi_task_sense_get, _libiscsi.scsi_task_sense_set)
    __swig_setmethods__["datain"] = _libiscsi.scsi_task_datain_set
    __swig_getmethods__["datain"] = _libiscsi.scsi_task_datain_get
    if _newclass:
        datain = _swig_property(_libiscsi.scsi_task_datain_get, _libiscsi.scsi_task_datain_set)
    __swig_setmethods__["mem"] = _libiscsi.scsi_task_mem_set
    __swig_getmethods__["mem"] = _libiscsi.scsi_task_mem_get
    if _newclass:
        mem = _swig_property(_libiscsi.scsi_task_mem_get, _libiscsi.scsi_task_mem_set)
    __swig_setmethods__["ptr"] = _libiscsi.scsi_task_ptr_set
    __swig_getmethods__["ptr"] = _libiscsi.scsi_task_ptr_get
    if _newclass:
        ptr = _swig_property(_libiscsi.scsi_task_ptr_get, _libiscsi.scsi_task_ptr_set)
    __swig_setmethods__["itt"] = _libiscsi.scsi_task_itt_set
    __swig_getmethods__["itt"] = _libiscsi.scsi_task_itt_get
    if _newclass:
        itt = _swig_property(_libiscsi.scsi_task_itt_get, _libiscsi.scsi_task_itt_set)
    __swig_setmethods__["cmdsn"] = _libiscsi.scsi_task_cmdsn_set
    __swig_getmethods__["cmdsn"] = _libiscsi.scsi_task_cmdsn_get
    if _newclass:
        cmdsn = _swig_property(_libiscsi.scsi_task_cmdsn_get, _libiscsi.scsi_task_cmdsn_set)
    __swig_setmethods__["lun"] = _libiscsi.scsi_task_lun_set
    __swig_getmethods__["lun"] = _libiscsi.scsi_task_lun_get
    if _newclass:
        lun = _swig_property(_libiscsi.scsi_task_lun_get, _libiscsi.scsi_task_lun_set)
    __swig_setmethods__["iovector_in"] = _libiscsi.scsi_task_iovector_in_set
    __swig_getmethods__["iovector_in"] = _libiscsi.scsi_task_iovector_in_get
    if _newclass:
        iovector_in = _swig_property(_libiscsi.scsi_task_iovector_in_get, _libiscsi.scsi_task_iovector_in_set)
    __swig_setmethods__["iovector_out"] = _libiscsi.scsi_task_iovector_out_set
    __swig_getmethods__["iovector_out"] = _libiscsi.scsi_task_iovector_out_get
    if _newclass:
        iovector_out = _swig_property(_libiscsi.scsi_task_iovector_out_get, _libiscsi.scsi_task_iovector_out_set)

    def __init__(self):
        this = _libiscsi.new_scsi_task()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_task
    __del__ = lambda self: None
scsi_task_swigregister = _libiscsi.scsi_task_swigregister
scsi_task_swigregister(scsi_task)


def scsi_create_task(cdb_size: 'int', xfer_dir: 'int', expxferlen: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_create_task(cdb_size, xfer_dir, expxferlen)
scsi_create_task = _libiscsi.scsi_create_task

def scsi_free_scsi_task(task: 'scsi_task') -> "void":
    return _libiscsi.scsi_free_scsi_task(task)
scsi_free_scsi_task = _libiscsi.scsi_free_scsi_task

def scsi_set_task_private_ptr(task: 'scsi_task', ptr: 'void *') -> "void":
    return _libiscsi.scsi_set_task_private_ptr(task, ptr)
scsi_set_task_private_ptr = _libiscsi.scsi_set_task_private_ptr

def scsi_get_task_private_ptr(task: 'scsi_task') -> "void *":
    return _libiscsi.scsi_get_task_private_ptr(task)
scsi_get_task_private_ptr = _libiscsi.scsi_get_task_private_ptr

def scsi_cdb_testunitready() -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_testunitready()
scsi_cdb_testunitready = _libiscsi.scsi_cdb_testunitready
SCSI_SANITIZE_OVERWRITE = _libiscsi.SCSI_SANITIZE_OVERWRITE
SCSI_SANITIZE_BLOCK_ERASE = _libiscsi.SCSI_SANITIZE_BLOCK_ERASE
SCSI_SANITIZE_CRYPTO_ERASE = _libiscsi.SCSI_SANITIZE_CRYPTO_ERASE
SCSI_SANITIZE_EXIT_FAILURE_MODE = _libiscsi.SCSI_SANITIZE_EXIT_FAILURE_MODE

def scsi_cdb_sanitize(immed: 'int', ause: 'int', sa: 'int', param_len: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_sanitize(immed, ause, sa, param_len)
scsi_cdb_sanitize = _libiscsi.scsi_cdb_sanitize
SCSI_REPORTLUNS_REPORT_ALL_LUNS = _libiscsi.SCSI_REPORTLUNS_REPORT_ALL_LUNS
SCSI_REPORTLUNS_REPORT_WELL_KNOWN_ONLY = _libiscsi.SCSI_REPORTLUNS_REPORT_WELL_KNOWN_ONLY
SCSI_REPORTLUNS_REPORT_AVAILABLE_LUNS_ONLY = _libiscsi.SCSI_REPORTLUNS_REPORT_AVAILABLE_LUNS_ONLY
class scsi_reportluns_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_reportluns_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_reportluns_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _libiscsi.scsi_reportluns_list_num_set
    __swig_getmethods__["num"] = _libiscsi.scsi_reportluns_list_num_get
    if _newclass:
        num = _swig_property(_libiscsi.scsi_reportluns_list_num_get, _libiscsi.scsi_reportluns_list_num_set)
    __swig_setmethods__["luns"] = _libiscsi.scsi_reportluns_list_luns_set
    __swig_getmethods__["luns"] = _libiscsi.scsi_reportluns_list_luns_get
    if _newclass:
        luns = _swig_property(_libiscsi.scsi_reportluns_list_luns_get, _libiscsi.scsi_reportluns_list_luns_set)

    def __init__(self):
        this = _libiscsi.new_scsi_reportluns_list()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_reportluns_list
    __del__ = lambda self: None
scsi_reportluns_list_swigregister = _libiscsi.scsi_reportluns_list_swigregister
scsi_reportluns_list_swigregister(scsi_reportluns_list)


def scsi_reportluns_cdb(report_type: 'int', alloc_len: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_reportluns_cdb(report_type, alloc_len)
scsi_reportluns_cdb = _libiscsi.scsi_reportluns_cdb

def scsi_cdb_reserve6() -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_reserve6()
scsi_cdb_reserve6 = _libiscsi.scsi_cdb_reserve6

def scsi_cdb_release6() -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_release6()
scsi_cdb_release6 = _libiscsi.scsi_cdb_release6
class scsi_readcapacity10(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_readcapacity10, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_readcapacity10, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _libiscsi.scsi_readcapacity10_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_readcapacity10_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_readcapacity10_lba_get, _libiscsi.scsi_readcapacity10_lba_set)
    __swig_setmethods__["block_size"] = _libiscsi.scsi_readcapacity10_block_size_set
    __swig_getmethods__["block_size"] = _libiscsi.scsi_readcapacity10_block_size_get
    if _newclass:
        block_size = _swig_property(_libiscsi.scsi_readcapacity10_block_size_get, _libiscsi.scsi_readcapacity10_block_size_set)

    def __init__(self):
        this = _libiscsi.new_scsi_readcapacity10()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_readcapacity10
    __del__ = lambda self: None
scsi_readcapacity10_swigregister = _libiscsi.scsi_readcapacity10_swigregister
scsi_readcapacity10_swigregister(scsi_readcapacity10)


def scsi_cdb_readcapacity10(lba: 'int', pmi: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_readcapacity10(lba, pmi)
scsi_cdb_readcapacity10 = _libiscsi.scsi_cdb_readcapacity10
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED = _libiscsi.SCSI_INQUIRY_PERIPHERAL_QUALIFIER_CONNECTED
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED = _libiscsi.SCSI_INQUIRY_PERIPHERAL_QUALIFIER_DISCONNECTED
SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED = _libiscsi.SCSI_INQUIRY_PERIPHERAL_QUALIFIER_NOT_SUPPORTED

def scsi_devqualifier_to_str(qualifier: 'enum scsi_inquiry_peripheral_qualifier') -> "char const *":
    return _libiscsi.scsi_devqualifier_to_str(qualifier)
scsi_devqualifier_to_str = _libiscsi.scsi_devqualifier_to_str
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_DIRECT_ACCESS
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQUENTIAL_ACCESS
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PRINTER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_PROCESSOR
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WRITE_ONCE
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MMC
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SCANNER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_MEMORY
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_MEDIA_CHANGER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_COMMUNICATIONS
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_STORAGE_ARRAY_CONTROLLER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_ENCLOSURE_SERVICES
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SIMPLIFIED_DIRECT_ACCESS
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OPTICAL_CARD_READER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_BRIDGE_CONTROLLER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_OSD
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_AUTOMATION
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_SEQURITY_MANAGER
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_WELL_KNOWN_LUN
SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN = _libiscsi.SCSI_INQUIRY_PERIPHERAL_DEVICE_TYPE_UNKNOWN

def scsi_devtype_to_str(type: 'enum scsi_inquiry_peripheral_device_type') -> "char const *":
    return _libiscsi.scsi_devtype_to_str(type)
scsi_devtype_to_str = _libiscsi.scsi_devtype_to_str
SCSI_VERSION_SPC = _libiscsi.SCSI_VERSION_SPC
SCSI_VERSION_SPC2 = _libiscsi.SCSI_VERSION_SPC2
SCSI_VERSION_SPC3 = _libiscsi.SCSI_VERSION_SPC3

def scsi_version_to_str(version: 'enum scsi_version') -> "char const *":
    return _libiscsi.scsi_version_to_str(version)
scsi_version_to_str = _libiscsi.scsi_version_to_str
SCSI_VERSION_DESCRIPTOR_ISCSI = _libiscsi.SCSI_VERSION_DESCRIPTOR_ISCSI
SCSI_VERSION_DESCRIPTOR_SBC = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC
SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_ANSI_INCITS_306_1998
SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_T10_0996_D_R08C
SCSI_VERSION_DESCRIPTOR_SBC_2 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2
SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2_ISO_IEC_14776_322
SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2_ANSI_INCITS_405_2005
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R16
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R5A
SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_2_T10_1417_D_R15
SCSI_VERSION_DESCRIPTOR_SBC_3 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SBC_3
SCSI_VERSION_DESCRIPTOR_SPC = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC
SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_ANSI_INCITS_301_1997
SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_T10_0995_D_R11A
SCSI_VERSION_DESCRIPTOR_SPC_2 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2
SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_ISO_IEC_14776_452
SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_ANSI_INCITS_351_2001
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R20
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R12
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R18
SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_2_T10_1236_D_R19
SCSI_VERSION_DESCRIPTOR_SPC_3 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3
SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_ISO_IEC_14776_453
SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_ANSI_INCITS_408_2005
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R7
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R21
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R22
SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_3_T10_1416_D_R23
SCSI_VERSION_DESCRIPTOR_SPC_4 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_4
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R16
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R18
SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23 = _libiscsi.SCSI_VERSION_DESCRIPTOR_SPC_4_T10_1731_D_R23
SCSI_VERSION_DESCRIPTOR_SSC = _libiscsi.SCSI_VERSION_DESCRIPTOR_SSC
SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04 = _libiscsi.SCSI_VERSION_DESCRIPTOR_UAS_T10_2095D_R04

def scsi_version_descriptor_to_str(version_descriptor: 'enum scsi_version_descriptor') -> "char const *":
    return _libiscsi.scsi_version_descriptor_to_str(version_descriptor)
scsi_version_descriptor_to_str = _libiscsi.scsi_version_descriptor_to_str
SCSI_INQUIRY_TPGS_NO_SUPPORT = _libiscsi.SCSI_INQUIRY_TPGS_NO_SUPPORT
SCSI_INQUIRY_TPGS_IMPLICIT = _libiscsi.SCSI_INQUIRY_TPGS_IMPLICIT
SCSI_INQUIRY_TPGS_EXPLICIT = _libiscsi.SCSI_INQUIRY_TPGS_EXPLICIT
SCSI_INQUIRY_TPGS_IMPLICIT_AND_EXPLICIT = _libiscsi.SCSI_INQUIRY_TPGS_IMPLICIT_AND_EXPLICIT
class scsi_inquiry_standard(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_standard, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_standard, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_standard_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_standard_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_standard_qualifier_get, _libiscsi.scsi_inquiry_standard_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_standard_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_standard_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_standard_device_type_get, _libiscsi.scsi_inquiry_standard_device_type_set)
    __swig_setmethods__["rmb"] = _libiscsi.scsi_inquiry_standard_rmb_set
    __swig_getmethods__["rmb"] = _libiscsi.scsi_inquiry_standard_rmb_get
    if _newclass:
        rmb = _swig_property(_libiscsi.scsi_inquiry_standard_rmb_get, _libiscsi.scsi_inquiry_standard_rmb_set)
    __swig_setmethods__["version"] = _libiscsi.scsi_inquiry_standard_version_set
    __swig_getmethods__["version"] = _libiscsi.scsi_inquiry_standard_version_get
    if _newclass:
        version = _swig_property(_libiscsi.scsi_inquiry_standard_version_get, _libiscsi.scsi_inquiry_standard_version_set)
    __swig_setmethods__["normaca"] = _libiscsi.scsi_inquiry_standard_normaca_set
    __swig_getmethods__["normaca"] = _libiscsi.scsi_inquiry_standard_normaca_get
    if _newclass:
        normaca = _swig_property(_libiscsi.scsi_inquiry_standard_normaca_get, _libiscsi.scsi_inquiry_standard_normaca_set)
    __swig_setmethods__["hisup"] = _libiscsi.scsi_inquiry_standard_hisup_set
    __swig_getmethods__["hisup"] = _libiscsi.scsi_inquiry_standard_hisup_get
    if _newclass:
        hisup = _swig_property(_libiscsi.scsi_inquiry_standard_hisup_get, _libiscsi.scsi_inquiry_standard_hisup_set)
    __swig_setmethods__["response_data_format"] = _libiscsi.scsi_inquiry_standard_response_data_format_set
    __swig_getmethods__["response_data_format"] = _libiscsi.scsi_inquiry_standard_response_data_format_get
    if _newclass:
        response_data_format = _swig_property(_libiscsi.scsi_inquiry_standard_response_data_format_get, _libiscsi.scsi_inquiry_standard_response_data_format_set)
    __swig_setmethods__["additional_length"] = _libiscsi.scsi_inquiry_standard_additional_length_set
    __swig_getmethods__["additional_length"] = _libiscsi.scsi_inquiry_standard_additional_length_get
    if _newclass:
        additional_length = _swig_property(_libiscsi.scsi_inquiry_standard_additional_length_get, _libiscsi.scsi_inquiry_standard_additional_length_set)
    __swig_setmethods__["sccs"] = _libiscsi.scsi_inquiry_standard_sccs_set
    __swig_getmethods__["sccs"] = _libiscsi.scsi_inquiry_standard_sccs_get
    if _newclass:
        sccs = _swig_property(_libiscsi.scsi_inquiry_standard_sccs_get, _libiscsi.scsi_inquiry_standard_sccs_set)
    __swig_setmethods__["acc"] = _libiscsi.scsi_inquiry_standard_acc_set
    __swig_getmethods__["acc"] = _libiscsi.scsi_inquiry_standard_acc_get
    if _newclass:
        acc = _swig_property(_libiscsi.scsi_inquiry_standard_acc_get, _libiscsi.scsi_inquiry_standard_acc_set)
    __swig_setmethods__["tpgs"] = _libiscsi.scsi_inquiry_standard_tpgs_set
    __swig_getmethods__["tpgs"] = _libiscsi.scsi_inquiry_standard_tpgs_get
    if _newclass:
        tpgs = _swig_property(_libiscsi.scsi_inquiry_standard_tpgs_get, _libiscsi.scsi_inquiry_standard_tpgs_set)
    __swig_setmethods__["threepc"] = _libiscsi.scsi_inquiry_standard_threepc_set
    __swig_getmethods__["threepc"] = _libiscsi.scsi_inquiry_standard_threepc_get
    if _newclass:
        threepc = _swig_property(_libiscsi.scsi_inquiry_standard_threepc_get, _libiscsi.scsi_inquiry_standard_threepc_set)
    __swig_setmethods__["protect"] = _libiscsi.scsi_inquiry_standard_protect_set
    __swig_getmethods__["protect"] = _libiscsi.scsi_inquiry_standard_protect_get
    if _newclass:
        protect = _swig_property(_libiscsi.scsi_inquiry_standard_protect_get, _libiscsi.scsi_inquiry_standard_protect_set)
    __swig_setmethods__["encserv"] = _libiscsi.scsi_inquiry_standard_encserv_set
    __swig_getmethods__["encserv"] = _libiscsi.scsi_inquiry_standard_encserv_get
    if _newclass:
        encserv = _swig_property(_libiscsi.scsi_inquiry_standard_encserv_get, _libiscsi.scsi_inquiry_standard_encserv_set)
    __swig_setmethods__["multip"] = _libiscsi.scsi_inquiry_standard_multip_set
    __swig_getmethods__["multip"] = _libiscsi.scsi_inquiry_standard_multip_get
    if _newclass:
        multip = _swig_property(_libiscsi.scsi_inquiry_standard_multip_get, _libiscsi.scsi_inquiry_standard_multip_set)
    __swig_setmethods__["addr16"] = _libiscsi.scsi_inquiry_standard_addr16_set
    __swig_getmethods__["addr16"] = _libiscsi.scsi_inquiry_standard_addr16_get
    if _newclass:
        addr16 = _swig_property(_libiscsi.scsi_inquiry_standard_addr16_get, _libiscsi.scsi_inquiry_standard_addr16_set)
    __swig_setmethods__["wbus16"] = _libiscsi.scsi_inquiry_standard_wbus16_set
    __swig_getmethods__["wbus16"] = _libiscsi.scsi_inquiry_standard_wbus16_get
    if _newclass:
        wbus16 = _swig_property(_libiscsi.scsi_inquiry_standard_wbus16_get, _libiscsi.scsi_inquiry_standard_wbus16_set)
    __swig_setmethods__["sync"] = _libiscsi.scsi_inquiry_standard_sync_set
    __swig_getmethods__["sync"] = _libiscsi.scsi_inquiry_standard_sync_get
    if _newclass:
        sync = _swig_property(_libiscsi.scsi_inquiry_standard_sync_get, _libiscsi.scsi_inquiry_standard_sync_set)
    __swig_setmethods__["cmdque"] = _libiscsi.scsi_inquiry_standard_cmdque_set
    __swig_getmethods__["cmdque"] = _libiscsi.scsi_inquiry_standard_cmdque_get
    if _newclass:
        cmdque = _swig_property(_libiscsi.scsi_inquiry_standard_cmdque_get, _libiscsi.scsi_inquiry_standard_cmdque_set)
    __swig_setmethods__["clocking"] = _libiscsi.scsi_inquiry_standard_clocking_set
    __swig_getmethods__["clocking"] = _libiscsi.scsi_inquiry_standard_clocking_get
    if _newclass:
        clocking = _swig_property(_libiscsi.scsi_inquiry_standard_clocking_get, _libiscsi.scsi_inquiry_standard_clocking_set)
    __swig_setmethods__["qas"] = _libiscsi.scsi_inquiry_standard_qas_set
    __swig_getmethods__["qas"] = _libiscsi.scsi_inquiry_standard_qas_get
    if _newclass:
        qas = _swig_property(_libiscsi.scsi_inquiry_standard_qas_get, _libiscsi.scsi_inquiry_standard_qas_set)
    __swig_setmethods__["ius"] = _libiscsi.scsi_inquiry_standard_ius_set
    __swig_getmethods__["ius"] = _libiscsi.scsi_inquiry_standard_ius_get
    if _newclass:
        ius = _swig_property(_libiscsi.scsi_inquiry_standard_ius_get, _libiscsi.scsi_inquiry_standard_ius_set)
    __swig_setmethods__["vendor_identification"] = _libiscsi.scsi_inquiry_standard_vendor_identification_set
    __swig_getmethods__["vendor_identification"] = _libiscsi.scsi_inquiry_standard_vendor_identification_get
    if _newclass:
        vendor_identification = _swig_property(_libiscsi.scsi_inquiry_standard_vendor_identification_get, _libiscsi.scsi_inquiry_standard_vendor_identification_set)
    __swig_setmethods__["product_identification"] = _libiscsi.scsi_inquiry_standard_product_identification_set
    __swig_getmethods__["product_identification"] = _libiscsi.scsi_inquiry_standard_product_identification_get
    if _newclass:
        product_identification = _swig_property(_libiscsi.scsi_inquiry_standard_product_identification_get, _libiscsi.scsi_inquiry_standard_product_identification_set)
    __swig_setmethods__["product_revision_level"] = _libiscsi.scsi_inquiry_standard_product_revision_level_set
    __swig_getmethods__["product_revision_level"] = _libiscsi.scsi_inquiry_standard_product_revision_level_get
    if _newclass:
        product_revision_level = _swig_property(_libiscsi.scsi_inquiry_standard_product_revision_level_get, _libiscsi.scsi_inquiry_standard_product_revision_level_set)
    __swig_setmethods__["version_descriptor"] = _libiscsi.scsi_inquiry_standard_version_descriptor_set
    __swig_getmethods__["version_descriptor"] = _libiscsi.scsi_inquiry_standard_version_descriptor_get
    if _newclass:
        version_descriptor = _swig_property(_libiscsi.scsi_inquiry_standard_version_descriptor_get, _libiscsi.scsi_inquiry_standard_version_descriptor_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_standard()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_standard
    __del__ = lambda self: None
scsi_inquiry_standard_swigregister = _libiscsi.scsi_inquiry_standard_swigregister
scsi_inquiry_standard_swigregister(scsi_inquiry_standard)

SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES = _libiscsi.SCSI_INQUIRY_PAGECODE_SUPPORTED_VPD_PAGES
SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER = _libiscsi.SCSI_INQUIRY_PAGECODE_UNIT_SERIAL_NUMBER
SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION = _libiscsi.SCSI_INQUIRY_PAGECODE_DEVICE_IDENTIFICATION
SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS = _libiscsi.SCSI_INQUIRY_PAGECODE_BLOCK_LIMITS
SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS = _libiscsi.SCSI_INQUIRY_PAGECODE_BLOCK_DEVICE_CHARACTERISTICS
SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING = _libiscsi.SCSI_INQUIRY_PAGECODE_LOGICAL_BLOCK_PROVISIONING

def scsi_inquiry_pagecode_to_str(pagecode: 'int') -> "char const *":
    return _libiscsi.scsi_inquiry_pagecode_to_str(pagecode)
scsi_inquiry_pagecode_to_str = _libiscsi.scsi_inquiry_pagecode_to_str
class scsi_inquiry_supported_pages(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_supported_pages, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_supported_pages, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_supported_pages_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_supported_pages_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_supported_pages_qualifier_get, _libiscsi.scsi_inquiry_supported_pages_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_supported_pages_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_supported_pages_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_supported_pages_device_type_get, _libiscsi.scsi_inquiry_supported_pages_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_supported_pages_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_supported_pages_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_supported_pages_pagecode_get, _libiscsi.scsi_inquiry_supported_pages_pagecode_set)
    __swig_setmethods__["num_pages"] = _libiscsi.scsi_inquiry_supported_pages_num_pages_set
    __swig_getmethods__["num_pages"] = _libiscsi.scsi_inquiry_supported_pages_num_pages_get
    if _newclass:
        num_pages = _swig_property(_libiscsi.scsi_inquiry_supported_pages_num_pages_get, _libiscsi.scsi_inquiry_supported_pages_num_pages_set)
    __swig_setmethods__["pages"] = _libiscsi.scsi_inquiry_supported_pages_pages_set
    __swig_getmethods__["pages"] = _libiscsi.scsi_inquiry_supported_pages_pages_get
    if _newclass:
        pages = _swig_property(_libiscsi.scsi_inquiry_supported_pages_pages_get, _libiscsi.scsi_inquiry_supported_pages_pages_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_supported_pages()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_supported_pages
    __del__ = lambda self: None
scsi_inquiry_supported_pages_swigregister = _libiscsi.scsi_inquiry_supported_pages_swigregister
scsi_inquiry_supported_pages_swigregister(scsi_inquiry_supported_pages)

class scsi_inquiry_block_limits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_block_limits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_block_limits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_block_limits_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_block_limits_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_block_limits_qualifier_get, _libiscsi.scsi_inquiry_block_limits_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_block_limits_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_block_limits_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_block_limits_device_type_get, _libiscsi.scsi_inquiry_block_limits_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_block_limits_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_block_limits_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_block_limits_pagecode_get, _libiscsi.scsi_inquiry_block_limits_pagecode_set)
    __swig_setmethods__["wsnz"] = _libiscsi.scsi_inquiry_block_limits_wsnz_set
    __swig_getmethods__["wsnz"] = _libiscsi.scsi_inquiry_block_limits_wsnz_get
    if _newclass:
        wsnz = _swig_property(_libiscsi.scsi_inquiry_block_limits_wsnz_get, _libiscsi.scsi_inquiry_block_limits_wsnz_set)
    __swig_setmethods__["max_cmp"] = _libiscsi.scsi_inquiry_block_limits_max_cmp_set
    __swig_getmethods__["max_cmp"] = _libiscsi.scsi_inquiry_block_limits_max_cmp_get
    if _newclass:
        max_cmp = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_cmp_get, _libiscsi.scsi_inquiry_block_limits_max_cmp_set)
    __swig_setmethods__["opt_gran"] = _libiscsi.scsi_inquiry_block_limits_opt_gran_set
    __swig_getmethods__["opt_gran"] = _libiscsi.scsi_inquiry_block_limits_opt_gran_get
    if _newclass:
        opt_gran = _swig_property(_libiscsi.scsi_inquiry_block_limits_opt_gran_get, _libiscsi.scsi_inquiry_block_limits_opt_gran_set)
    __swig_setmethods__["max_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_max_xfer_len_set
    __swig_getmethods__["max_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_max_xfer_len_get
    if _newclass:
        max_xfer_len = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_xfer_len_get, _libiscsi.scsi_inquiry_block_limits_max_xfer_len_set)
    __swig_setmethods__["opt_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_opt_xfer_len_set
    __swig_getmethods__["opt_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_opt_xfer_len_get
    if _newclass:
        opt_xfer_len = _swig_property(_libiscsi.scsi_inquiry_block_limits_opt_xfer_len_get, _libiscsi.scsi_inquiry_block_limits_opt_xfer_len_set)
    __swig_setmethods__["max_prefetch"] = _libiscsi.scsi_inquiry_block_limits_max_prefetch_set
    __swig_getmethods__["max_prefetch"] = _libiscsi.scsi_inquiry_block_limits_max_prefetch_get
    if _newclass:
        max_prefetch = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_prefetch_get, _libiscsi.scsi_inquiry_block_limits_max_prefetch_set)
    __swig_setmethods__["max_unmap"] = _libiscsi.scsi_inquiry_block_limits_max_unmap_set
    __swig_getmethods__["max_unmap"] = _libiscsi.scsi_inquiry_block_limits_max_unmap_get
    if _newclass:
        max_unmap = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_unmap_get, _libiscsi.scsi_inquiry_block_limits_max_unmap_set)
    __swig_setmethods__["max_unmap_bdc"] = _libiscsi.scsi_inquiry_block_limits_max_unmap_bdc_set
    __swig_getmethods__["max_unmap_bdc"] = _libiscsi.scsi_inquiry_block_limits_max_unmap_bdc_get
    if _newclass:
        max_unmap_bdc = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_unmap_bdc_get, _libiscsi.scsi_inquiry_block_limits_max_unmap_bdc_set)
    __swig_setmethods__["opt_unmap_gran"] = _libiscsi.scsi_inquiry_block_limits_opt_unmap_gran_set
    __swig_getmethods__["opt_unmap_gran"] = _libiscsi.scsi_inquiry_block_limits_opt_unmap_gran_get
    if _newclass:
        opt_unmap_gran = _swig_property(_libiscsi.scsi_inquiry_block_limits_opt_unmap_gran_get, _libiscsi.scsi_inquiry_block_limits_opt_unmap_gran_set)
    __swig_setmethods__["ugavalid"] = _libiscsi.scsi_inquiry_block_limits_ugavalid_set
    __swig_getmethods__["ugavalid"] = _libiscsi.scsi_inquiry_block_limits_ugavalid_get
    if _newclass:
        ugavalid = _swig_property(_libiscsi.scsi_inquiry_block_limits_ugavalid_get, _libiscsi.scsi_inquiry_block_limits_ugavalid_set)
    __swig_setmethods__["unmap_gran_align"] = _libiscsi.scsi_inquiry_block_limits_unmap_gran_align_set
    __swig_getmethods__["unmap_gran_align"] = _libiscsi.scsi_inquiry_block_limits_unmap_gran_align_get
    if _newclass:
        unmap_gran_align = _swig_property(_libiscsi.scsi_inquiry_block_limits_unmap_gran_align_get, _libiscsi.scsi_inquiry_block_limits_unmap_gran_align_set)
    __swig_setmethods__["max_ws_len"] = _libiscsi.scsi_inquiry_block_limits_max_ws_len_set
    __swig_getmethods__["max_ws_len"] = _libiscsi.scsi_inquiry_block_limits_max_ws_len_get
    if _newclass:
        max_ws_len = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_ws_len_get, _libiscsi.scsi_inquiry_block_limits_max_ws_len_set)
    __swig_setmethods__["max_atomic_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_xfer_len_set
    __swig_getmethods__["max_atomic_xfer_len"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_xfer_len_get
    if _newclass:
        max_atomic_xfer_len = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_atomic_xfer_len_get, _libiscsi.scsi_inquiry_block_limits_max_atomic_xfer_len_set)
    __swig_setmethods__["atomic_align"] = _libiscsi.scsi_inquiry_block_limits_atomic_align_set
    __swig_getmethods__["atomic_align"] = _libiscsi.scsi_inquiry_block_limits_atomic_align_get
    if _newclass:
        atomic_align = _swig_property(_libiscsi.scsi_inquiry_block_limits_atomic_align_get, _libiscsi.scsi_inquiry_block_limits_atomic_align_set)
    __swig_setmethods__["atomic_gran"] = _libiscsi.scsi_inquiry_block_limits_atomic_gran_set
    __swig_getmethods__["atomic_gran"] = _libiscsi.scsi_inquiry_block_limits_atomic_gran_get
    if _newclass:
        atomic_gran = _swig_property(_libiscsi.scsi_inquiry_block_limits_atomic_gran_get, _libiscsi.scsi_inquiry_block_limits_atomic_gran_set)
    __swig_setmethods__["max_atomic_tl_with_atomic_boundary"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_tl_with_atomic_boundary_set
    __swig_getmethods__["max_atomic_tl_with_atomic_boundary"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_tl_with_atomic_boundary_get
    if _newclass:
        max_atomic_tl_with_atomic_boundary = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_atomic_tl_with_atomic_boundary_get, _libiscsi.scsi_inquiry_block_limits_max_atomic_tl_with_atomic_boundary_set)
    __swig_setmethods__["max_atomic_boundary_size"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_boundary_size_set
    __swig_getmethods__["max_atomic_boundary_size"] = _libiscsi.scsi_inquiry_block_limits_max_atomic_boundary_size_get
    if _newclass:
        max_atomic_boundary_size = _swig_property(_libiscsi.scsi_inquiry_block_limits_max_atomic_boundary_size_get, _libiscsi.scsi_inquiry_block_limits_max_atomic_boundary_size_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_block_limits()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_block_limits
    __del__ = lambda self: None
scsi_inquiry_block_limits_swigregister = _libiscsi.scsi_inquiry_block_limits_swigregister
scsi_inquiry_block_limits_swigregister(scsi_inquiry_block_limits)

class scsi_inquiry_block_device_characteristics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_block_device_characteristics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_block_device_characteristics, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_block_device_characteristics_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_block_device_characteristics_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_qualifier_get, _libiscsi.scsi_inquiry_block_device_characteristics_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_block_device_characteristics_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_block_device_characteristics_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_device_type_get, _libiscsi.scsi_inquiry_block_device_characteristics_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_block_device_characteristics_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_block_device_characteristics_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_pagecode_get, _libiscsi.scsi_inquiry_block_device_characteristics_pagecode_set)
    __swig_setmethods__["medium_rotation_rate"] = _libiscsi.scsi_inquiry_block_device_characteristics_medium_rotation_rate_set
    __swig_getmethods__["medium_rotation_rate"] = _libiscsi.scsi_inquiry_block_device_characteristics_medium_rotation_rate_get
    if _newclass:
        medium_rotation_rate = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_medium_rotation_rate_get, _libiscsi.scsi_inquiry_block_device_characteristics_medium_rotation_rate_set)
    __swig_setmethods__["product_type"] = _libiscsi.scsi_inquiry_block_device_characteristics_product_type_set
    __swig_getmethods__["product_type"] = _libiscsi.scsi_inquiry_block_device_characteristics_product_type_get
    if _newclass:
        product_type = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_product_type_get, _libiscsi.scsi_inquiry_block_device_characteristics_product_type_set)
    __swig_setmethods__["wabereq"] = _libiscsi.scsi_inquiry_block_device_characteristics_wabereq_set
    __swig_getmethods__["wabereq"] = _libiscsi.scsi_inquiry_block_device_characteristics_wabereq_get
    if _newclass:
        wabereq = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_wabereq_get, _libiscsi.scsi_inquiry_block_device_characteristics_wabereq_set)
    __swig_setmethods__["wacereq"] = _libiscsi.scsi_inquiry_block_device_characteristics_wacereq_set
    __swig_getmethods__["wacereq"] = _libiscsi.scsi_inquiry_block_device_characteristics_wacereq_get
    if _newclass:
        wacereq = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_wacereq_get, _libiscsi.scsi_inquiry_block_device_characteristics_wacereq_set)
    __swig_setmethods__["nominal_form_factor"] = _libiscsi.scsi_inquiry_block_device_characteristics_nominal_form_factor_set
    __swig_getmethods__["nominal_form_factor"] = _libiscsi.scsi_inquiry_block_device_characteristics_nominal_form_factor_get
    if _newclass:
        nominal_form_factor = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_nominal_form_factor_get, _libiscsi.scsi_inquiry_block_device_characteristics_nominal_form_factor_set)
    __swig_setmethods__["fuab"] = _libiscsi.scsi_inquiry_block_device_characteristics_fuab_set
    __swig_getmethods__["fuab"] = _libiscsi.scsi_inquiry_block_device_characteristics_fuab_get
    if _newclass:
        fuab = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_fuab_get, _libiscsi.scsi_inquiry_block_device_characteristics_fuab_set)
    __swig_setmethods__["vbuls"] = _libiscsi.scsi_inquiry_block_device_characteristics_vbuls_set
    __swig_getmethods__["vbuls"] = _libiscsi.scsi_inquiry_block_device_characteristics_vbuls_get
    if _newclass:
        vbuls = _swig_property(_libiscsi.scsi_inquiry_block_device_characteristics_vbuls_get, _libiscsi.scsi_inquiry_block_device_characteristics_vbuls_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_block_device_characteristics()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_block_device_characteristics
    __del__ = lambda self: None
scsi_inquiry_block_device_characteristics_swigregister = _libiscsi.scsi_inquiry_block_device_characteristics_swigregister
scsi_inquiry_block_device_characteristics_swigregister(scsi_inquiry_block_device_characteristics)

PROVISIONING_TYPE_NONE = _libiscsi.PROVISIONING_TYPE_NONE
PROVISIONING_TYPE_RESOURCE = _libiscsi.PROVISIONING_TYPE_RESOURCE
PROVISIONING_TYPE_THIN = _libiscsi.PROVISIONING_TYPE_THIN
class scsi_inquiry_logical_block_provisioning(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_logical_block_provisioning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_logical_block_provisioning, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_logical_block_provisioning_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_logical_block_provisioning_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_qualifier_get, _libiscsi.scsi_inquiry_logical_block_provisioning_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_logical_block_provisioning_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_logical_block_provisioning_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_device_type_get, _libiscsi.scsi_inquiry_logical_block_provisioning_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_logical_block_provisioning_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_logical_block_provisioning_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_pagecode_get, _libiscsi.scsi_inquiry_logical_block_provisioning_pagecode_set)
    __swig_setmethods__["threshold_exponent"] = _libiscsi.scsi_inquiry_logical_block_provisioning_threshold_exponent_set
    __swig_getmethods__["threshold_exponent"] = _libiscsi.scsi_inquiry_logical_block_provisioning_threshold_exponent_get
    if _newclass:
        threshold_exponent = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_threshold_exponent_get, _libiscsi.scsi_inquiry_logical_block_provisioning_threshold_exponent_set)
    __swig_setmethods__["lbpu"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpu_set
    __swig_getmethods__["lbpu"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpu_get
    if _newclass:
        lbpu = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_lbpu_get, _libiscsi.scsi_inquiry_logical_block_provisioning_lbpu_set)
    __swig_setmethods__["lbpws"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws_set
    __swig_getmethods__["lbpws"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws_get
    if _newclass:
        lbpws = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_lbpws_get, _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws_set)
    __swig_setmethods__["lbpws10"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws10_set
    __swig_getmethods__["lbpws10"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws10_get
    if _newclass:
        lbpws10 = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_lbpws10_get, _libiscsi.scsi_inquiry_logical_block_provisioning_lbpws10_set)
    __swig_setmethods__["lbprz"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbprz_set
    __swig_getmethods__["lbprz"] = _libiscsi.scsi_inquiry_logical_block_provisioning_lbprz_get
    if _newclass:
        lbprz = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_lbprz_get, _libiscsi.scsi_inquiry_logical_block_provisioning_lbprz_set)
    __swig_setmethods__["anc_sup"] = _libiscsi.scsi_inquiry_logical_block_provisioning_anc_sup_set
    __swig_getmethods__["anc_sup"] = _libiscsi.scsi_inquiry_logical_block_provisioning_anc_sup_get
    if _newclass:
        anc_sup = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_anc_sup_get, _libiscsi.scsi_inquiry_logical_block_provisioning_anc_sup_set)
    __swig_setmethods__["dp"] = _libiscsi.scsi_inquiry_logical_block_provisioning_dp_set
    __swig_getmethods__["dp"] = _libiscsi.scsi_inquiry_logical_block_provisioning_dp_get
    if _newclass:
        dp = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_dp_get, _libiscsi.scsi_inquiry_logical_block_provisioning_dp_set)
    __swig_setmethods__["provisioning_type"] = _libiscsi.scsi_inquiry_logical_block_provisioning_provisioning_type_set
    __swig_getmethods__["provisioning_type"] = _libiscsi.scsi_inquiry_logical_block_provisioning_provisioning_type_get
    if _newclass:
        provisioning_type = _swig_property(_libiscsi.scsi_inquiry_logical_block_provisioning_provisioning_type_get, _libiscsi.scsi_inquiry_logical_block_provisioning_provisioning_type_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_logical_block_provisioning()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_logical_block_provisioning
    __del__ = lambda self: None
scsi_inquiry_logical_block_provisioning_swigregister = _libiscsi.scsi_inquiry_logical_block_provisioning_swigregister
scsi_inquiry_logical_block_provisioning_swigregister(scsi_inquiry_logical_block_provisioning)


def scsi_cdb_inquiry(evpd: 'int', page_code: 'int', alloc_len: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_inquiry(evpd, page_code, alloc_len)
scsi_cdb_inquiry = _libiscsi.scsi_cdb_inquiry
class scsi_inquiry_unit_serial_number(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_unit_serial_number, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_unit_serial_number, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_unit_serial_number_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_unit_serial_number_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_unit_serial_number_qualifier_get, _libiscsi.scsi_inquiry_unit_serial_number_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_unit_serial_number_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_unit_serial_number_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_unit_serial_number_device_type_get, _libiscsi.scsi_inquiry_unit_serial_number_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_unit_serial_number_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_unit_serial_number_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_unit_serial_number_pagecode_get, _libiscsi.scsi_inquiry_unit_serial_number_pagecode_set)
    __swig_setmethods__["usn"] = _libiscsi.scsi_inquiry_unit_serial_number_usn_set
    __swig_getmethods__["usn"] = _libiscsi.scsi_inquiry_unit_serial_number_usn_get
    if _newclass:
        usn = _swig_property(_libiscsi.scsi_inquiry_unit_serial_number_usn_get, _libiscsi.scsi_inquiry_unit_serial_number_usn_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_unit_serial_number()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_unit_serial_number
    __del__ = lambda self: None
scsi_inquiry_unit_serial_number_swigregister = _libiscsi.scsi_inquiry_unit_serial_number_swigregister
scsi_inquiry_unit_serial_number_swigregister(scsi_inquiry_unit_serial_number)

SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_FIBRE_CHANNEL
SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_PARALLEL_SCSI
SCSI_PROTOCOL_IDENTIFIER_SSA = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_SSA
SCSI_PROTOCOL_IDENTIFIER_IEEE_1394 = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_IEEE_1394
SCSI_PROTOCOL_IDENTIFIER_RDMA = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_RDMA
SCSI_PROTOCOL_IDENTIFIER_ISCSI = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_ISCSI
SCSI_PROTOCOL_IDENTIFIER_SAS = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_SAS
SCSI_PROTOCOL_IDENTIFIER_ADT = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_ADT
SCSI_PROTOCOL_IDENTIFIER_ATA = _libiscsi.SCSI_PROTOCOL_IDENTIFIER_ATA

def scsi_protocol_identifier_to_str(identifier: 'int') -> "char const *":
    return _libiscsi.scsi_protocol_identifier_to_str(identifier)
scsi_protocol_identifier_to_str = _libiscsi.scsi_protocol_identifier_to_str
SCSI_CODESET_BINARY = _libiscsi.SCSI_CODESET_BINARY
SCSI_CODESET_ASCII = _libiscsi.SCSI_CODESET_ASCII
SCSI_CODESET_UTF8 = _libiscsi.SCSI_CODESET_UTF8

def scsi_codeset_to_str(codeset: 'int') -> "char const *":
    return _libiscsi.scsi_codeset_to_str(codeset)
scsi_codeset_to_str = _libiscsi.scsi_codeset_to_str
SCSI_ASSOCIATION_LOGICAL_UNIT = _libiscsi.SCSI_ASSOCIATION_LOGICAL_UNIT
SCSI_ASSOCIATION_TARGET_PORT = _libiscsi.SCSI_ASSOCIATION_TARGET_PORT
SCSI_ASSOCIATION_TARGET_DEVICE = _libiscsi.SCSI_ASSOCIATION_TARGET_DEVICE

def scsi_association_to_str(association: 'int') -> "char const *":
    return _libiscsi.scsi_association_to_str(association)
scsi_association_to_str = _libiscsi.scsi_association_to_str
SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC = _libiscsi.SCSI_DESIGNATOR_TYPE_VENDOR_SPECIFIC
SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID = _libiscsi.SCSI_DESIGNATOR_TYPE_T10_VENDORT_ID
SCSI_DESIGNATOR_TYPE_EUI_64 = _libiscsi.SCSI_DESIGNATOR_TYPE_EUI_64
SCSI_DESIGNATOR_TYPE_NAA = _libiscsi.SCSI_DESIGNATOR_TYPE_NAA
SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT = _libiscsi.SCSI_DESIGNATOR_TYPE_RELATIVE_TARGET_PORT
SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP = _libiscsi.SCSI_DESIGNATOR_TYPE_TARGET_PORT_GROUP
SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP = _libiscsi.SCSI_DESIGNATOR_TYPE_LOGICAL_UNIT_GROUP
SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER = _libiscsi.SCSI_DESIGNATOR_TYPE_MD5_LOGICAL_UNIT_IDENTIFIER
SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING = _libiscsi.SCSI_DESIGNATOR_TYPE_SCSI_NAME_STRING

def scsi_designator_type_to_str(association: 'int') -> "char const *":
    return _libiscsi.scsi_designator_type_to_str(association)
scsi_designator_type_to_str = _libiscsi.scsi_designator_type_to_str
class scsi_inquiry_device_designator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_device_designator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_device_designator, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.scsi_inquiry_device_designator_next_set
    __swig_getmethods__["next"] = _libiscsi.scsi_inquiry_device_designator_next_get
    if _newclass:
        next = _swig_property(_libiscsi.scsi_inquiry_device_designator_next_get, _libiscsi.scsi_inquiry_device_designator_next_set)
    __swig_setmethods__["protocol_identifier"] = _libiscsi.scsi_inquiry_device_designator_protocol_identifier_set
    __swig_getmethods__["protocol_identifier"] = _libiscsi.scsi_inquiry_device_designator_protocol_identifier_get
    if _newclass:
        protocol_identifier = _swig_property(_libiscsi.scsi_inquiry_device_designator_protocol_identifier_get, _libiscsi.scsi_inquiry_device_designator_protocol_identifier_set)
    __swig_setmethods__["code_set"] = _libiscsi.scsi_inquiry_device_designator_code_set_set
    __swig_getmethods__["code_set"] = _libiscsi.scsi_inquiry_device_designator_code_set_get
    if _newclass:
        code_set = _swig_property(_libiscsi.scsi_inquiry_device_designator_code_set_get, _libiscsi.scsi_inquiry_device_designator_code_set_set)
    __swig_setmethods__["piv"] = _libiscsi.scsi_inquiry_device_designator_piv_set
    __swig_getmethods__["piv"] = _libiscsi.scsi_inquiry_device_designator_piv_get
    if _newclass:
        piv = _swig_property(_libiscsi.scsi_inquiry_device_designator_piv_get, _libiscsi.scsi_inquiry_device_designator_piv_set)
    __swig_setmethods__["association"] = _libiscsi.scsi_inquiry_device_designator_association_set
    __swig_getmethods__["association"] = _libiscsi.scsi_inquiry_device_designator_association_get
    if _newclass:
        association = _swig_property(_libiscsi.scsi_inquiry_device_designator_association_get, _libiscsi.scsi_inquiry_device_designator_association_set)
    __swig_setmethods__["designator_type"] = _libiscsi.scsi_inquiry_device_designator_designator_type_set
    __swig_getmethods__["designator_type"] = _libiscsi.scsi_inquiry_device_designator_designator_type_get
    if _newclass:
        designator_type = _swig_property(_libiscsi.scsi_inquiry_device_designator_designator_type_get, _libiscsi.scsi_inquiry_device_designator_designator_type_set)
    __swig_setmethods__["designator_length"] = _libiscsi.scsi_inquiry_device_designator_designator_length_set
    __swig_getmethods__["designator_length"] = _libiscsi.scsi_inquiry_device_designator_designator_length_get
    if _newclass:
        designator_length = _swig_property(_libiscsi.scsi_inquiry_device_designator_designator_length_get, _libiscsi.scsi_inquiry_device_designator_designator_length_set)
    __swig_setmethods__["designator"] = _libiscsi.scsi_inquiry_device_designator_designator_set
    __swig_getmethods__["designator"] = _libiscsi.scsi_inquiry_device_designator_designator_get
    if _newclass:
        designator = _swig_property(_libiscsi.scsi_inquiry_device_designator_designator_get, _libiscsi.scsi_inquiry_device_designator_designator_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_device_designator()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_device_designator
    __del__ = lambda self: None
scsi_inquiry_device_designator_swigregister = _libiscsi.scsi_inquiry_device_designator_swigregister
scsi_inquiry_device_designator_swigregister(scsi_inquiry_device_designator)

class scsi_inquiry_device_identification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_inquiry_device_identification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_inquiry_device_identification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["qualifier"] = _libiscsi.scsi_inquiry_device_identification_qualifier_set
    __swig_getmethods__["qualifier"] = _libiscsi.scsi_inquiry_device_identification_qualifier_get
    if _newclass:
        qualifier = _swig_property(_libiscsi.scsi_inquiry_device_identification_qualifier_get, _libiscsi.scsi_inquiry_device_identification_qualifier_set)
    __swig_setmethods__["device_type"] = _libiscsi.scsi_inquiry_device_identification_device_type_set
    __swig_getmethods__["device_type"] = _libiscsi.scsi_inquiry_device_identification_device_type_get
    if _newclass:
        device_type = _swig_property(_libiscsi.scsi_inquiry_device_identification_device_type_get, _libiscsi.scsi_inquiry_device_identification_device_type_set)
    __swig_setmethods__["pagecode"] = _libiscsi.scsi_inquiry_device_identification_pagecode_set
    __swig_getmethods__["pagecode"] = _libiscsi.scsi_inquiry_device_identification_pagecode_get
    if _newclass:
        pagecode = _swig_property(_libiscsi.scsi_inquiry_device_identification_pagecode_get, _libiscsi.scsi_inquiry_device_identification_pagecode_set)
    __swig_setmethods__["designators"] = _libiscsi.scsi_inquiry_device_identification_designators_set
    __swig_getmethods__["designators"] = _libiscsi.scsi_inquiry_device_identification_designators_get
    if _newclass:
        designators = _swig_property(_libiscsi.scsi_inquiry_device_identification_designators_get, _libiscsi.scsi_inquiry_device_identification_designators_set)

    def __init__(self):
        this = _libiscsi.new_scsi_inquiry_device_identification()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_inquiry_device_identification
    __del__ = lambda self: None
scsi_inquiry_device_identification_swigregister = _libiscsi.scsi_inquiry_device_identification_swigregister
scsi_inquiry_device_identification_swigregister(scsi_inquiry_device_identification)

SCSI_MODESENSE_PC_CURRENT = _libiscsi.SCSI_MODESENSE_PC_CURRENT
SCSI_MODESENSE_PC_CHANGEABLE = _libiscsi.SCSI_MODESENSE_PC_CHANGEABLE
SCSI_MODESENSE_PC_DEFAULT = _libiscsi.SCSI_MODESENSE_PC_DEFAULT
SCSI_MODESENSE_PC_SAVED = _libiscsi.SCSI_MODESENSE_PC_SAVED
class scsi_mode_page_caching(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page_caching, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page_caching, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ic"] = _libiscsi.scsi_mode_page_caching_ic_set
    __swig_getmethods__["ic"] = _libiscsi.scsi_mode_page_caching_ic_get
    if _newclass:
        ic = _swig_property(_libiscsi.scsi_mode_page_caching_ic_get, _libiscsi.scsi_mode_page_caching_ic_set)
    __swig_setmethods__["abpf"] = _libiscsi.scsi_mode_page_caching_abpf_set
    __swig_getmethods__["abpf"] = _libiscsi.scsi_mode_page_caching_abpf_get
    if _newclass:
        abpf = _swig_property(_libiscsi.scsi_mode_page_caching_abpf_get, _libiscsi.scsi_mode_page_caching_abpf_set)
    __swig_setmethods__["cap"] = _libiscsi.scsi_mode_page_caching_cap_set
    __swig_getmethods__["cap"] = _libiscsi.scsi_mode_page_caching_cap_get
    if _newclass:
        cap = _swig_property(_libiscsi.scsi_mode_page_caching_cap_get, _libiscsi.scsi_mode_page_caching_cap_set)
    __swig_setmethods__["disc"] = _libiscsi.scsi_mode_page_caching_disc_set
    __swig_getmethods__["disc"] = _libiscsi.scsi_mode_page_caching_disc_get
    if _newclass:
        disc = _swig_property(_libiscsi.scsi_mode_page_caching_disc_get, _libiscsi.scsi_mode_page_caching_disc_set)
    __swig_setmethods__["size"] = _libiscsi.scsi_mode_page_caching_size_set
    __swig_getmethods__["size"] = _libiscsi.scsi_mode_page_caching_size_get
    if _newclass:
        size = _swig_property(_libiscsi.scsi_mode_page_caching_size_get, _libiscsi.scsi_mode_page_caching_size_set)
    __swig_setmethods__["wce"] = _libiscsi.scsi_mode_page_caching_wce_set
    __swig_getmethods__["wce"] = _libiscsi.scsi_mode_page_caching_wce_get
    if _newclass:
        wce = _swig_property(_libiscsi.scsi_mode_page_caching_wce_get, _libiscsi.scsi_mode_page_caching_wce_set)
    __swig_setmethods__["mf"] = _libiscsi.scsi_mode_page_caching_mf_set
    __swig_getmethods__["mf"] = _libiscsi.scsi_mode_page_caching_mf_get
    if _newclass:
        mf = _swig_property(_libiscsi.scsi_mode_page_caching_mf_get, _libiscsi.scsi_mode_page_caching_mf_set)
    __swig_setmethods__["rcd"] = _libiscsi.scsi_mode_page_caching_rcd_set
    __swig_getmethods__["rcd"] = _libiscsi.scsi_mode_page_caching_rcd_get
    if _newclass:
        rcd = _swig_property(_libiscsi.scsi_mode_page_caching_rcd_get, _libiscsi.scsi_mode_page_caching_rcd_set)
    __swig_setmethods__["demand_read_retention_priority"] = _libiscsi.scsi_mode_page_caching_demand_read_retention_priority_set
    __swig_getmethods__["demand_read_retention_priority"] = _libiscsi.scsi_mode_page_caching_demand_read_retention_priority_get
    if _newclass:
        demand_read_retention_priority = _swig_property(_libiscsi.scsi_mode_page_caching_demand_read_retention_priority_get, _libiscsi.scsi_mode_page_caching_demand_read_retention_priority_set)
    __swig_setmethods__["write_retention_priority"] = _libiscsi.scsi_mode_page_caching_write_retention_priority_set
    __swig_getmethods__["write_retention_priority"] = _libiscsi.scsi_mode_page_caching_write_retention_priority_get
    if _newclass:
        write_retention_priority = _swig_property(_libiscsi.scsi_mode_page_caching_write_retention_priority_get, _libiscsi.scsi_mode_page_caching_write_retention_priority_set)
    __swig_setmethods__["disable_prefetch_transfer_length"] = _libiscsi.scsi_mode_page_caching_disable_prefetch_transfer_length_set
    __swig_getmethods__["disable_prefetch_transfer_length"] = _libiscsi.scsi_mode_page_caching_disable_prefetch_transfer_length_get
    if _newclass:
        disable_prefetch_transfer_length = _swig_property(_libiscsi.scsi_mode_page_caching_disable_prefetch_transfer_length_get, _libiscsi.scsi_mode_page_caching_disable_prefetch_transfer_length_set)
    __swig_setmethods__["minimum_prefetch"] = _libiscsi.scsi_mode_page_caching_minimum_prefetch_set
    __swig_getmethods__["minimum_prefetch"] = _libiscsi.scsi_mode_page_caching_minimum_prefetch_get
    if _newclass:
        minimum_prefetch = _swig_property(_libiscsi.scsi_mode_page_caching_minimum_prefetch_get, _libiscsi.scsi_mode_page_caching_minimum_prefetch_set)
    __swig_setmethods__["maximum_prefetch"] = _libiscsi.scsi_mode_page_caching_maximum_prefetch_set
    __swig_getmethods__["maximum_prefetch"] = _libiscsi.scsi_mode_page_caching_maximum_prefetch_get
    if _newclass:
        maximum_prefetch = _swig_property(_libiscsi.scsi_mode_page_caching_maximum_prefetch_get, _libiscsi.scsi_mode_page_caching_maximum_prefetch_set)
    __swig_setmethods__["maximum_prefetch_ceiling"] = _libiscsi.scsi_mode_page_caching_maximum_prefetch_ceiling_set
    __swig_getmethods__["maximum_prefetch_ceiling"] = _libiscsi.scsi_mode_page_caching_maximum_prefetch_ceiling_get
    if _newclass:
        maximum_prefetch_ceiling = _swig_property(_libiscsi.scsi_mode_page_caching_maximum_prefetch_ceiling_get, _libiscsi.scsi_mode_page_caching_maximum_prefetch_ceiling_set)
    __swig_setmethods__["fsw"] = _libiscsi.scsi_mode_page_caching_fsw_set
    __swig_getmethods__["fsw"] = _libiscsi.scsi_mode_page_caching_fsw_get
    if _newclass:
        fsw = _swig_property(_libiscsi.scsi_mode_page_caching_fsw_get, _libiscsi.scsi_mode_page_caching_fsw_set)
    __swig_setmethods__["lbcss"] = _libiscsi.scsi_mode_page_caching_lbcss_set
    __swig_getmethods__["lbcss"] = _libiscsi.scsi_mode_page_caching_lbcss_get
    if _newclass:
        lbcss = _swig_property(_libiscsi.scsi_mode_page_caching_lbcss_get, _libiscsi.scsi_mode_page_caching_lbcss_set)
    __swig_setmethods__["dra"] = _libiscsi.scsi_mode_page_caching_dra_set
    __swig_getmethods__["dra"] = _libiscsi.scsi_mode_page_caching_dra_get
    if _newclass:
        dra = _swig_property(_libiscsi.scsi_mode_page_caching_dra_get, _libiscsi.scsi_mode_page_caching_dra_set)
    __swig_setmethods__["nv_dis"] = _libiscsi.scsi_mode_page_caching_nv_dis_set
    __swig_getmethods__["nv_dis"] = _libiscsi.scsi_mode_page_caching_nv_dis_get
    if _newclass:
        nv_dis = _swig_property(_libiscsi.scsi_mode_page_caching_nv_dis_get, _libiscsi.scsi_mode_page_caching_nv_dis_set)
    __swig_setmethods__["number_of_cache_segments"] = _libiscsi.scsi_mode_page_caching_number_of_cache_segments_set
    __swig_getmethods__["number_of_cache_segments"] = _libiscsi.scsi_mode_page_caching_number_of_cache_segments_get
    if _newclass:
        number_of_cache_segments = _swig_property(_libiscsi.scsi_mode_page_caching_number_of_cache_segments_get, _libiscsi.scsi_mode_page_caching_number_of_cache_segments_set)
    __swig_setmethods__["cache_segment_size"] = _libiscsi.scsi_mode_page_caching_cache_segment_size_set
    __swig_getmethods__["cache_segment_size"] = _libiscsi.scsi_mode_page_caching_cache_segment_size_get
    if _newclass:
        cache_segment_size = _swig_property(_libiscsi.scsi_mode_page_caching_cache_segment_size_get, _libiscsi.scsi_mode_page_caching_cache_segment_size_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page_caching()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page_caching
    __del__ = lambda self: None
scsi_mode_page_caching_swigregister = _libiscsi.scsi_mode_page_caching_swigregister
scsi_mode_page_caching_swigregister(scsi_mode_page_caching)

class scsi_mode_page_power_condition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page_power_condition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page_power_condition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pm_bg_precedence"] = _libiscsi.scsi_mode_page_power_condition_pm_bg_precedence_set
    __swig_getmethods__["pm_bg_precedence"] = _libiscsi.scsi_mode_page_power_condition_pm_bg_precedence_get
    if _newclass:
        pm_bg_precedence = _swig_property(_libiscsi.scsi_mode_page_power_condition_pm_bg_precedence_get, _libiscsi.scsi_mode_page_power_condition_pm_bg_precedence_set)
    __swig_setmethods__["standby_y"] = _libiscsi.scsi_mode_page_power_condition_standby_y_set
    __swig_getmethods__["standby_y"] = _libiscsi.scsi_mode_page_power_condition_standby_y_get
    if _newclass:
        standby_y = _swig_property(_libiscsi.scsi_mode_page_power_condition_standby_y_get, _libiscsi.scsi_mode_page_power_condition_standby_y_set)
    __swig_setmethods__["idle_c"] = _libiscsi.scsi_mode_page_power_condition_idle_c_set
    __swig_getmethods__["idle_c"] = _libiscsi.scsi_mode_page_power_condition_idle_c_get
    if _newclass:
        idle_c = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_c_get, _libiscsi.scsi_mode_page_power_condition_idle_c_set)
    __swig_setmethods__["idle_b"] = _libiscsi.scsi_mode_page_power_condition_idle_b_set
    __swig_getmethods__["idle_b"] = _libiscsi.scsi_mode_page_power_condition_idle_b_get
    if _newclass:
        idle_b = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_b_get, _libiscsi.scsi_mode_page_power_condition_idle_b_set)
    __swig_setmethods__["idle_a"] = _libiscsi.scsi_mode_page_power_condition_idle_a_set
    __swig_getmethods__["idle_a"] = _libiscsi.scsi_mode_page_power_condition_idle_a_get
    if _newclass:
        idle_a = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_a_get, _libiscsi.scsi_mode_page_power_condition_idle_a_set)
    __swig_setmethods__["standby_z"] = _libiscsi.scsi_mode_page_power_condition_standby_z_set
    __swig_getmethods__["standby_z"] = _libiscsi.scsi_mode_page_power_condition_standby_z_get
    if _newclass:
        standby_z = _swig_property(_libiscsi.scsi_mode_page_power_condition_standby_z_get, _libiscsi.scsi_mode_page_power_condition_standby_z_set)
    __swig_setmethods__["idle_a_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_a_condition_timer_set
    __swig_getmethods__["idle_a_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_a_condition_timer_get
    if _newclass:
        idle_a_condition_timer = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_a_condition_timer_get, _libiscsi.scsi_mode_page_power_condition_idle_a_condition_timer_set)
    __swig_setmethods__["standby_z_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_standby_z_condition_timer_set
    __swig_getmethods__["standby_z_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_standby_z_condition_timer_get
    if _newclass:
        standby_z_condition_timer = _swig_property(_libiscsi.scsi_mode_page_power_condition_standby_z_condition_timer_get, _libiscsi.scsi_mode_page_power_condition_standby_z_condition_timer_set)
    __swig_setmethods__["idle_b_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_b_condition_timer_set
    __swig_getmethods__["idle_b_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_b_condition_timer_get
    if _newclass:
        idle_b_condition_timer = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_b_condition_timer_get, _libiscsi.scsi_mode_page_power_condition_idle_b_condition_timer_set)
    __swig_setmethods__["idle_c_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_c_condition_timer_set
    __swig_getmethods__["idle_c_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_idle_c_condition_timer_get
    if _newclass:
        idle_c_condition_timer = _swig_property(_libiscsi.scsi_mode_page_power_condition_idle_c_condition_timer_get, _libiscsi.scsi_mode_page_power_condition_idle_c_condition_timer_set)
    __swig_setmethods__["standby_y_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_standby_y_condition_timer_set
    __swig_getmethods__["standby_y_condition_timer"] = _libiscsi.scsi_mode_page_power_condition_standby_y_condition_timer_get
    if _newclass:
        standby_y_condition_timer = _swig_property(_libiscsi.scsi_mode_page_power_condition_standby_y_condition_timer_get, _libiscsi.scsi_mode_page_power_condition_standby_y_condition_timer_set)
    __swig_setmethods__["ccf_idle"] = _libiscsi.scsi_mode_page_power_condition_ccf_idle_set
    __swig_getmethods__["ccf_idle"] = _libiscsi.scsi_mode_page_power_condition_ccf_idle_get
    if _newclass:
        ccf_idle = _swig_property(_libiscsi.scsi_mode_page_power_condition_ccf_idle_get, _libiscsi.scsi_mode_page_power_condition_ccf_idle_set)
    __swig_setmethods__["ccf_standby"] = _libiscsi.scsi_mode_page_power_condition_ccf_standby_set
    __swig_getmethods__["ccf_standby"] = _libiscsi.scsi_mode_page_power_condition_ccf_standby_get
    if _newclass:
        ccf_standby = _swig_property(_libiscsi.scsi_mode_page_power_condition_ccf_standby_get, _libiscsi.scsi_mode_page_power_condition_ccf_standby_set)
    __swig_setmethods__["ccf_stopped"] = _libiscsi.scsi_mode_page_power_condition_ccf_stopped_set
    __swig_getmethods__["ccf_stopped"] = _libiscsi.scsi_mode_page_power_condition_ccf_stopped_get
    if _newclass:
        ccf_stopped = _swig_property(_libiscsi.scsi_mode_page_power_condition_ccf_stopped_get, _libiscsi.scsi_mode_page_power_condition_ccf_stopped_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page_power_condition()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page_power_condition
    __del__ = lambda self: None
scsi_mode_page_power_condition_swigregister = _libiscsi.scsi_mode_page_power_condition_swigregister
scsi_mode_page_power_condition_swigregister(scsi_mode_page_power_condition)

class scsi_mode_page_control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page_control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page_control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["tst"] = _libiscsi.scsi_mode_page_control_tst_set
    __swig_getmethods__["tst"] = _libiscsi.scsi_mode_page_control_tst_get
    if _newclass:
        tst = _swig_property(_libiscsi.scsi_mode_page_control_tst_get, _libiscsi.scsi_mode_page_control_tst_set)
    __swig_setmethods__["tmf_only"] = _libiscsi.scsi_mode_page_control_tmf_only_set
    __swig_getmethods__["tmf_only"] = _libiscsi.scsi_mode_page_control_tmf_only_get
    if _newclass:
        tmf_only = _swig_property(_libiscsi.scsi_mode_page_control_tmf_only_get, _libiscsi.scsi_mode_page_control_tmf_only_set)
    __swig_setmethods__["dpicz"] = _libiscsi.scsi_mode_page_control_dpicz_set
    __swig_getmethods__["dpicz"] = _libiscsi.scsi_mode_page_control_dpicz_get
    if _newclass:
        dpicz = _swig_property(_libiscsi.scsi_mode_page_control_dpicz_get, _libiscsi.scsi_mode_page_control_dpicz_set)
    __swig_setmethods__["d_sense"] = _libiscsi.scsi_mode_page_control_d_sense_set
    __swig_getmethods__["d_sense"] = _libiscsi.scsi_mode_page_control_d_sense_get
    if _newclass:
        d_sense = _swig_property(_libiscsi.scsi_mode_page_control_d_sense_get, _libiscsi.scsi_mode_page_control_d_sense_set)
    __swig_setmethods__["gltsd"] = _libiscsi.scsi_mode_page_control_gltsd_set
    __swig_getmethods__["gltsd"] = _libiscsi.scsi_mode_page_control_gltsd_get
    if _newclass:
        gltsd = _swig_property(_libiscsi.scsi_mode_page_control_gltsd_get, _libiscsi.scsi_mode_page_control_gltsd_set)
    __swig_setmethods__["rlec"] = _libiscsi.scsi_mode_page_control_rlec_set
    __swig_getmethods__["rlec"] = _libiscsi.scsi_mode_page_control_rlec_get
    if _newclass:
        rlec = _swig_property(_libiscsi.scsi_mode_page_control_rlec_get, _libiscsi.scsi_mode_page_control_rlec_set)
    __swig_setmethods__["queue_algorithm_modifier"] = _libiscsi.scsi_mode_page_control_queue_algorithm_modifier_set
    __swig_getmethods__["queue_algorithm_modifier"] = _libiscsi.scsi_mode_page_control_queue_algorithm_modifier_get
    if _newclass:
        queue_algorithm_modifier = _swig_property(_libiscsi.scsi_mode_page_control_queue_algorithm_modifier_get, _libiscsi.scsi_mode_page_control_queue_algorithm_modifier_set)
    __swig_setmethods__["nuar"] = _libiscsi.scsi_mode_page_control_nuar_set
    __swig_getmethods__["nuar"] = _libiscsi.scsi_mode_page_control_nuar_get
    if _newclass:
        nuar = _swig_property(_libiscsi.scsi_mode_page_control_nuar_get, _libiscsi.scsi_mode_page_control_nuar_set)
    __swig_setmethods__["qerr"] = _libiscsi.scsi_mode_page_control_qerr_set
    __swig_getmethods__["qerr"] = _libiscsi.scsi_mode_page_control_qerr_get
    if _newclass:
        qerr = _swig_property(_libiscsi.scsi_mode_page_control_qerr_get, _libiscsi.scsi_mode_page_control_qerr_set)
    __swig_setmethods__["vs"] = _libiscsi.scsi_mode_page_control_vs_set
    __swig_getmethods__["vs"] = _libiscsi.scsi_mode_page_control_vs_get
    if _newclass:
        vs = _swig_property(_libiscsi.scsi_mode_page_control_vs_get, _libiscsi.scsi_mode_page_control_vs_set)
    __swig_setmethods__["rac"] = _libiscsi.scsi_mode_page_control_rac_set
    __swig_getmethods__["rac"] = _libiscsi.scsi_mode_page_control_rac_get
    if _newclass:
        rac = _swig_property(_libiscsi.scsi_mode_page_control_rac_get, _libiscsi.scsi_mode_page_control_rac_set)
    __swig_setmethods__["ua_intlck_ctrl"] = _libiscsi.scsi_mode_page_control_ua_intlck_ctrl_set
    __swig_getmethods__["ua_intlck_ctrl"] = _libiscsi.scsi_mode_page_control_ua_intlck_ctrl_get
    if _newclass:
        ua_intlck_ctrl = _swig_property(_libiscsi.scsi_mode_page_control_ua_intlck_ctrl_get, _libiscsi.scsi_mode_page_control_ua_intlck_ctrl_set)
    __swig_setmethods__["swp"] = _libiscsi.scsi_mode_page_control_swp_set
    __swig_getmethods__["swp"] = _libiscsi.scsi_mode_page_control_swp_get
    if _newclass:
        swp = _swig_property(_libiscsi.scsi_mode_page_control_swp_get, _libiscsi.scsi_mode_page_control_swp_set)
    __swig_setmethods__["ato"] = _libiscsi.scsi_mode_page_control_ato_set
    __swig_getmethods__["ato"] = _libiscsi.scsi_mode_page_control_ato_get
    if _newclass:
        ato = _swig_property(_libiscsi.scsi_mode_page_control_ato_get, _libiscsi.scsi_mode_page_control_ato_set)
    __swig_setmethods__["tas"] = _libiscsi.scsi_mode_page_control_tas_set
    __swig_getmethods__["tas"] = _libiscsi.scsi_mode_page_control_tas_get
    if _newclass:
        tas = _swig_property(_libiscsi.scsi_mode_page_control_tas_get, _libiscsi.scsi_mode_page_control_tas_set)
    __swig_setmethods__["atmpe"] = _libiscsi.scsi_mode_page_control_atmpe_set
    __swig_getmethods__["atmpe"] = _libiscsi.scsi_mode_page_control_atmpe_get
    if _newclass:
        atmpe = _swig_property(_libiscsi.scsi_mode_page_control_atmpe_get, _libiscsi.scsi_mode_page_control_atmpe_set)
    __swig_setmethods__["rwwp"] = _libiscsi.scsi_mode_page_control_rwwp_set
    __swig_getmethods__["rwwp"] = _libiscsi.scsi_mode_page_control_rwwp_get
    if _newclass:
        rwwp = _swig_property(_libiscsi.scsi_mode_page_control_rwwp_get, _libiscsi.scsi_mode_page_control_rwwp_set)
    __swig_setmethods__["autoload_mode"] = _libiscsi.scsi_mode_page_control_autoload_mode_set
    __swig_getmethods__["autoload_mode"] = _libiscsi.scsi_mode_page_control_autoload_mode_get
    if _newclass:
        autoload_mode = _swig_property(_libiscsi.scsi_mode_page_control_autoload_mode_get, _libiscsi.scsi_mode_page_control_autoload_mode_set)
    __swig_setmethods__["busy_timeout_period"] = _libiscsi.scsi_mode_page_control_busy_timeout_period_set
    __swig_getmethods__["busy_timeout_period"] = _libiscsi.scsi_mode_page_control_busy_timeout_period_get
    if _newclass:
        busy_timeout_period = _swig_property(_libiscsi.scsi_mode_page_control_busy_timeout_period_get, _libiscsi.scsi_mode_page_control_busy_timeout_period_set)
    __swig_setmethods__["extended_selftest_completion_time"] = _libiscsi.scsi_mode_page_control_extended_selftest_completion_time_set
    __swig_getmethods__["extended_selftest_completion_time"] = _libiscsi.scsi_mode_page_control_extended_selftest_completion_time_get
    if _newclass:
        extended_selftest_completion_time = _swig_property(_libiscsi.scsi_mode_page_control_extended_selftest_completion_time_get, _libiscsi.scsi_mode_page_control_extended_selftest_completion_time_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page_control()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page_control
    __del__ = lambda self: None
scsi_mode_page_control_swigregister = _libiscsi.scsi_mode_page_control_swigregister
scsi_mode_page_control_swigregister(scsi_mode_page_control)

class scsi_mode_page_disconnect_reconnect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page_disconnect_reconnect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page_disconnect_reconnect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buffer_full_ratio"] = _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_full_ratio_set
    __swig_getmethods__["buffer_full_ratio"] = _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_full_ratio_get
    if _newclass:
        buffer_full_ratio = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_buffer_full_ratio_get, _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_full_ratio_set)
    __swig_setmethods__["buffer_empty_ratio"] = _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_empty_ratio_set
    __swig_getmethods__["buffer_empty_ratio"] = _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_empty_ratio_get
    if _newclass:
        buffer_empty_ratio = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_buffer_empty_ratio_get, _libiscsi.scsi_mode_page_disconnect_reconnect_buffer_empty_ratio_set)
    __swig_setmethods__["bus_inactivity_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_bus_inactivity_limit_set
    __swig_getmethods__["bus_inactivity_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_bus_inactivity_limit_get
    if _newclass:
        bus_inactivity_limit = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_bus_inactivity_limit_get, _libiscsi.scsi_mode_page_disconnect_reconnect_bus_inactivity_limit_set)
    __swig_setmethods__["disconnect_time_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_disconnect_time_limit_set
    __swig_getmethods__["disconnect_time_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_disconnect_time_limit_get
    if _newclass:
        disconnect_time_limit = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_disconnect_time_limit_get, _libiscsi.scsi_mode_page_disconnect_reconnect_disconnect_time_limit_set)
    __swig_setmethods__["connect_time_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_connect_time_limit_set
    __swig_getmethods__["connect_time_limit"] = _libiscsi.scsi_mode_page_disconnect_reconnect_connect_time_limit_get
    if _newclass:
        connect_time_limit = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_connect_time_limit_get, _libiscsi.scsi_mode_page_disconnect_reconnect_connect_time_limit_set)
    __swig_setmethods__["maximum_burst_size"] = _libiscsi.scsi_mode_page_disconnect_reconnect_maximum_burst_size_set
    __swig_getmethods__["maximum_burst_size"] = _libiscsi.scsi_mode_page_disconnect_reconnect_maximum_burst_size_get
    if _newclass:
        maximum_burst_size = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_maximum_burst_size_get, _libiscsi.scsi_mode_page_disconnect_reconnect_maximum_burst_size_set)
    __swig_setmethods__["emdp"] = _libiscsi.scsi_mode_page_disconnect_reconnect_emdp_set
    __swig_getmethods__["emdp"] = _libiscsi.scsi_mode_page_disconnect_reconnect_emdp_get
    if _newclass:
        emdp = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_emdp_get, _libiscsi.scsi_mode_page_disconnect_reconnect_emdp_set)
    __swig_setmethods__["fair_arbitration"] = _libiscsi.scsi_mode_page_disconnect_reconnect_fair_arbitration_set
    __swig_getmethods__["fair_arbitration"] = _libiscsi.scsi_mode_page_disconnect_reconnect_fair_arbitration_get
    if _newclass:
        fair_arbitration = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_fair_arbitration_get, _libiscsi.scsi_mode_page_disconnect_reconnect_fair_arbitration_set)
    __swig_setmethods__["dimm"] = _libiscsi.scsi_mode_page_disconnect_reconnect_dimm_set
    __swig_getmethods__["dimm"] = _libiscsi.scsi_mode_page_disconnect_reconnect_dimm_get
    if _newclass:
        dimm = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_dimm_get, _libiscsi.scsi_mode_page_disconnect_reconnect_dimm_set)
    __swig_setmethods__["dtdc"] = _libiscsi.scsi_mode_page_disconnect_reconnect_dtdc_set
    __swig_getmethods__["dtdc"] = _libiscsi.scsi_mode_page_disconnect_reconnect_dtdc_get
    if _newclass:
        dtdc = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_dtdc_get, _libiscsi.scsi_mode_page_disconnect_reconnect_dtdc_set)
    __swig_setmethods__["first_burst_size"] = _libiscsi.scsi_mode_page_disconnect_reconnect_first_burst_size_set
    __swig_getmethods__["first_burst_size"] = _libiscsi.scsi_mode_page_disconnect_reconnect_first_burst_size_get
    if _newclass:
        first_burst_size = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_first_burst_size_get, _libiscsi.scsi_mode_page_disconnect_reconnect_first_burst_size_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page_disconnect_reconnect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page_disconnect_reconnect
    __del__ = lambda self: None
scsi_mode_page_disconnect_reconnect_swigregister = _libiscsi.scsi_mode_page_disconnect_reconnect_swigregister
scsi_mode_page_disconnect_reconnect_swigregister(scsi_mode_page_disconnect_reconnect)

class scsi_mode_page_informational_exceptions_control(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page_informational_exceptions_control, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page_informational_exceptions_control, name)
    __repr__ = _swig_repr
    __swig_setmethods__["perf"] = _libiscsi.scsi_mode_page_informational_exceptions_control_perf_set
    __swig_getmethods__["perf"] = _libiscsi.scsi_mode_page_informational_exceptions_control_perf_get
    if _newclass:
        perf = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_perf_get, _libiscsi.scsi_mode_page_informational_exceptions_control_perf_set)
    __swig_setmethods__["ebf"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ebf_set
    __swig_getmethods__["ebf"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ebf_get
    if _newclass:
        ebf = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_ebf_get, _libiscsi.scsi_mode_page_informational_exceptions_control_ebf_set)
    __swig_setmethods__["ewasc"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ewasc_set
    __swig_getmethods__["ewasc"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ewasc_get
    if _newclass:
        ewasc = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_ewasc_get, _libiscsi.scsi_mode_page_informational_exceptions_control_ewasc_set)
    __swig_setmethods__["dexcpt"] = _libiscsi.scsi_mode_page_informational_exceptions_control_dexcpt_set
    __swig_getmethods__["dexcpt"] = _libiscsi.scsi_mode_page_informational_exceptions_control_dexcpt_get
    if _newclass:
        dexcpt = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_dexcpt_get, _libiscsi.scsi_mode_page_informational_exceptions_control_dexcpt_set)
    __swig_setmethods__["test"] = _libiscsi.scsi_mode_page_informational_exceptions_control_test_set
    __swig_getmethods__["test"] = _libiscsi.scsi_mode_page_informational_exceptions_control_test_get
    if _newclass:
        test = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_test_get, _libiscsi.scsi_mode_page_informational_exceptions_control_test_set)
    __swig_setmethods__["ebackerr"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ebackerr_set
    __swig_getmethods__["ebackerr"] = _libiscsi.scsi_mode_page_informational_exceptions_control_ebackerr_get
    if _newclass:
        ebackerr = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_ebackerr_get, _libiscsi.scsi_mode_page_informational_exceptions_control_ebackerr_set)
    __swig_setmethods__["logerr"] = _libiscsi.scsi_mode_page_informational_exceptions_control_logerr_set
    __swig_getmethods__["logerr"] = _libiscsi.scsi_mode_page_informational_exceptions_control_logerr_get
    if _newclass:
        logerr = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_logerr_get, _libiscsi.scsi_mode_page_informational_exceptions_control_logerr_set)
    __swig_setmethods__["mrie"] = _libiscsi.scsi_mode_page_informational_exceptions_control_mrie_set
    __swig_getmethods__["mrie"] = _libiscsi.scsi_mode_page_informational_exceptions_control_mrie_get
    if _newclass:
        mrie = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_mrie_get, _libiscsi.scsi_mode_page_informational_exceptions_control_mrie_set)
    __swig_setmethods__["interval_timer"] = _libiscsi.scsi_mode_page_informational_exceptions_control_interval_timer_set
    __swig_getmethods__["interval_timer"] = _libiscsi.scsi_mode_page_informational_exceptions_control_interval_timer_get
    if _newclass:
        interval_timer = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_interval_timer_get, _libiscsi.scsi_mode_page_informational_exceptions_control_interval_timer_set)
    __swig_setmethods__["report_count"] = _libiscsi.scsi_mode_page_informational_exceptions_control_report_count_set
    __swig_getmethods__["report_count"] = _libiscsi.scsi_mode_page_informational_exceptions_control_report_count_get
    if _newclass:
        report_count = _swig_property(_libiscsi.scsi_mode_page_informational_exceptions_control_report_count_get, _libiscsi.scsi_mode_page_informational_exceptions_control_report_count_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page_informational_exceptions_control()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page_informational_exceptions_control
    __del__ = lambda self: None
scsi_mode_page_informational_exceptions_control_swigregister = _libiscsi.scsi_mode_page_informational_exceptions_control_swigregister
scsi_mode_page_informational_exceptions_control_swigregister(scsi_mode_page_informational_exceptions_control)

SCSI_MODEPAGE_READ_WRITE_ERROR_RECOVERY = _libiscsi.SCSI_MODEPAGE_READ_WRITE_ERROR_RECOVERY
SCSI_MODEPAGE_DISCONNECT_RECONNECT = _libiscsi.SCSI_MODEPAGE_DISCONNECT_RECONNECT
SCSI_MODEPAGE_VERIFY_ERROR_RECOVERY = _libiscsi.SCSI_MODEPAGE_VERIFY_ERROR_RECOVERY
SCSI_MODEPAGE_CACHING = _libiscsi.SCSI_MODEPAGE_CACHING
SCSI_MODEPAGE_XOR_CONTROL = _libiscsi.SCSI_MODEPAGE_XOR_CONTROL
SCSI_MODEPAGE_CONTROL = _libiscsi.SCSI_MODEPAGE_CONTROL
SCSI_MODEPAGE_POWER_CONDITION = _libiscsi.SCSI_MODEPAGE_POWER_CONDITION
SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL = _libiscsi.SCSI_MODEPAGE_INFORMATIONAL_EXCEPTIONS_CONTROL
SCSI_MODEPAGE_RETURN_ALL_PAGES = _libiscsi.SCSI_MODEPAGE_RETURN_ALL_PAGES
class scsi_mode_page(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_page, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_page, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.scsi_mode_page_next_set
    __swig_getmethods__["next"] = _libiscsi.scsi_mode_page_next_get
    if _newclass:
        next = _swig_property(_libiscsi.scsi_mode_page_next_get, _libiscsi.scsi_mode_page_next_set)
    __swig_setmethods__["ps"] = _libiscsi.scsi_mode_page_ps_set
    __swig_getmethods__["ps"] = _libiscsi.scsi_mode_page_ps_get
    if _newclass:
        ps = _swig_property(_libiscsi.scsi_mode_page_ps_get, _libiscsi.scsi_mode_page_ps_set)
    __swig_setmethods__["spf"] = _libiscsi.scsi_mode_page_spf_set
    __swig_getmethods__["spf"] = _libiscsi.scsi_mode_page_spf_get
    if _newclass:
        spf = _swig_property(_libiscsi.scsi_mode_page_spf_get, _libiscsi.scsi_mode_page_spf_set)
    __swig_setmethods__["page_code"] = _libiscsi.scsi_mode_page_page_code_set
    __swig_getmethods__["page_code"] = _libiscsi.scsi_mode_page_page_code_get
    if _newclass:
        page_code = _swig_property(_libiscsi.scsi_mode_page_page_code_get, _libiscsi.scsi_mode_page_page_code_set)
    __swig_setmethods__["subpage_code"] = _libiscsi.scsi_mode_page_subpage_code_set
    __swig_getmethods__["subpage_code"] = _libiscsi.scsi_mode_page_subpage_code_get
    if _newclass:
        subpage_code = _swig_property(_libiscsi.scsi_mode_page_subpage_code_get, _libiscsi.scsi_mode_page_subpage_code_set)
    __swig_setmethods__["len"] = _libiscsi.scsi_mode_page_len_set
    __swig_getmethods__["len"] = _libiscsi.scsi_mode_page_len_get
    if _newclass:
        len = _swig_property(_libiscsi.scsi_mode_page_len_get, _libiscsi.scsi_mode_page_len_set)
    __swig_setmethods__["caching"] = _libiscsi.scsi_mode_page_caching_set
    __swig_getmethods__["caching"] = _libiscsi.scsi_mode_page_caching_get
    if _newclass:
        caching = _swig_property(_libiscsi.scsi_mode_page_caching_get, _libiscsi.scsi_mode_page_caching_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_mode_page_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_mode_page_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_mode_page_control_get, _libiscsi.scsi_mode_page_control_set)
    __swig_setmethods__["disconnect_reconnect"] = _libiscsi.scsi_mode_page_disconnect_reconnect_set
    __swig_getmethods__["disconnect_reconnect"] = _libiscsi.scsi_mode_page_disconnect_reconnect_get
    if _newclass:
        disconnect_reconnect = _swig_property(_libiscsi.scsi_mode_page_disconnect_reconnect_get, _libiscsi.scsi_mode_page_disconnect_reconnect_set)
    __swig_setmethods__["iec"] = _libiscsi.scsi_mode_page_iec_set
    __swig_getmethods__["iec"] = _libiscsi.scsi_mode_page_iec_get
    if _newclass:
        iec = _swig_property(_libiscsi.scsi_mode_page_iec_get, _libiscsi.scsi_mode_page_iec_set)
    __swig_setmethods__["power_condition"] = _libiscsi.scsi_mode_page_power_condition_set
    __swig_getmethods__["power_condition"] = _libiscsi.scsi_mode_page_power_condition_get
    if _newclass:
        power_condition = _swig_property(_libiscsi.scsi_mode_page_power_condition_get, _libiscsi.scsi_mode_page_power_condition_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_page()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_page
    __del__ = lambda self: None
scsi_mode_page_swigregister = _libiscsi.scsi_mode_page_swigregister
scsi_mode_page_swigregister(scsi_mode_page)

class scsi_mode_sense(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_mode_sense, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_mode_sense, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode_data_length"] = _libiscsi.scsi_mode_sense_mode_data_length_set
    __swig_getmethods__["mode_data_length"] = _libiscsi.scsi_mode_sense_mode_data_length_get
    if _newclass:
        mode_data_length = _swig_property(_libiscsi.scsi_mode_sense_mode_data_length_get, _libiscsi.scsi_mode_sense_mode_data_length_set)
    __swig_setmethods__["medium_type"] = _libiscsi.scsi_mode_sense_medium_type_set
    __swig_getmethods__["medium_type"] = _libiscsi.scsi_mode_sense_medium_type_get
    if _newclass:
        medium_type = _swig_property(_libiscsi.scsi_mode_sense_medium_type_get, _libiscsi.scsi_mode_sense_medium_type_set)
    __swig_setmethods__["device_specific_parameter"] = _libiscsi.scsi_mode_sense_device_specific_parameter_set
    __swig_getmethods__["device_specific_parameter"] = _libiscsi.scsi_mode_sense_device_specific_parameter_get
    if _newclass:
        device_specific_parameter = _swig_property(_libiscsi.scsi_mode_sense_device_specific_parameter_get, _libiscsi.scsi_mode_sense_device_specific_parameter_set)
    __swig_setmethods__["longlba"] = _libiscsi.scsi_mode_sense_longlba_set
    __swig_getmethods__["longlba"] = _libiscsi.scsi_mode_sense_longlba_get
    if _newclass:
        longlba = _swig_property(_libiscsi.scsi_mode_sense_longlba_get, _libiscsi.scsi_mode_sense_longlba_set)
    __swig_setmethods__["block_descriptor_length"] = _libiscsi.scsi_mode_sense_block_descriptor_length_set
    __swig_getmethods__["block_descriptor_length"] = _libiscsi.scsi_mode_sense_block_descriptor_length_get
    if _newclass:
        block_descriptor_length = _swig_property(_libiscsi.scsi_mode_sense_block_descriptor_length_get, _libiscsi.scsi_mode_sense_block_descriptor_length_set)
    __swig_setmethods__["pages"] = _libiscsi.scsi_mode_sense_pages_set
    __swig_getmethods__["pages"] = _libiscsi.scsi_mode_sense_pages_get
    if _newclass:
        pages = _swig_property(_libiscsi.scsi_mode_sense_pages_get, _libiscsi.scsi_mode_sense_pages_set)

    def __init__(self):
        this = _libiscsi.new_scsi_mode_sense()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_mode_sense
    __del__ = lambda self: None
scsi_mode_sense_swigregister = _libiscsi.scsi_mode_sense_swigregister
scsi_mode_sense_swigregister(scsi_mode_sense)


def scsi_modesense_get_page(ms: 'scsi_mode_sense', page_code: 'enum scsi_modesense_page_code', subpage_code: 'int') -> "struct scsi_mode_page *":
    return _libiscsi.scsi_modesense_get_page(ms, page_code, subpage_code)
scsi_modesense_get_page = _libiscsi.scsi_modesense_get_page

def scsi_cdb_modesense6(dbd: 'int', pc: 'enum scsi_modesense_page_control', page_code: 'enum scsi_modesense_page_code', sub_page_code: 'int', alloc_len: 'unsigned char') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_modesense6(dbd, pc, page_code, sub_page_code, alloc_len)
scsi_cdb_modesense6 = _libiscsi.scsi_cdb_modesense6

def scsi_cdb_modesense10(llbaa: 'int', dbd: 'int', pc: 'enum scsi_modesense_page_control', page_code: 'enum scsi_modesense_page_code', sub_page_code: 'int', alloc_len: 'unsigned char') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_modesense10(llbaa, dbd, pc, page_code, sub_page_code, alloc_len)
scsi_cdb_modesense10 = _libiscsi.scsi_cdb_modesense10

def scsi_cdb_modeselect6(pf: 'int', sp: 'int', param_len: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_modeselect6(pf, sp, param_len)
scsi_cdb_modeselect6 = _libiscsi.scsi_cdb_modeselect6

def scsi_cdb_modeselect10(pf: 'int', sp: 'int', param_len: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_modeselect10(pf, sp, param_len)
scsi_cdb_modeselect10 = _libiscsi.scsi_cdb_modeselect10

def scsi_modesense_dataout_marshall(task: 'scsi_task', mp: 'scsi_mode_page', is_modeselect6: 'int') -> "struct scsi_data *":
    return _libiscsi.scsi_modesense_dataout_marshall(task, mp, is_modeselect6)
scsi_modesense_dataout_marshall = _libiscsi.scsi_modesense_dataout_marshall
class scsi_readcapacity16(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_readcapacity16, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_readcapacity16, name)
    __repr__ = _swig_repr
    __swig_setmethods__["returned_lba"] = _libiscsi.scsi_readcapacity16_returned_lba_set
    __swig_getmethods__["returned_lba"] = _libiscsi.scsi_readcapacity16_returned_lba_get
    if _newclass:
        returned_lba = _swig_property(_libiscsi.scsi_readcapacity16_returned_lba_get, _libiscsi.scsi_readcapacity16_returned_lba_set)
    __swig_setmethods__["block_length"] = _libiscsi.scsi_readcapacity16_block_length_set
    __swig_getmethods__["block_length"] = _libiscsi.scsi_readcapacity16_block_length_get
    if _newclass:
        block_length = _swig_property(_libiscsi.scsi_readcapacity16_block_length_get, _libiscsi.scsi_readcapacity16_block_length_set)
    __swig_setmethods__["p_type"] = _libiscsi.scsi_readcapacity16_p_type_set
    __swig_getmethods__["p_type"] = _libiscsi.scsi_readcapacity16_p_type_get
    if _newclass:
        p_type = _swig_property(_libiscsi.scsi_readcapacity16_p_type_get, _libiscsi.scsi_readcapacity16_p_type_set)
    __swig_setmethods__["prot_en"] = _libiscsi.scsi_readcapacity16_prot_en_set
    __swig_getmethods__["prot_en"] = _libiscsi.scsi_readcapacity16_prot_en_get
    if _newclass:
        prot_en = _swig_property(_libiscsi.scsi_readcapacity16_prot_en_get, _libiscsi.scsi_readcapacity16_prot_en_set)
    __swig_setmethods__["p_i_exp"] = _libiscsi.scsi_readcapacity16_p_i_exp_set
    __swig_getmethods__["p_i_exp"] = _libiscsi.scsi_readcapacity16_p_i_exp_get
    if _newclass:
        p_i_exp = _swig_property(_libiscsi.scsi_readcapacity16_p_i_exp_get, _libiscsi.scsi_readcapacity16_p_i_exp_set)
    __swig_setmethods__["lbppbe"] = _libiscsi.scsi_readcapacity16_lbppbe_set
    __swig_getmethods__["lbppbe"] = _libiscsi.scsi_readcapacity16_lbppbe_get
    if _newclass:
        lbppbe = _swig_property(_libiscsi.scsi_readcapacity16_lbppbe_get, _libiscsi.scsi_readcapacity16_lbppbe_set)
    __swig_setmethods__["lbpme"] = _libiscsi.scsi_readcapacity16_lbpme_set
    __swig_getmethods__["lbpme"] = _libiscsi.scsi_readcapacity16_lbpme_get
    if _newclass:
        lbpme = _swig_property(_libiscsi.scsi_readcapacity16_lbpme_get, _libiscsi.scsi_readcapacity16_lbpme_set)
    __swig_setmethods__["lbprz"] = _libiscsi.scsi_readcapacity16_lbprz_set
    __swig_getmethods__["lbprz"] = _libiscsi.scsi_readcapacity16_lbprz_get
    if _newclass:
        lbprz = _swig_property(_libiscsi.scsi_readcapacity16_lbprz_get, _libiscsi.scsi_readcapacity16_lbprz_set)
    __swig_setmethods__["lalba"] = _libiscsi.scsi_readcapacity16_lalba_set
    __swig_getmethods__["lalba"] = _libiscsi.scsi_readcapacity16_lalba_get
    if _newclass:
        lalba = _swig_property(_libiscsi.scsi_readcapacity16_lalba_get, _libiscsi.scsi_readcapacity16_lalba_set)

    def __init__(self):
        this = _libiscsi.new_scsi_readcapacity16()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_readcapacity16
    __del__ = lambda self: None
scsi_readcapacity16_swigregister = _libiscsi.scsi_readcapacity16_swigregister
scsi_readcapacity16_swigregister(scsi_readcapacity16)

SCSI_PROVISIONING_TYPE_MAPPED = _libiscsi.SCSI_PROVISIONING_TYPE_MAPPED
SCSI_PROVISIONING_TYPE_DEALLOCATED = _libiscsi.SCSI_PROVISIONING_TYPE_DEALLOCATED
SCSI_PROVISIONING_TYPE_ANCHORED = _libiscsi.SCSI_PROVISIONING_TYPE_ANCHORED
class scsi_lba_status_descriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_lba_status_descriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_lba_status_descriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _libiscsi.scsi_lba_status_descriptor_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_lba_status_descriptor_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_lba_status_descriptor_lba_get, _libiscsi.scsi_lba_status_descriptor_lba_set)
    __swig_setmethods__["num_blocks"] = _libiscsi.scsi_lba_status_descriptor_num_blocks_set
    __swig_getmethods__["num_blocks"] = _libiscsi.scsi_lba_status_descriptor_num_blocks_get
    if _newclass:
        num_blocks = _swig_property(_libiscsi.scsi_lba_status_descriptor_num_blocks_get, _libiscsi.scsi_lba_status_descriptor_num_blocks_set)
    __swig_setmethods__["provisioning"] = _libiscsi.scsi_lba_status_descriptor_provisioning_set
    __swig_getmethods__["provisioning"] = _libiscsi.scsi_lba_status_descriptor_provisioning_get
    if _newclass:
        provisioning = _swig_property(_libiscsi.scsi_lba_status_descriptor_provisioning_get, _libiscsi.scsi_lba_status_descriptor_provisioning_set)

    def __init__(self):
        this = _libiscsi.new_scsi_lba_status_descriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_lba_status_descriptor
    __del__ = lambda self: None
scsi_lba_status_descriptor_swigregister = _libiscsi.scsi_lba_status_descriptor_swigregister
scsi_lba_status_descriptor_swigregister(scsi_lba_status_descriptor)

class scsi_get_lba_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_get_lba_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_get_lba_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_descriptors"] = _libiscsi.scsi_get_lba_status_num_descriptors_set
    __swig_getmethods__["num_descriptors"] = _libiscsi.scsi_get_lba_status_num_descriptors_get
    if _newclass:
        num_descriptors = _swig_property(_libiscsi.scsi_get_lba_status_num_descriptors_get, _libiscsi.scsi_get_lba_status_num_descriptors_set)
    __swig_setmethods__["descriptors"] = _libiscsi.scsi_get_lba_status_descriptors_set
    __swig_getmethods__["descriptors"] = _libiscsi.scsi_get_lba_status_descriptors_get
    if _newclass:
        descriptors = _swig_property(_libiscsi.scsi_get_lba_status_descriptors_get, _libiscsi.scsi_get_lba_status_descriptors_set)

    def __init__(self):
        this = _libiscsi.new_scsi_get_lba_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_get_lba_status
    __del__ = lambda self: None
scsi_get_lba_status_swigregister = _libiscsi.scsi_get_lba_status_swigregister
scsi_get_lba_status_swigregister(scsi_get_lba_status)

class scsi_op_timeout_descriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_op_timeout_descriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_op_timeout_descriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["descriptor_length"] = _libiscsi.scsi_op_timeout_descriptor_descriptor_length_set
    __swig_getmethods__["descriptor_length"] = _libiscsi.scsi_op_timeout_descriptor_descriptor_length_get
    if _newclass:
        descriptor_length = _swig_property(_libiscsi.scsi_op_timeout_descriptor_descriptor_length_get, _libiscsi.scsi_op_timeout_descriptor_descriptor_length_set)
    __swig_setmethods__["command_specific"] = _libiscsi.scsi_op_timeout_descriptor_command_specific_set
    __swig_getmethods__["command_specific"] = _libiscsi.scsi_op_timeout_descriptor_command_specific_get
    if _newclass:
        command_specific = _swig_property(_libiscsi.scsi_op_timeout_descriptor_command_specific_get, _libiscsi.scsi_op_timeout_descriptor_command_specific_set)
    __swig_setmethods__["nominal_processing_timeout"] = _libiscsi.scsi_op_timeout_descriptor_nominal_processing_timeout_set
    __swig_getmethods__["nominal_processing_timeout"] = _libiscsi.scsi_op_timeout_descriptor_nominal_processing_timeout_get
    if _newclass:
        nominal_processing_timeout = _swig_property(_libiscsi.scsi_op_timeout_descriptor_nominal_processing_timeout_get, _libiscsi.scsi_op_timeout_descriptor_nominal_processing_timeout_set)
    __swig_setmethods__["recommended_timeout"] = _libiscsi.scsi_op_timeout_descriptor_recommended_timeout_set
    __swig_getmethods__["recommended_timeout"] = _libiscsi.scsi_op_timeout_descriptor_recommended_timeout_get
    if _newclass:
        recommended_timeout = _swig_property(_libiscsi.scsi_op_timeout_descriptor_recommended_timeout_get, _libiscsi.scsi_op_timeout_descriptor_recommended_timeout_set)

    def __init__(self):
        this = _libiscsi.new_scsi_op_timeout_descriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_op_timeout_descriptor
    __del__ = lambda self: None
scsi_op_timeout_descriptor_swigregister = _libiscsi.scsi_op_timeout_descriptor_swigregister
scsi_op_timeout_descriptor_swigregister(scsi_op_timeout_descriptor)

class scsi_command_descriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_command_descriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_command_descriptor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_command_descriptor_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_command_descriptor_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_command_descriptor_opcode_get, _libiscsi.scsi_command_descriptor_opcode_set)
    __swig_setmethods__["sa"] = _libiscsi.scsi_command_descriptor_sa_set
    __swig_getmethods__["sa"] = _libiscsi.scsi_command_descriptor_sa_get
    if _newclass:
        sa = _swig_property(_libiscsi.scsi_command_descriptor_sa_get, _libiscsi.scsi_command_descriptor_sa_set)
    __swig_setmethods__["ctdp"] = _libiscsi.scsi_command_descriptor_ctdp_set
    __swig_getmethods__["ctdp"] = _libiscsi.scsi_command_descriptor_ctdp_get
    if _newclass:
        ctdp = _swig_property(_libiscsi.scsi_command_descriptor_ctdp_get, _libiscsi.scsi_command_descriptor_ctdp_set)
    __swig_setmethods__["servactv"] = _libiscsi.scsi_command_descriptor_servactv_set
    __swig_getmethods__["servactv"] = _libiscsi.scsi_command_descriptor_servactv_get
    if _newclass:
        servactv = _swig_property(_libiscsi.scsi_command_descriptor_servactv_get, _libiscsi.scsi_command_descriptor_servactv_set)
    __swig_setmethods__["cdb_len"] = _libiscsi.scsi_command_descriptor_cdb_len_set
    __swig_getmethods__["cdb_len"] = _libiscsi.scsi_command_descriptor_cdb_len_get
    if _newclass:
        cdb_len = _swig_property(_libiscsi.scsi_command_descriptor_cdb_len_get, _libiscsi.scsi_command_descriptor_cdb_len_set)
    __swig_setmethods__["to"] = _libiscsi.scsi_command_descriptor_to_set
    __swig_getmethods__["to"] = _libiscsi.scsi_command_descriptor_to_get
    if _newclass:
        to = _swig_property(_libiscsi.scsi_command_descriptor_to_get, _libiscsi.scsi_command_descriptor_to_set)

    def __init__(self):
        this = _libiscsi.new_scsi_command_descriptor()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_command_descriptor
    __del__ = lambda self: None
scsi_command_descriptor_swigregister = _libiscsi.scsi_command_descriptor_swigregister
scsi_command_descriptor_swigregister(scsi_command_descriptor)

class scsi_report_supported_op_codes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_report_supported_op_codes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_report_supported_op_codes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_descriptors"] = _libiscsi.scsi_report_supported_op_codes_num_descriptors_set
    __swig_getmethods__["num_descriptors"] = _libiscsi.scsi_report_supported_op_codes_num_descriptors_get
    if _newclass:
        num_descriptors = _swig_property(_libiscsi.scsi_report_supported_op_codes_num_descriptors_get, _libiscsi.scsi_report_supported_op_codes_num_descriptors_set)
    __swig_setmethods__["descriptors"] = _libiscsi.scsi_report_supported_op_codes_descriptors_set
    __swig_getmethods__["descriptors"] = _libiscsi.scsi_report_supported_op_codes_descriptors_get
    if _newclass:
        descriptors = _swig_property(_libiscsi.scsi_report_supported_op_codes_descriptors_get, _libiscsi.scsi_report_supported_op_codes_descriptors_set)

    def __init__(self):
        this = _libiscsi.new_scsi_report_supported_op_codes()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_report_supported_op_codes
    __del__ = lambda self: None
scsi_report_supported_op_codes_swigregister = _libiscsi.scsi_report_supported_op_codes_swigregister
scsi_report_supported_op_codes_swigregister(scsi_report_supported_op_codes)

class scsi_report_supported_op_codes_one_command(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_report_supported_op_codes_one_command, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_report_supported_op_codes_one_command, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ctdp"] = _libiscsi.scsi_report_supported_op_codes_one_command_ctdp_set
    __swig_getmethods__["ctdp"] = _libiscsi.scsi_report_supported_op_codes_one_command_ctdp_get
    if _newclass:
        ctdp = _swig_property(_libiscsi.scsi_report_supported_op_codes_one_command_ctdp_get, _libiscsi.scsi_report_supported_op_codes_one_command_ctdp_set)
    __swig_setmethods__["support"] = _libiscsi.scsi_report_supported_op_codes_one_command_support_set
    __swig_getmethods__["support"] = _libiscsi.scsi_report_supported_op_codes_one_command_support_get
    if _newclass:
        support = _swig_property(_libiscsi.scsi_report_supported_op_codes_one_command_support_get, _libiscsi.scsi_report_supported_op_codes_one_command_support_set)
    __swig_setmethods__["cdb_length"] = _libiscsi.scsi_report_supported_op_codes_one_command_cdb_length_set
    __swig_getmethods__["cdb_length"] = _libiscsi.scsi_report_supported_op_codes_one_command_cdb_length_get
    if _newclass:
        cdb_length = _swig_property(_libiscsi.scsi_report_supported_op_codes_one_command_cdb_length_get, _libiscsi.scsi_report_supported_op_codes_one_command_cdb_length_set)
    __swig_setmethods__["cdb_usage_data"] = _libiscsi.scsi_report_supported_op_codes_one_command_cdb_usage_data_set
    __swig_getmethods__["cdb_usage_data"] = _libiscsi.scsi_report_supported_op_codes_one_command_cdb_usage_data_get
    if _newclass:
        cdb_usage_data = _swig_property(_libiscsi.scsi_report_supported_op_codes_one_command_cdb_usage_data_get, _libiscsi.scsi_report_supported_op_codes_one_command_cdb_usage_data_set)
    __swig_setmethods__["to"] = _libiscsi.scsi_report_supported_op_codes_one_command_to_set
    __swig_getmethods__["to"] = _libiscsi.scsi_report_supported_op_codes_one_command_to_get
    if _newclass:
        to = _swig_property(_libiscsi.scsi_report_supported_op_codes_one_command_to_get, _libiscsi.scsi_report_supported_op_codes_one_command_to_set)

    def __init__(self):
        this = _libiscsi.new_scsi_report_supported_op_codes_one_command()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_report_supported_op_codes_one_command
    __del__ = lambda self: None
scsi_report_supported_op_codes_one_command_swigregister = _libiscsi.scsi_report_supported_op_codes_one_command_swigregister
scsi_report_supported_op_codes_one_command_swigregister(scsi_report_supported_op_codes_one_command)

class scsi_persistent_reserve_in_read_keys(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_persistent_reserve_in_read_keys, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_persistent_reserve_in_read_keys, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prgeneration"] = _libiscsi.scsi_persistent_reserve_in_read_keys_prgeneration_set
    __swig_getmethods__["prgeneration"] = _libiscsi.scsi_persistent_reserve_in_read_keys_prgeneration_get
    if _newclass:
        prgeneration = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_keys_prgeneration_get, _libiscsi.scsi_persistent_reserve_in_read_keys_prgeneration_set)
    __swig_setmethods__["additional_length"] = _libiscsi.scsi_persistent_reserve_in_read_keys_additional_length_set
    __swig_getmethods__["additional_length"] = _libiscsi.scsi_persistent_reserve_in_read_keys_additional_length_get
    if _newclass:
        additional_length = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_keys_additional_length_get, _libiscsi.scsi_persistent_reserve_in_read_keys_additional_length_set)
    __swig_setmethods__["num_keys"] = _libiscsi.scsi_persistent_reserve_in_read_keys_num_keys_set
    __swig_getmethods__["num_keys"] = _libiscsi.scsi_persistent_reserve_in_read_keys_num_keys_get
    if _newclass:
        num_keys = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_keys_num_keys_get, _libiscsi.scsi_persistent_reserve_in_read_keys_num_keys_set)
    __swig_setmethods__["keys"] = _libiscsi.scsi_persistent_reserve_in_read_keys_keys_set
    __swig_getmethods__["keys"] = _libiscsi.scsi_persistent_reserve_in_read_keys_keys_get
    if _newclass:
        keys = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_keys_keys_get, _libiscsi.scsi_persistent_reserve_in_read_keys_keys_set)

    def __init__(self):
        this = _libiscsi.new_scsi_persistent_reserve_in_read_keys()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_persistent_reserve_in_read_keys
    __del__ = lambda self: None
scsi_persistent_reserve_in_read_keys_swigregister = _libiscsi.scsi_persistent_reserve_in_read_keys_swigregister
scsi_persistent_reserve_in_read_keys_swigregister(scsi_persistent_reserve_in_read_keys)

class scsi_persistent_reserve_in_read_reservation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_persistent_reserve_in_read_reservation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_persistent_reserve_in_read_reservation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["prgeneration"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_prgeneration_set
    __swig_getmethods__["prgeneration"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_prgeneration_get
    if _newclass:
        prgeneration = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_prgeneration_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_prgeneration_set)
    __swig_setmethods__["additional_length"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_additional_length_set
    __swig_getmethods__["additional_length"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_additional_length_get
    if _newclass:
        additional_length = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_additional_length_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_additional_length_set)
    __swig_setmethods__["reserved"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_reserved_set
    __swig_getmethods__["reserved"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_reserved_get
    if _newclass:
        reserved = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_reserved_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_reserved_set)
    __swig_setmethods__["reservation_key"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_reservation_key_set
    __swig_getmethods__["reservation_key"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_reservation_key_get
    if _newclass:
        reservation_key = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_reservation_key_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_reservation_key_set)
    __swig_setmethods__["pr_scope"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_scope_set
    __swig_getmethods__["pr_scope"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_scope_get
    if _newclass:
        pr_scope = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_pr_scope_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_scope_set)
    __swig_setmethods__["pr_type"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_type_set
    __swig_getmethods__["pr_type"] = _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_type_get
    if _newclass:
        pr_type = _swig_property(_libiscsi.scsi_persistent_reserve_in_read_reservation_pr_type_get, _libiscsi.scsi_persistent_reserve_in_read_reservation_pr_type_set)

    def __init__(self):
        this = _libiscsi.new_scsi_persistent_reserve_in_read_reservation()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_persistent_reserve_in_read_reservation
    __del__ = lambda self: None
scsi_persistent_reserve_in_read_reservation_swigregister = _libiscsi.scsi_persistent_reserve_in_read_reservation_swigregister
scsi_persistent_reserve_in_read_reservation_swigregister(scsi_persistent_reserve_in_read_reservation)

SCSI_PR_TYPE_MASK_EX_AC_AR = _libiscsi.SCSI_PR_TYPE_MASK_EX_AC_AR
SCSI_PR_TYPE_MASK_WR_EX = _libiscsi.SCSI_PR_TYPE_MASK_WR_EX
SCSI_PR_TYPE_MASK_EX_AC = _libiscsi.SCSI_PR_TYPE_MASK_EX_AC
SCSI_PR_TYPE_MASK_WR_EX_RO = _libiscsi.SCSI_PR_TYPE_MASK_WR_EX_RO
SCSI_PR_TYPE_MASK_EX_AC_RO = _libiscsi.SCSI_PR_TYPE_MASK_EX_AC_RO
SCSI_PR_TYPE_MASK_WR_EX_AR = _libiscsi.SCSI_PR_TYPE_MASK_WR_EX_AR
SCSI_PR_TYPE_MASK_ALL = _libiscsi.SCSI_PR_TYPE_MASK_ALL
class scsi_persistent_reserve_in_report_capabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_persistent_reserve_in_report_capabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_persistent_reserve_in_report_capabilities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["length"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_length_set
    __swig_getmethods__["length"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_length_get
    if _newclass:
        length = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_length_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_length_set)
    __swig_setmethods__["crh"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_crh_set
    __swig_getmethods__["crh"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_crh_get
    if _newclass:
        crh = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_crh_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_crh_set)
    __swig_setmethods__["sip_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_sip_c_set
    __swig_getmethods__["sip_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_sip_c_get
    if _newclass:
        sip_c = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_sip_c_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_sip_c_set)
    __swig_setmethods__["atp_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_atp_c_set
    __swig_getmethods__["atp_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_atp_c_get
    if _newclass:
        atp_c = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_atp_c_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_atp_c_set)
    __swig_setmethods__["ptpl_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_c_set
    __swig_getmethods__["ptpl_c"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_c_get
    if _newclass:
        ptpl_c = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_c_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_c_set)
    __swig_setmethods__["tmv"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_tmv_set
    __swig_getmethods__["tmv"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_tmv_get
    if _newclass:
        tmv = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_tmv_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_tmv_set)
    __swig_setmethods__["allow_commands"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_allow_commands_set
    __swig_getmethods__["allow_commands"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_allow_commands_get
    if _newclass:
        allow_commands = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_allow_commands_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_allow_commands_set)
    __swig_setmethods__["ptpl_a"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_a_set
    __swig_getmethods__["ptpl_a"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_a_get
    if _newclass:
        ptpl_a = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_a_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_ptpl_a_set)
    __swig_setmethods__["persistent_reservation_type_mask"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_persistent_reservation_type_mask_set
    __swig_getmethods__["persistent_reservation_type_mask"] = _libiscsi.scsi_persistent_reserve_in_report_capabilities_persistent_reservation_type_mask_get
    if _newclass:
        persistent_reservation_type_mask = _swig_property(_libiscsi.scsi_persistent_reserve_in_report_capabilities_persistent_reservation_type_mask_get, _libiscsi.scsi_persistent_reserve_in_report_capabilities_persistent_reservation_type_mask_set)

    def __init__(self):
        this = _libiscsi.new_scsi_persistent_reserve_in_report_capabilities()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_persistent_reserve_in_report_capabilities
    __del__ = lambda self: None
scsi_persistent_reserve_in_report_capabilities_swigregister = _libiscsi.scsi_persistent_reserve_in_report_capabilities_swigregister
scsi_persistent_reserve_in_report_capabilities_swigregister(scsi_persistent_reserve_in_report_capabilities)

class scsi_read6_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_read6_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_read6_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_read6_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_read6_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_read6_cdb_opcode_get, _libiscsi.scsi_read6_cdb_opcode_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_read6_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_read6_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_read6_cdb_lba_get, _libiscsi.scsi_read6_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_read6_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_read6_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_read6_cdb_transfer_length_get, _libiscsi.scsi_read6_cdb_transfer_length_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_read6_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_read6_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_read6_cdb_control_get, _libiscsi.scsi_read6_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_read6_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_read6_cdb
    __del__ = lambda self: None
scsi_read6_cdb_swigregister = _libiscsi.scsi_read6_cdb_swigregister
scsi_read6_cdb_swigregister(scsi_read6_cdb)

class scsi_read10_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_read10_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_read10_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_read10_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_read10_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_read10_cdb_opcode_get, _libiscsi.scsi_read10_cdb_opcode_set)
    __swig_setmethods__["rdprotect"] = _libiscsi.scsi_read10_cdb_rdprotect_set
    __swig_getmethods__["rdprotect"] = _libiscsi.scsi_read10_cdb_rdprotect_get
    if _newclass:
        rdprotect = _swig_property(_libiscsi.scsi_read10_cdb_rdprotect_get, _libiscsi.scsi_read10_cdb_rdprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_read10_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_read10_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_read10_cdb_dpo_get, _libiscsi.scsi_read10_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_read10_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_read10_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_read10_cdb_fua_get, _libiscsi.scsi_read10_cdb_fua_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_read10_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_read10_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_read10_cdb_fua_nv_get, _libiscsi.scsi_read10_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_read10_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_read10_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_read10_cdb_lba_get, _libiscsi.scsi_read10_cdb_lba_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_read10_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_read10_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_read10_cdb_group_get, _libiscsi.scsi_read10_cdb_group_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_read10_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_read10_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_read10_cdb_transfer_length_get, _libiscsi.scsi_read10_cdb_transfer_length_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_read10_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_read10_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_read10_cdb_control_get, _libiscsi.scsi_read10_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_read10_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_read10_cdb
    __del__ = lambda self: None
scsi_read10_cdb_swigregister = _libiscsi.scsi_read10_cdb_swigregister
scsi_read10_cdb_swigregister(scsi_read10_cdb)

class scsi_read12_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_read12_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_read12_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_read12_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_read12_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_read12_cdb_opcode_get, _libiscsi.scsi_read12_cdb_opcode_set)
    __swig_setmethods__["rdprotect"] = _libiscsi.scsi_read12_cdb_rdprotect_set
    __swig_getmethods__["rdprotect"] = _libiscsi.scsi_read12_cdb_rdprotect_get
    if _newclass:
        rdprotect = _swig_property(_libiscsi.scsi_read12_cdb_rdprotect_get, _libiscsi.scsi_read12_cdb_rdprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_read12_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_read12_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_read12_cdb_dpo_get, _libiscsi.scsi_read12_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_read12_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_read12_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_read12_cdb_fua_get, _libiscsi.scsi_read12_cdb_fua_set)
    __swig_setmethods__["rarc"] = _libiscsi.scsi_read12_cdb_rarc_set
    __swig_getmethods__["rarc"] = _libiscsi.scsi_read12_cdb_rarc_get
    if _newclass:
        rarc = _swig_property(_libiscsi.scsi_read12_cdb_rarc_get, _libiscsi.scsi_read12_cdb_rarc_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_read12_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_read12_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_read12_cdb_fua_nv_get, _libiscsi.scsi_read12_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_read12_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_read12_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_read12_cdb_lba_get, _libiscsi.scsi_read12_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_read12_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_read12_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_read12_cdb_transfer_length_get, _libiscsi.scsi_read12_cdb_transfer_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_read12_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_read12_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_read12_cdb_group_get, _libiscsi.scsi_read12_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_read12_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_read12_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_read12_cdb_control_get, _libiscsi.scsi_read12_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_read12_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_read12_cdb
    __del__ = lambda self: None
scsi_read12_cdb_swigregister = _libiscsi.scsi_read12_cdb_swigregister
scsi_read12_cdb_swigregister(scsi_read12_cdb)

class scsi_read16_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_read16_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_read16_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_read16_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_read16_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_read16_cdb_opcode_get, _libiscsi.scsi_read16_cdb_opcode_set)
    __swig_setmethods__["rdprotect"] = _libiscsi.scsi_read16_cdb_rdprotect_set
    __swig_getmethods__["rdprotect"] = _libiscsi.scsi_read16_cdb_rdprotect_get
    if _newclass:
        rdprotect = _swig_property(_libiscsi.scsi_read16_cdb_rdprotect_get, _libiscsi.scsi_read16_cdb_rdprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_read16_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_read16_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_read16_cdb_dpo_get, _libiscsi.scsi_read16_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_read16_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_read16_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_read16_cdb_fua_get, _libiscsi.scsi_read16_cdb_fua_set)
    __swig_setmethods__["rarc"] = _libiscsi.scsi_read16_cdb_rarc_set
    __swig_getmethods__["rarc"] = _libiscsi.scsi_read16_cdb_rarc_get
    if _newclass:
        rarc = _swig_property(_libiscsi.scsi_read16_cdb_rarc_get, _libiscsi.scsi_read16_cdb_rarc_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_read16_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_read16_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_read16_cdb_fua_nv_get, _libiscsi.scsi_read16_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_read16_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_read16_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_read16_cdb_lba_get, _libiscsi.scsi_read16_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_read16_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_read16_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_read16_cdb_transfer_length_get, _libiscsi.scsi_read16_cdb_transfer_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_read16_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_read16_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_read16_cdb_group_get, _libiscsi.scsi_read16_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_read16_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_read16_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_read16_cdb_control_get, _libiscsi.scsi_read16_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_read16_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_read16_cdb
    __del__ = lambda self: None
scsi_read16_cdb_swigregister = _libiscsi.scsi_read16_cdb_swigregister
scsi_read16_cdb_swigregister(scsi_read16_cdb)

class scsi_verify10_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_verify10_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_verify10_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_verify10_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_verify10_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_verify10_cdb_opcode_get, _libiscsi.scsi_verify10_cdb_opcode_set)
    __swig_setmethods__["vrprotect"] = _libiscsi.scsi_verify10_cdb_vrprotect_set
    __swig_getmethods__["vrprotect"] = _libiscsi.scsi_verify10_cdb_vrprotect_get
    if _newclass:
        vrprotect = _swig_property(_libiscsi.scsi_verify10_cdb_vrprotect_get, _libiscsi.scsi_verify10_cdb_vrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_verify10_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_verify10_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_verify10_cdb_dpo_get, _libiscsi.scsi_verify10_cdb_dpo_set)
    __swig_setmethods__["bytchk"] = _libiscsi.scsi_verify10_cdb_bytchk_set
    __swig_getmethods__["bytchk"] = _libiscsi.scsi_verify10_cdb_bytchk_get
    if _newclass:
        bytchk = _swig_property(_libiscsi.scsi_verify10_cdb_bytchk_get, _libiscsi.scsi_verify10_cdb_bytchk_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_verify10_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_verify10_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_verify10_cdb_lba_get, _libiscsi.scsi_verify10_cdb_lba_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_verify10_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_verify10_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_verify10_cdb_group_get, _libiscsi.scsi_verify10_cdb_group_set)
    __swig_setmethods__["verification_length"] = _libiscsi.scsi_verify10_cdb_verification_length_set
    __swig_getmethods__["verification_length"] = _libiscsi.scsi_verify10_cdb_verification_length_get
    if _newclass:
        verification_length = _swig_property(_libiscsi.scsi_verify10_cdb_verification_length_get, _libiscsi.scsi_verify10_cdb_verification_length_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_verify10_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_verify10_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_verify10_cdb_control_get, _libiscsi.scsi_verify10_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_verify10_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_verify10_cdb
    __del__ = lambda self: None
scsi_verify10_cdb_swigregister = _libiscsi.scsi_verify10_cdb_swigregister
scsi_verify10_cdb_swigregister(scsi_verify10_cdb)

class scsi_verify12_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_verify12_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_verify12_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_verify12_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_verify12_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_verify12_cdb_opcode_get, _libiscsi.scsi_verify12_cdb_opcode_set)
    __swig_setmethods__["vrprotect"] = _libiscsi.scsi_verify12_cdb_vrprotect_set
    __swig_getmethods__["vrprotect"] = _libiscsi.scsi_verify12_cdb_vrprotect_get
    if _newclass:
        vrprotect = _swig_property(_libiscsi.scsi_verify12_cdb_vrprotect_get, _libiscsi.scsi_verify12_cdb_vrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_verify12_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_verify12_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_verify12_cdb_dpo_get, _libiscsi.scsi_verify12_cdb_dpo_set)
    __swig_setmethods__["bytchk"] = _libiscsi.scsi_verify12_cdb_bytchk_set
    __swig_getmethods__["bytchk"] = _libiscsi.scsi_verify12_cdb_bytchk_get
    if _newclass:
        bytchk = _swig_property(_libiscsi.scsi_verify12_cdb_bytchk_get, _libiscsi.scsi_verify12_cdb_bytchk_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_verify12_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_verify12_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_verify12_cdb_lba_get, _libiscsi.scsi_verify12_cdb_lba_set)
    __swig_setmethods__["verification_length"] = _libiscsi.scsi_verify12_cdb_verification_length_set
    __swig_getmethods__["verification_length"] = _libiscsi.scsi_verify12_cdb_verification_length_get
    if _newclass:
        verification_length = _swig_property(_libiscsi.scsi_verify12_cdb_verification_length_get, _libiscsi.scsi_verify12_cdb_verification_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_verify12_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_verify12_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_verify12_cdb_group_get, _libiscsi.scsi_verify12_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_verify12_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_verify12_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_verify12_cdb_control_get, _libiscsi.scsi_verify12_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_verify12_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_verify12_cdb
    __del__ = lambda self: None
scsi_verify12_cdb_swigregister = _libiscsi.scsi_verify12_cdb_swigregister
scsi_verify12_cdb_swigregister(scsi_verify12_cdb)

class scsi_verify16_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_verify16_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_verify16_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_verify16_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_verify16_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_verify16_cdb_opcode_get, _libiscsi.scsi_verify16_cdb_opcode_set)
    __swig_setmethods__["vrprotect"] = _libiscsi.scsi_verify16_cdb_vrprotect_set
    __swig_getmethods__["vrprotect"] = _libiscsi.scsi_verify16_cdb_vrprotect_get
    if _newclass:
        vrprotect = _swig_property(_libiscsi.scsi_verify16_cdb_vrprotect_get, _libiscsi.scsi_verify16_cdb_vrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_verify16_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_verify16_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_verify16_cdb_dpo_get, _libiscsi.scsi_verify16_cdb_dpo_set)
    __swig_setmethods__["bytchk"] = _libiscsi.scsi_verify16_cdb_bytchk_set
    __swig_getmethods__["bytchk"] = _libiscsi.scsi_verify16_cdb_bytchk_get
    if _newclass:
        bytchk = _swig_property(_libiscsi.scsi_verify16_cdb_bytchk_get, _libiscsi.scsi_verify16_cdb_bytchk_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_verify16_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_verify16_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_verify16_cdb_lba_get, _libiscsi.scsi_verify16_cdb_lba_set)
    __swig_setmethods__["verification_length"] = _libiscsi.scsi_verify16_cdb_verification_length_set
    __swig_getmethods__["verification_length"] = _libiscsi.scsi_verify16_cdb_verification_length_get
    if _newclass:
        verification_length = _swig_property(_libiscsi.scsi_verify16_cdb_verification_length_get, _libiscsi.scsi_verify16_cdb_verification_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_verify16_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_verify16_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_verify16_cdb_group_get, _libiscsi.scsi_verify16_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_verify16_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_verify16_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_verify16_cdb_control_get, _libiscsi.scsi_verify16_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_verify16_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_verify16_cdb
    __del__ = lambda self: None
scsi_verify16_cdb_swigregister = _libiscsi.scsi_verify16_cdb_swigregister
scsi_verify16_cdb_swigregister(scsi_verify16_cdb)

class scsi_write10_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_write10_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_write10_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_write10_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_write10_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_write10_cdb_opcode_get, _libiscsi.scsi_write10_cdb_opcode_set)
    __swig_setmethods__["wrprotect"] = _libiscsi.scsi_write10_cdb_wrprotect_set
    __swig_getmethods__["wrprotect"] = _libiscsi.scsi_write10_cdb_wrprotect_get
    if _newclass:
        wrprotect = _swig_property(_libiscsi.scsi_write10_cdb_wrprotect_get, _libiscsi.scsi_write10_cdb_wrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_write10_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_write10_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_write10_cdb_dpo_get, _libiscsi.scsi_write10_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_write10_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_write10_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_write10_cdb_fua_get, _libiscsi.scsi_write10_cdb_fua_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_write10_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_write10_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_write10_cdb_fua_nv_get, _libiscsi.scsi_write10_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_write10_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_write10_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_write10_cdb_lba_get, _libiscsi.scsi_write10_cdb_lba_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_write10_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_write10_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_write10_cdb_group_get, _libiscsi.scsi_write10_cdb_group_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_write10_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_write10_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_write10_cdb_transfer_length_get, _libiscsi.scsi_write10_cdb_transfer_length_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_write10_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_write10_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_write10_cdb_control_get, _libiscsi.scsi_write10_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_write10_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_write10_cdb
    __del__ = lambda self: None
scsi_write10_cdb_swigregister = _libiscsi.scsi_write10_cdb_swigregister
scsi_write10_cdb_swigregister(scsi_write10_cdb)

class scsi_write12_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_write12_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_write12_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_write12_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_write12_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_write12_cdb_opcode_get, _libiscsi.scsi_write12_cdb_opcode_set)
    __swig_setmethods__["wrprotect"] = _libiscsi.scsi_write12_cdb_wrprotect_set
    __swig_getmethods__["wrprotect"] = _libiscsi.scsi_write12_cdb_wrprotect_get
    if _newclass:
        wrprotect = _swig_property(_libiscsi.scsi_write12_cdb_wrprotect_get, _libiscsi.scsi_write12_cdb_wrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_write12_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_write12_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_write12_cdb_dpo_get, _libiscsi.scsi_write12_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_write12_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_write12_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_write12_cdb_fua_get, _libiscsi.scsi_write12_cdb_fua_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_write12_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_write12_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_write12_cdb_fua_nv_get, _libiscsi.scsi_write12_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_write12_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_write12_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_write12_cdb_lba_get, _libiscsi.scsi_write12_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_write12_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_write12_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_write12_cdb_transfer_length_get, _libiscsi.scsi_write12_cdb_transfer_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_write12_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_write12_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_write12_cdb_group_get, _libiscsi.scsi_write12_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_write12_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_write12_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_write12_cdb_control_get, _libiscsi.scsi_write12_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_write12_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_write12_cdb
    __del__ = lambda self: None
scsi_write12_cdb_swigregister = _libiscsi.scsi_write12_cdb_swigregister
scsi_write12_cdb_swigregister(scsi_write12_cdb)

class scsi_write16_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_write16_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_write16_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_write16_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_write16_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_write16_cdb_opcode_get, _libiscsi.scsi_write16_cdb_opcode_set)
    __swig_setmethods__["wrprotect"] = _libiscsi.scsi_write16_cdb_wrprotect_set
    __swig_getmethods__["wrprotect"] = _libiscsi.scsi_write16_cdb_wrprotect_get
    if _newclass:
        wrprotect = _swig_property(_libiscsi.scsi_write16_cdb_wrprotect_get, _libiscsi.scsi_write16_cdb_wrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_write16_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_write16_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_write16_cdb_dpo_get, _libiscsi.scsi_write16_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_write16_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_write16_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_write16_cdb_fua_get, _libiscsi.scsi_write16_cdb_fua_set)
    __swig_setmethods__["fua_nv"] = _libiscsi.scsi_write16_cdb_fua_nv_set
    __swig_getmethods__["fua_nv"] = _libiscsi.scsi_write16_cdb_fua_nv_get
    if _newclass:
        fua_nv = _swig_property(_libiscsi.scsi_write16_cdb_fua_nv_get, _libiscsi.scsi_write16_cdb_fua_nv_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_write16_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_write16_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_write16_cdb_lba_get, _libiscsi.scsi_write16_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_write16_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_write16_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_write16_cdb_transfer_length_get, _libiscsi.scsi_write16_cdb_transfer_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_write16_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_write16_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_write16_cdb_group_get, _libiscsi.scsi_write16_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_write16_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_write16_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_write16_cdb_control_get, _libiscsi.scsi_write16_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_write16_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_write16_cdb
    __del__ = lambda self: None
scsi_write16_cdb_swigregister = _libiscsi.scsi_write16_cdb_swigregister
scsi_write16_cdb_swigregister(scsi_write16_cdb)

class scsi_writeatomic16_cdb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_writeatomic16_cdb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_writeatomic16_cdb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["opcode"] = _libiscsi.scsi_writeatomic16_cdb_opcode_set
    __swig_getmethods__["opcode"] = _libiscsi.scsi_writeatomic16_cdb_opcode_get
    if _newclass:
        opcode = _swig_property(_libiscsi.scsi_writeatomic16_cdb_opcode_get, _libiscsi.scsi_writeatomic16_cdb_opcode_set)
    __swig_setmethods__["wrprotect"] = _libiscsi.scsi_writeatomic16_cdb_wrprotect_set
    __swig_getmethods__["wrprotect"] = _libiscsi.scsi_writeatomic16_cdb_wrprotect_get
    if _newclass:
        wrprotect = _swig_property(_libiscsi.scsi_writeatomic16_cdb_wrprotect_get, _libiscsi.scsi_writeatomic16_cdb_wrprotect_set)
    __swig_setmethods__["dpo"] = _libiscsi.scsi_writeatomic16_cdb_dpo_set
    __swig_getmethods__["dpo"] = _libiscsi.scsi_writeatomic16_cdb_dpo_get
    if _newclass:
        dpo = _swig_property(_libiscsi.scsi_writeatomic16_cdb_dpo_get, _libiscsi.scsi_writeatomic16_cdb_dpo_set)
    __swig_setmethods__["fua"] = _libiscsi.scsi_writeatomic16_cdb_fua_set
    __swig_getmethods__["fua"] = _libiscsi.scsi_writeatomic16_cdb_fua_get
    if _newclass:
        fua = _swig_property(_libiscsi.scsi_writeatomic16_cdb_fua_get, _libiscsi.scsi_writeatomic16_cdb_fua_set)
    __swig_setmethods__["lba"] = _libiscsi.scsi_writeatomic16_cdb_lba_set
    __swig_getmethods__["lba"] = _libiscsi.scsi_writeatomic16_cdb_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.scsi_writeatomic16_cdb_lba_get, _libiscsi.scsi_writeatomic16_cdb_lba_set)
    __swig_setmethods__["transfer_length"] = _libiscsi.scsi_writeatomic16_cdb_transfer_length_set
    __swig_getmethods__["transfer_length"] = _libiscsi.scsi_writeatomic16_cdb_transfer_length_get
    if _newclass:
        transfer_length = _swig_property(_libiscsi.scsi_writeatomic16_cdb_transfer_length_get, _libiscsi.scsi_writeatomic16_cdb_transfer_length_set)
    __swig_setmethods__["group"] = _libiscsi.scsi_writeatomic16_cdb_group_set
    __swig_getmethods__["group"] = _libiscsi.scsi_writeatomic16_cdb_group_get
    if _newclass:
        group = _swig_property(_libiscsi.scsi_writeatomic16_cdb_group_get, _libiscsi.scsi_writeatomic16_cdb_group_set)
    __swig_setmethods__["control"] = _libiscsi.scsi_writeatomic16_cdb_control_set
    __swig_getmethods__["control"] = _libiscsi.scsi_writeatomic16_cdb_control_get
    if _newclass:
        control = _swig_property(_libiscsi.scsi_writeatomic16_cdb_control_get, _libiscsi.scsi_writeatomic16_cdb_control_set)

    def __init__(self):
        this = _libiscsi.new_scsi_writeatomic16_cdb()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_writeatomic16_cdb
    __del__ = lambda self: None
scsi_writeatomic16_cdb_swigregister = _libiscsi.scsi_writeatomic16_cdb_swigregister
scsi_writeatomic16_cdb_swigregister(scsi_writeatomic16_cdb)


def scsi_datain_getfullsize(task: 'scsi_task') -> "int":
    return _libiscsi.scsi_datain_getfullsize(task)
scsi_datain_getfullsize = _libiscsi.scsi_datain_getfullsize

def scsi_cdb_unmarshall(task: 'scsi_task', opcode: 'enum scsi_opcode') -> "void *":
    return _libiscsi.scsi_cdb_unmarshall(task, opcode)
scsi_cdb_unmarshall = _libiscsi.scsi_cdb_unmarshall

def scsi_parse_sense_data(sense: 'scsi_sense', sb: 'uint8_t const *') -> "void":
    return _libiscsi.scsi_parse_sense_data(sense, sb)
scsi_parse_sense_data = _libiscsi.scsi_parse_sense_data

def scsi_cdb_compareandwrite(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_compareandwrite(lba, xferlen, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_compareandwrite = _libiscsi.scsi_cdb_compareandwrite

def scsi_cdb_get_lba_status(starting_lba: 'uint64_t', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_get_lba_status(starting_lba, alloc_len)
scsi_cdb_get_lba_status = _libiscsi.scsi_cdb_get_lba_status

def scsi_cdb_orwrite(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_orwrite(lba, xferlen, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_orwrite = _libiscsi.scsi_cdb_orwrite

def scsi_cdb_persistent_reserve_in(sa: 'enum scsi_persistent_in_sa', xferlen: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_persistent_reserve_in(sa, xferlen)
scsi_cdb_persistent_reserve_in = _libiscsi.scsi_cdb_persistent_reserve_in

def scsi_cdb_persistent_reserve_out(sa: 'enum scsi_persistent_out_sa', scope: 'enum scsi_persistent_out_scope', type: 'enum scsi_persistent_out_type', params: 'void *') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_persistent_reserve_out(sa, scope, type, params)
scsi_cdb_persistent_reserve_out = _libiscsi.scsi_cdb_persistent_reserve_out

def scsi_cdb_prefetch10(lba: 'uint32_t', num_blocks: 'int', immed: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_prefetch10(lba, num_blocks, immed, group)
scsi_cdb_prefetch10 = _libiscsi.scsi_cdb_prefetch10

def scsi_cdb_prefetch16(lba: 'uint64_t', num_blocks: 'int', immed: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_prefetch16(lba, num_blocks, immed, group)
scsi_cdb_prefetch16 = _libiscsi.scsi_cdb_prefetch16

def scsi_cdb_preventallow(prevent: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_preventallow(prevent)
scsi_cdb_preventallow = _libiscsi.scsi_cdb_preventallow

def scsi_cdb_read6(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_read6(lba, xferlen, blocksize)
scsi_cdb_read6 = _libiscsi.scsi_cdb_read6

def scsi_cdb_read10(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_read10(lba, xferlen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_read10 = _libiscsi.scsi_cdb_read10

def scsi_cdb_read12(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_read12(lba, xferlen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_read12 = _libiscsi.scsi_cdb_read12

def scsi_cdb_read16(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_read16(lba, xferlen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_read16 = _libiscsi.scsi_cdb_read16

def scsi_cdb_readcapacity16() -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_readcapacity16()
scsi_cdb_readcapacity16 = _libiscsi.scsi_cdb_readcapacity16

def scsi_cdb_readdefectdata10(req_plist: 'int', req_glist: 'int', defect_list_format: 'int', alloc_len: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_readdefectdata10(req_plist, req_glist, defect_list_format, alloc_len)
scsi_cdb_readdefectdata10 = _libiscsi.scsi_cdb_readdefectdata10

def scsi_cdb_readdefectdata12(req_plist: 'int', req_glist: 'int', defect_list_format: 'int', address_descriptor_index: 'uint32_t', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_readdefectdata12(req_plist, req_glist, defect_list_format, address_descriptor_index, alloc_len)
scsi_cdb_readdefectdata12 = _libiscsi.scsi_cdb_readdefectdata12

def scsi_cdb_report_supported_opcodes(rctd: 'int', options: 'int', opcode: 'enum scsi_opcode', sa: 'int', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_report_supported_opcodes(rctd, options, opcode, sa, alloc_len)
scsi_cdb_report_supported_opcodes = _libiscsi.scsi_cdb_report_supported_opcodes

def scsi_cdb_serviceactionin16(sa: 'enum scsi_service_action_in', xferlen: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_serviceactionin16(sa, xferlen)
scsi_cdb_serviceactionin16 = _libiscsi.scsi_cdb_serviceactionin16

def scsi_cdb_startstopunit(immed: 'int', pcm: 'int', pc: 'int', no_flush: 'int', loej: 'int', start: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_startstopunit(immed, pcm, pc, no_flush, loej, start)
scsi_cdb_startstopunit = _libiscsi.scsi_cdb_startstopunit

def scsi_cdb_synchronizecache10(lba: 'int', num_blocks: 'int', syncnv: 'int', immed: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_synchronizecache10(lba, num_blocks, syncnv, immed)
scsi_cdb_synchronizecache10 = _libiscsi.scsi_cdb_synchronizecache10

def scsi_cdb_synchronizecache16(lba: 'uint64_t', num_blocks: 'uint32_t', syncnv: 'int', immed: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_synchronizecache16(lba, num_blocks, syncnv, immed)
scsi_cdb_synchronizecache16 = _libiscsi.scsi_cdb_synchronizecache16

def scsi_cdb_unmap(anchor: 'int', group: 'int', xferlen: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_unmap(anchor, group, xferlen)
scsi_cdb_unmap = _libiscsi.scsi_cdb_unmap

def scsi_cdb_verify10(lba: 'uint32_t', xferlen: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_verify10(lba, xferlen, vprotect, dpo, bytchk, blocksize)
scsi_cdb_verify10 = _libiscsi.scsi_cdb_verify10

def scsi_cdb_verify12(lba: 'uint32_t', xferlen: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_verify12(lba, xferlen, vprotect, dpo, bytchk, blocksize)
scsi_cdb_verify12 = _libiscsi.scsi_cdb_verify12

def scsi_cdb_verify16(lba: 'uint64_t', xferlen: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_verify16(lba, xferlen, vprotect, dpo, bytchk, blocksize)
scsi_cdb_verify16 = _libiscsi.scsi_cdb_verify16

def scsi_cdb_write10(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_write10(lba, xferlen, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_write10 = _libiscsi.scsi_cdb_write10

def scsi_cdb_write12(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_write12(lba, xferlen, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_write12 = _libiscsi.scsi_cdb_write12

def scsi_cdb_write16(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_write16(lba, xferlen, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
scsi_cdb_write16 = _libiscsi.scsi_cdb_write16

def scsi_cdb_writeatomic16(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writeatomic16(lba, xferlen, blocksize, wrprotect, dpo, fua, group_number)
scsi_cdb_writeatomic16 = _libiscsi.scsi_cdb_writeatomic16

def scsi_cdb_writesame10(wrprotect: 'int', anchor: 'int', unmap: 'int', lba: 'uint32_t', group: 'int', num_blocks: 'uint16_t', datalen: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writesame10(wrprotect, anchor, unmap, lba, group, num_blocks, datalen)
scsi_cdb_writesame10 = _libiscsi.scsi_cdb_writesame10

def scsi_cdb_writesame16(wrprotect: 'int', anchor: 'int', unmap: 'int', lba: 'uint64_t', group: 'int', num_blocks: 'uint32_t', datalen: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writesame16(wrprotect, anchor, unmap, lba, group, num_blocks, datalen)
scsi_cdb_writesame16 = _libiscsi.scsi_cdb_writesame16

def scsi_cdb_writeverify10(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writeverify10(lba, xferlen, blocksize, wrprotect, dpo, bytchk, group_number)
scsi_cdb_writeverify10 = _libiscsi.scsi_cdb_writeverify10

def scsi_cdb_writeverify12(lba: 'uint32_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writeverify12(lba, xferlen, blocksize, wrprotect, dpo, bytchk, group_number)
scsi_cdb_writeverify12 = _libiscsi.scsi_cdb_writeverify12

def scsi_cdb_writeverify16(lba: 'uint64_t', xferlen: 'uint32_t', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_writeverify16(lba, xferlen, blocksize, wrprotect, dpo, bytchk, group_number)
scsi_cdb_writeverify16 = _libiscsi.scsi_cdb_writeverify16
XCOPY_DESC_OFFSET = _libiscsi.XCOPY_DESC_OFFSET
SEG_DESC_SRC_INDEX_OFFSET = _libiscsi.SEG_DESC_SRC_INDEX_OFFSET
LIST_ID_USAGE_HOLD = _libiscsi.LIST_ID_USAGE_HOLD
LIST_ID_USAGE_DISCARD = _libiscsi.LIST_ID_USAGE_DISCARD
LIST_ID_USAGE_DISABLE = _libiscsi.LIST_ID_USAGE_DISABLE
BLK_TO_STRM_SEG_DESCR = _libiscsi.BLK_TO_STRM_SEG_DESCR
STRM_TO_BLK_SEG_DESCR = _libiscsi.STRM_TO_BLK_SEG_DESCR
BLK_TO_BLK_SEG_DESCR = _libiscsi.BLK_TO_BLK_SEG_DESCR
STRM_TO_STRM_SEG_DESCR = _libiscsi.STRM_TO_STRM_SEG_DESCR
IDENT_DESCR_TGT_DESCR = _libiscsi.IDENT_DESCR_TGT_DESCR
IPV4_TGT_DESCR = _libiscsi.IPV4_TGT_DESCR
IPV6_TGT_DESCR = _libiscsi.IPV6_TGT_DESCR
IP_COPY_SVC_TGT_DESCR = _libiscsi.IP_COPY_SVC_TGT_DESCR
LU_ID_TYPE_LUN = _libiscsi.LU_ID_TYPE_LUN
LU_ID_TYPE_PROXY_TOKEN = _libiscsi.LU_ID_TYPE_PROXY_TOKEN
LU_ID_TYPE_RSVD = _libiscsi.LU_ID_TYPE_RSVD
LU_ID_TYPE_RSVD1 = _libiscsi.LU_ID_TYPE_RSVD1

def scsi_cdb_extended_copy(immed: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_extended_copy(immed)
scsi_cdb_extended_copy = _libiscsi.scsi_cdb_extended_copy
SCSI_COPY_RESULTS_COPY_STATUS = _libiscsi.SCSI_COPY_RESULTS_COPY_STATUS
SCSI_COPY_RESULTS_RECEIVE_DATA = _libiscsi.SCSI_COPY_RESULTS_RECEIVE_DATA
SCSI_COPY_RESULTS_OP_PARAMS = _libiscsi.SCSI_COPY_RESULTS_OP_PARAMS
SCSI_COPY_RESULTS_FAILED_SEGMENT = _libiscsi.SCSI_COPY_RESULTS_FAILED_SEGMENT

def scsi_cdb_receive_copy_results(sa: 'enum scsi_copy_results_sa', list_id: 'int', xferlen: 'int') -> "struct scsi_task *":
    return _libiscsi.scsi_cdb_receive_copy_results(sa, list_id, xferlen)
scsi_cdb_receive_copy_results = _libiscsi.scsi_cdb_receive_copy_results
class scsi_copy_results_copy_status(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_copy_results_copy_status, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_copy_results_copy_status, name)
    __repr__ = _swig_repr
    __swig_setmethods__["available_data"] = _libiscsi.scsi_copy_results_copy_status_available_data_set
    __swig_getmethods__["available_data"] = _libiscsi.scsi_copy_results_copy_status_available_data_get
    if _newclass:
        available_data = _swig_property(_libiscsi.scsi_copy_results_copy_status_available_data_get, _libiscsi.scsi_copy_results_copy_status_available_data_set)
    __swig_setmethods__["copy_manager_status"] = _libiscsi.scsi_copy_results_copy_status_copy_manager_status_set
    __swig_getmethods__["copy_manager_status"] = _libiscsi.scsi_copy_results_copy_status_copy_manager_status_get
    if _newclass:
        copy_manager_status = _swig_property(_libiscsi.scsi_copy_results_copy_status_copy_manager_status_get, _libiscsi.scsi_copy_results_copy_status_copy_manager_status_set)
    __swig_setmethods__["hdd"] = _libiscsi.scsi_copy_results_copy_status_hdd_set
    __swig_getmethods__["hdd"] = _libiscsi.scsi_copy_results_copy_status_hdd_get
    if _newclass:
        hdd = _swig_property(_libiscsi.scsi_copy_results_copy_status_hdd_get, _libiscsi.scsi_copy_results_copy_status_hdd_set)
    __swig_setmethods__["segments_processed"] = _libiscsi.scsi_copy_results_copy_status_segments_processed_set
    __swig_getmethods__["segments_processed"] = _libiscsi.scsi_copy_results_copy_status_segments_processed_get
    if _newclass:
        segments_processed = _swig_property(_libiscsi.scsi_copy_results_copy_status_segments_processed_get, _libiscsi.scsi_copy_results_copy_status_segments_processed_set)
    __swig_setmethods__["transfer_count_units"] = _libiscsi.scsi_copy_results_copy_status_transfer_count_units_set
    __swig_getmethods__["transfer_count_units"] = _libiscsi.scsi_copy_results_copy_status_transfer_count_units_get
    if _newclass:
        transfer_count_units = _swig_property(_libiscsi.scsi_copy_results_copy_status_transfer_count_units_get, _libiscsi.scsi_copy_results_copy_status_transfer_count_units_set)
    __swig_setmethods__["transfer_count"] = _libiscsi.scsi_copy_results_copy_status_transfer_count_set
    __swig_getmethods__["transfer_count"] = _libiscsi.scsi_copy_results_copy_status_transfer_count_get
    if _newclass:
        transfer_count = _swig_property(_libiscsi.scsi_copy_results_copy_status_transfer_count_get, _libiscsi.scsi_copy_results_copy_status_transfer_count_set)

    def __init__(self):
        this = _libiscsi.new_scsi_copy_results_copy_status()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_copy_results_copy_status
    __del__ = lambda self: None
scsi_copy_results_copy_status_swigregister = _libiscsi.scsi_copy_results_copy_status_swigregister
scsi_copy_results_copy_status_swigregister(scsi_copy_results_copy_status)

class scsi_copy_results_op_params(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, scsi_copy_results_op_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, scsi_copy_results_op_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["available_data"] = _libiscsi.scsi_copy_results_op_params_available_data_set
    __swig_getmethods__["available_data"] = _libiscsi.scsi_copy_results_op_params_available_data_get
    if _newclass:
        available_data = _swig_property(_libiscsi.scsi_copy_results_op_params_available_data_get, _libiscsi.scsi_copy_results_op_params_available_data_set)
    __swig_setmethods__["max_target_desc_count"] = _libiscsi.scsi_copy_results_op_params_max_target_desc_count_set
    __swig_getmethods__["max_target_desc_count"] = _libiscsi.scsi_copy_results_op_params_max_target_desc_count_get
    if _newclass:
        max_target_desc_count = _swig_property(_libiscsi.scsi_copy_results_op_params_max_target_desc_count_get, _libiscsi.scsi_copy_results_op_params_max_target_desc_count_set)
    __swig_setmethods__["max_segment_desc_count"] = _libiscsi.scsi_copy_results_op_params_max_segment_desc_count_set
    __swig_getmethods__["max_segment_desc_count"] = _libiscsi.scsi_copy_results_op_params_max_segment_desc_count_get
    if _newclass:
        max_segment_desc_count = _swig_property(_libiscsi.scsi_copy_results_op_params_max_segment_desc_count_get, _libiscsi.scsi_copy_results_op_params_max_segment_desc_count_set)
    __swig_setmethods__["max_desc_list_length"] = _libiscsi.scsi_copy_results_op_params_max_desc_list_length_set
    __swig_getmethods__["max_desc_list_length"] = _libiscsi.scsi_copy_results_op_params_max_desc_list_length_get
    if _newclass:
        max_desc_list_length = _swig_property(_libiscsi.scsi_copy_results_op_params_max_desc_list_length_get, _libiscsi.scsi_copy_results_op_params_max_desc_list_length_set)
    __swig_setmethods__["max_segment_length"] = _libiscsi.scsi_copy_results_op_params_max_segment_length_set
    __swig_getmethods__["max_segment_length"] = _libiscsi.scsi_copy_results_op_params_max_segment_length_get
    if _newclass:
        max_segment_length = _swig_property(_libiscsi.scsi_copy_results_op_params_max_segment_length_get, _libiscsi.scsi_copy_results_op_params_max_segment_length_set)
    __swig_setmethods__["max_inline_data_length"] = _libiscsi.scsi_copy_results_op_params_max_inline_data_length_set
    __swig_getmethods__["max_inline_data_length"] = _libiscsi.scsi_copy_results_op_params_max_inline_data_length_get
    if _newclass:
        max_inline_data_length = _swig_property(_libiscsi.scsi_copy_results_op_params_max_inline_data_length_get, _libiscsi.scsi_copy_results_op_params_max_inline_data_length_set)
    __swig_setmethods__["held_data_limit"] = _libiscsi.scsi_copy_results_op_params_held_data_limit_set
    __swig_getmethods__["held_data_limit"] = _libiscsi.scsi_copy_results_op_params_held_data_limit_get
    if _newclass:
        held_data_limit = _swig_property(_libiscsi.scsi_copy_results_op_params_held_data_limit_get, _libiscsi.scsi_copy_results_op_params_held_data_limit_set)
    __swig_setmethods__["max_stream_device_transfer_size"] = _libiscsi.scsi_copy_results_op_params_max_stream_device_transfer_size_set
    __swig_getmethods__["max_stream_device_transfer_size"] = _libiscsi.scsi_copy_results_op_params_max_stream_device_transfer_size_get
    if _newclass:
        max_stream_device_transfer_size = _swig_property(_libiscsi.scsi_copy_results_op_params_max_stream_device_transfer_size_get, _libiscsi.scsi_copy_results_op_params_max_stream_device_transfer_size_set)
    __swig_setmethods__["total_concurrent_copies"] = _libiscsi.scsi_copy_results_op_params_total_concurrent_copies_set
    __swig_getmethods__["total_concurrent_copies"] = _libiscsi.scsi_copy_results_op_params_total_concurrent_copies_get
    if _newclass:
        total_concurrent_copies = _swig_property(_libiscsi.scsi_copy_results_op_params_total_concurrent_copies_get, _libiscsi.scsi_copy_results_op_params_total_concurrent_copies_set)
    __swig_setmethods__["max_concurrent_copies"] = _libiscsi.scsi_copy_results_op_params_max_concurrent_copies_set
    __swig_getmethods__["max_concurrent_copies"] = _libiscsi.scsi_copy_results_op_params_max_concurrent_copies_get
    if _newclass:
        max_concurrent_copies = _swig_property(_libiscsi.scsi_copy_results_op_params_max_concurrent_copies_get, _libiscsi.scsi_copy_results_op_params_max_concurrent_copies_set)
    __swig_setmethods__["data_segment_granularity"] = _libiscsi.scsi_copy_results_op_params_data_segment_granularity_set
    __swig_getmethods__["data_segment_granularity"] = _libiscsi.scsi_copy_results_op_params_data_segment_granularity_get
    if _newclass:
        data_segment_granularity = _swig_property(_libiscsi.scsi_copy_results_op_params_data_segment_granularity_get, _libiscsi.scsi_copy_results_op_params_data_segment_granularity_set)
    __swig_setmethods__["inline_data_granularity"] = _libiscsi.scsi_copy_results_op_params_inline_data_granularity_set
    __swig_getmethods__["inline_data_granularity"] = _libiscsi.scsi_copy_results_op_params_inline_data_granularity_get
    if _newclass:
        inline_data_granularity = _swig_property(_libiscsi.scsi_copy_results_op_params_inline_data_granularity_get, _libiscsi.scsi_copy_results_op_params_inline_data_granularity_set)
    __swig_setmethods__["held_data_granularity"] = _libiscsi.scsi_copy_results_op_params_held_data_granularity_set
    __swig_getmethods__["held_data_granularity"] = _libiscsi.scsi_copy_results_op_params_held_data_granularity_get
    if _newclass:
        held_data_granularity = _swig_property(_libiscsi.scsi_copy_results_op_params_held_data_granularity_get, _libiscsi.scsi_copy_results_op_params_held_data_granularity_set)
    __swig_setmethods__["impl_desc_list_length"] = _libiscsi.scsi_copy_results_op_params_impl_desc_list_length_set
    __swig_getmethods__["impl_desc_list_length"] = _libiscsi.scsi_copy_results_op_params_impl_desc_list_length_get
    if _newclass:
        impl_desc_list_length = _swig_property(_libiscsi.scsi_copy_results_op_params_impl_desc_list_length_get, _libiscsi.scsi_copy_results_op_params_impl_desc_list_length_set)
    __swig_setmethods__["imp_desc_type_codes"] = _libiscsi.scsi_copy_results_op_params_imp_desc_type_codes_set
    __swig_getmethods__["imp_desc_type_codes"] = _libiscsi.scsi_copy_results_op_params_imp_desc_type_codes_get
    if _newclass:
        imp_desc_type_codes = _swig_property(_libiscsi.scsi_copy_results_op_params_imp_desc_type_codes_get, _libiscsi.scsi_copy_results_op_params_imp_desc_type_codes_set)

    def __init__(self):
        this = _libiscsi.new_scsi_copy_results_op_params()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_scsi_copy_results_op_params
    __del__ = lambda self: None
scsi_copy_results_op_params_swigregister = _libiscsi.scsi_copy_results_op_params_swigregister
scsi_copy_results_op_params_swigregister(scsi_copy_results_op_params)


def scsi_malloc(task: 'scsi_task', size: 'size_t') -> "void *":
    return _libiscsi.scsi_malloc(task, size)
scsi_malloc = _libiscsi.scsi_malloc

def scsi_get_uint64(c: 'unsigned char const *') -> "uint64_t":
    return _libiscsi.scsi_get_uint64(c)
scsi_get_uint64 = _libiscsi.scsi_get_uint64

def scsi_get_uint32(c: 'unsigned char const *') -> "uint32_t":
    return _libiscsi.scsi_get_uint32(c)
scsi_get_uint32 = _libiscsi.scsi_get_uint32

def scsi_get_uint16(c: 'unsigned char const *') -> "uint16_t":
    return _libiscsi.scsi_get_uint16(c)
scsi_get_uint16 = _libiscsi.scsi_get_uint16

def scsi_set_uint64(c: 'unsigned char *', val: 'uint64_t') -> "void":
    return _libiscsi.scsi_set_uint64(c, val)
scsi_set_uint64 = _libiscsi.scsi_set_uint64

def scsi_set_uint32(c: 'unsigned char *', val: 'uint32_t') -> "void":
    return _libiscsi.scsi_set_uint32(c, val)
scsi_set_uint32 = _libiscsi.scsi_set_uint32

def scsi_set_uint16(c: 'unsigned char *', val: 'uint16_t') -> "void":
    return _libiscsi.scsi_set_uint16(c, val)
scsi_set_uint16 = _libiscsi.scsi_set_uint16
LIBISCSI_API_VERSION = _libiscsi.LIBISCSI_API_VERSION
LIBISCSI_FEATURE_IOVECTOR = _libiscsi.LIBISCSI_FEATURE_IOVECTOR
LIBISCSI_FEATURE_NOP_COUNTER = _libiscsi.LIBISCSI_FEATURE_NOP_COUNTER
LIBISCSI_FEATURE_ISER = _libiscsi.LIBISCSI_FEATURE_ISER
MAX_STRING_SIZE = _libiscsi.MAX_STRING_SIZE
ISCSI_URL_SYNTAX = _libiscsi.ISCSI_URL_SYNTAX
ISCSI_PORTAL_URL_SYNTAX = _libiscsi.ISCSI_PORTAL_URL_SYNTAX
TCP_TRANSPORT = _libiscsi.TCP_TRANSPORT
ISER_TRANSPORT = _libiscsi.ISER_TRANSPORT

def iscsi_set_cache_allocations(iscsi: 'struct iscsi_context *', ca: 'int') -> "void":
    return _libiscsi.iscsi_set_cache_allocations(iscsi, ca)
iscsi_set_cache_allocations = _libiscsi.iscsi_set_cache_allocations

def iscsi_get_fd(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_get_fd(iscsi)
iscsi_get_fd = _libiscsi.iscsi_get_fd

def iscsi_which_events(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_which_events(iscsi)
iscsi_which_events = _libiscsi.iscsi_which_events

def iscsi_service(iscsi: 'struct iscsi_context *', revents: 'int') -> "int":
    return _libiscsi.iscsi_service(iscsi, revents)
iscsi_service = _libiscsi.iscsi_service

def iscsi_queue_length(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_queue_length(iscsi)
iscsi_queue_length = _libiscsi.iscsi_queue_length

def iscsi_out_queue_length(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_out_queue_length(iscsi)
iscsi_out_queue_length = _libiscsi.iscsi_out_queue_length

def iscsi_set_timeout(iscsi: 'struct iscsi_context *', timeout: 'int') -> "int":
    return _libiscsi.iscsi_set_timeout(iscsi, timeout)
iscsi_set_timeout = _libiscsi.iscsi_set_timeout

def iscsi_set_tcp_keepalive(iscsi: 'struct iscsi_context *', idle: 'int', count: 'int', interval: 'int') -> "int":
    return _libiscsi.iscsi_set_tcp_keepalive(iscsi, idle, count, interval)
iscsi_set_tcp_keepalive = _libiscsi.iscsi_set_tcp_keepalive
class iscsi_url(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_url, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_url, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portal"] = _libiscsi.iscsi_url_portal_set
    __swig_getmethods__["portal"] = _libiscsi.iscsi_url_portal_get
    if _newclass:
        portal = _swig_property(_libiscsi.iscsi_url_portal_get, _libiscsi.iscsi_url_portal_set)
    __swig_setmethods__["target"] = _libiscsi.iscsi_url_target_set
    __swig_getmethods__["target"] = _libiscsi.iscsi_url_target_get
    if _newclass:
        target = _swig_property(_libiscsi.iscsi_url_target_get, _libiscsi.iscsi_url_target_set)
    __swig_setmethods__["user"] = _libiscsi.iscsi_url_user_set
    __swig_getmethods__["user"] = _libiscsi.iscsi_url_user_get
    if _newclass:
        user = _swig_property(_libiscsi.iscsi_url_user_get, _libiscsi.iscsi_url_user_set)
    __swig_setmethods__["passwd"] = _libiscsi.iscsi_url_passwd_set
    __swig_getmethods__["passwd"] = _libiscsi.iscsi_url_passwd_get
    if _newclass:
        passwd = _swig_property(_libiscsi.iscsi_url_passwd_get, _libiscsi.iscsi_url_passwd_set)
    __swig_setmethods__["target_user"] = _libiscsi.iscsi_url_target_user_set
    __swig_getmethods__["target_user"] = _libiscsi.iscsi_url_target_user_get
    if _newclass:
        target_user = _swig_property(_libiscsi.iscsi_url_target_user_get, _libiscsi.iscsi_url_target_user_set)
    __swig_setmethods__["target_passwd"] = _libiscsi.iscsi_url_target_passwd_set
    __swig_getmethods__["target_passwd"] = _libiscsi.iscsi_url_target_passwd_get
    if _newclass:
        target_passwd = _swig_property(_libiscsi.iscsi_url_target_passwd_get, _libiscsi.iscsi_url_target_passwd_set)
    __swig_setmethods__["lun"] = _libiscsi.iscsi_url_lun_set
    __swig_getmethods__["lun"] = _libiscsi.iscsi_url_lun_get
    if _newclass:
        lun = _swig_property(_libiscsi.iscsi_url_lun_get, _libiscsi.iscsi_url_lun_set)
    __swig_setmethods__["iscsi"] = _libiscsi.iscsi_url_iscsi_set
    __swig_getmethods__["iscsi"] = _libiscsi.iscsi_url_iscsi_get
    if _newclass:
        iscsi = _swig_property(_libiscsi.iscsi_url_iscsi_get, _libiscsi.iscsi_url_iscsi_set)
    __swig_setmethods__["transport"] = _libiscsi.iscsi_url_transport_set
    __swig_getmethods__["transport"] = _libiscsi.iscsi_url_transport_get
    if _newclass:
        transport = _swig_property(_libiscsi.iscsi_url_transport_get, _libiscsi.iscsi_url_transport_set)

    def __init__(self):
        this = _libiscsi.new_iscsi_url()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_url
    __del__ = lambda self: None
iscsi_url_swigregister = _libiscsi.iscsi_url_swigregister
iscsi_url_swigregister(iscsi_url)

ISCSI_IMMEDIATE_DATA_NO = _libiscsi.ISCSI_IMMEDIATE_DATA_NO
ISCSI_IMMEDIATE_DATA_YES = _libiscsi.ISCSI_IMMEDIATE_DATA_YES

def iscsi_set_immediate_data(iscsi: 'struct iscsi_context *', immediate_data: 'enum iscsi_immediate_data') -> "int":
    return _libiscsi.iscsi_set_immediate_data(iscsi, immediate_data)
iscsi_set_immediate_data = _libiscsi.iscsi_set_immediate_data
ISCSI_INITIAL_R2T_NO = _libiscsi.ISCSI_INITIAL_R2T_NO
ISCSI_INITIAL_R2T_YES = _libiscsi.ISCSI_INITIAL_R2T_YES

def iscsi_set_initial_r2t(iscsi: 'struct iscsi_context *', initial_r2t: 'enum iscsi_initial_r2t') -> "int":
    return _libiscsi.iscsi_set_initial_r2t(iscsi, initial_r2t)
iscsi_set_initial_r2t = _libiscsi.iscsi_set_initial_r2t

def iscsi_parse_full_url(iscsi: 'struct iscsi_context *', url: 'char const *') -> "struct iscsi_url *":
    return _libiscsi.iscsi_parse_full_url(iscsi, url)
iscsi_parse_full_url = _libiscsi.iscsi_parse_full_url

def iscsi_destroy_url(iscsi_url: 'iscsi_url') -> "void":
    return _libiscsi.iscsi_destroy_url(iscsi_url)
iscsi_destroy_url = _libiscsi.iscsi_destroy_url

def iscsi_parse_portal_url(iscsi: 'struct iscsi_context *', url: 'char const *') -> "struct iscsi_url *":
    return _libiscsi.iscsi_parse_portal_url(iscsi, url)
iscsi_parse_portal_url = _libiscsi.iscsi_parse_portal_url

def iscsi_get_error(iscsi: 'struct iscsi_context *') -> "char const *":
    return _libiscsi.iscsi_get_error(iscsi)
iscsi_get_error = _libiscsi.iscsi_get_error

def iscsi_create_context(initiator_name: 'char const *') -> "struct iscsi_context *":
    return _libiscsi.iscsi_create_context(initiator_name)
iscsi_create_context = _libiscsi.iscsi_create_context

def iscsi_destroy_context(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_destroy_context(iscsi)
iscsi_destroy_context = _libiscsi.iscsi_destroy_context

def iscsi_init_transport(iscsi: 'struct iscsi_context *', transport: 'enum iscsi_transport_type') -> "int":
    return _libiscsi.iscsi_init_transport(iscsi, transport)
iscsi_init_transport = _libiscsi.iscsi_init_transport

def iscsi_set_alias(iscsi: 'struct iscsi_context *', alias: 'char const *') -> "int":
    return _libiscsi.iscsi_set_alias(iscsi, alias)
iscsi_set_alias = _libiscsi.iscsi_set_alias

def iscsi_set_targetname(iscsi: 'struct iscsi_context *', targetname: 'char const *') -> "int":
    return _libiscsi.iscsi_set_targetname(iscsi, targetname)
iscsi_set_targetname = _libiscsi.iscsi_set_targetname

def iscsi_get_target_address(iscsi: 'struct iscsi_context *') -> "char const *":
    return _libiscsi.iscsi_get_target_address(iscsi)
iscsi_get_target_address = _libiscsi.iscsi_get_target_address
ISCSI_SESSION_DISCOVERY = _libiscsi.ISCSI_SESSION_DISCOVERY
ISCSI_SESSION_NORMAL = _libiscsi.ISCSI_SESSION_NORMAL

def iscsi_set_session_type(iscsi: 'struct iscsi_context *', session_type: 'enum iscsi_session_type') -> "int":
    return _libiscsi.iscsi_set_session_type(iscsi, session_type)
iscsi_set_session_type = _libiscsi.iscsi_set_session_type
ISCSI_HEADER_DIGEST_NONE = _libiscsi.ISCSI_HEADER_DIGEST_NONE
ISCSI_HEADER_DIGEST_NONE_CRC32C = _libiscsi.ISCSI_HEADER_DIGEST_NONE_CRC32C
ISCSI_HEADER_DIGEST_CRC32C_NONE = _libiscsi.ISCSI_HEADER_DIGEST_CRC32C_NONE
ISCSI_HEADER_DIGEST_CRC32C = _libiscsi.ISCSI_HEADER_DIGEST_CRC32C
ISCSI_HEADER_DIGEST_LAST = _libiscsi.ISCSI_HEADER_DIGEST_LAST

def iscsi_set_header_digest(iscsi: 'struct iscsi_context *', header_digest: 'enum iscsi_header_digest') -> "int":
    return _libiscsi.iscsi_set_header_digest(iscsi, header_digest)
iscsi_set_header_digest = _libiscsi.iscsi_set_header_digest

def iscsi_set_initiator_username_pwd(iscsi: 'struct iscsi_context *', user: 'char const *', passwd: 'char const *') -> "int":
    return _libiscsi.iscsi_set_initiator_username_pwd(iscsi, user, passwd)
iscsi_set_initiator_username_pwd = _libiscsi.iscsi_set_initiator_username_pwd

def iscsi_set_target_username_pwd(iscsi: 'struct iscsi_context *', user: 'char const *', passwd: 'char const *') -> "int":
    return _libiscsi.iscsi_set_target_username_pwd(iscsi, user, passwd)
iscsi_set_target_username_pwd = _libiscsi.iscsi_set_target_username_pwd

def iscsi_is_logged_in(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_is_logged_in(iscsi)
iscsi_is_logged_in = _libiscsi.iscsi_is_logged_in
SCSI_STATUS_GOOD = _libiscsi.SCSI_STATUS_GOOD
SCSI_STATUS_CHECK_CONDITION = _libiscsi.SCSI_STATUS_CHECK_CONDITION
SCSI_STATUS_CONDITION_MET = _libiscsi.SCSI_STATUS_CONDITION_MET
SCSI_STATUS_BUSY = _libiscsi.SCSI_STATUS_BUSY
SCSI_STATUS_RESERVATION_CONFLICT = _libiscsi.SCSI_STATUS_RESERVATION_CONFLICT
SCSI_STATUS_TASK_SET_FULL = _libiscsi.SCSI_STATUS_TASK_SET_FULL
SCSI_STATUS_ACA_ACTIVE = _libiscsi.SCSI_STATUS_ACA_ACTIVE
SCSI_STATUS_TASK_ABORTED = _libiscsi.SCSI_STATUS_TASK_ABORTED
SCSI_STATUS_REDIRECT = _libiscsi.SCSI_STATUS_REDIRECT
SCSI_STATUS_CANCELLED = _libiscsi.SCSI_STATUS_CANCELLED
SCSI_STATUS_ERROR = _libiscsi.SCSI_STATUS_ERROR
SCSI_STATUS_TIMEOUT = _libiscsi.SCSI_STATUS_TIMEOUT

def iscsi_connect_async(iscsi: 'struct iscsi_context *', portal: 'char const *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_connect_async(iscsi, portal, cb, private_data)
iscsi_connect_async = _libiscsi.iscsi_connect_async

def iscsi_connect_sync(iscsi: 'struct iscsi_context *', portal: 'char const *') -> "int":
    return _libiscsi.iscsi_connect_sync(iscsi, portal)
iscsi_connect_sync = _libiscsi.iscsi_connect_sync

def iscsi_full_connect_async(iscsi: 'struct iscsi_context *', portal: 'char const *', lun: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_full_connect_async(iscsi, portal, lun, cb, private_data)
iscsi_full_connect_async = _libiscsi.iscsi_full_connect_async

def iscsi_full_connect_sync(iscsi: 'struct iscsi_context *', portal: 'char const *', lun: 'int') -> "int":
    return _libiscsi.iscsi_full_connect_sync(iscsi, portal, lun)
iscsi_full_connect_sync = _libiscsi.iscsi_full_connect_sync

def iscsi_disconnect(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_disconnect(iscsi)
iscsi_disconnect = _libiscsi.iscsi_disconnect

def iscsi_reconnect(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_reconnect(iscsi)
iscsi_reconnect = _libiscsi.iscsi_reconnect

def iscsi_reconnect_sync(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_reconnect_sync(iscsi)
iscsi_reconnect_sync = _libiscsi.iscsi_reconnect_sync

def iscsi_login_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_login_async(iscsi, cb, private_data)
iscsi_login_async = _libiscsi.iscsi_login_async

def iscsi_login_sync(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_login_sync(iscsi)
iscsi_login_sync = _libiscsi.iscsi_login_sync

def iscsi_logout_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_logout_async(iscsi, cb, private_data)
iscsi_logout_async = _libiscsi.iscsi_logout_async

def iscsi_logout_sync(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_logout_sync(iscsi)
iscsi_logout_sync = _libiscsi.iscsi_logout_sync
class iscsi_target_portal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_target_portal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_target_portal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.iscsi_target_portal_next_set
    __swig_getmethods__["next"] = _libiscsi.iscsi_target_portal_next_get
    if _newclass:
        next = _swig_property(_libiscsi.iscsi_target_portal_next_get, _libiscsi.iscsi_target_portal_next_set)
    __swig_setmethods__["portal"] = _libiscsi.iscsi_target_portal_portal_set
    __swig_getmethods__["portal"] = _libiscsi.iscsi_target_portal_portal_get
    if _newclass:
        portal = _swig_property(_libiscsi.iscsi_target_portal_portal_get, _libiscsi.iscsi_target_portal_portal_set)

    def __init__(self):
        this = _libiscsi.new_iscsi_target_portal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_target_portal
    __del__ = lambda self: None
iscsi_target_portal_swigregister = _libiscsi.iscsi_target_portal_swigregister
iscsi_target_portal_swigregister(iscsi_target_portal)

class iscsi_discovery_address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_discovery_address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_discovery_address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.iscsi_discovery_address_next_set
    __swig_getmethods__["next"] = _libiscsi.iscsi_discovery_address_next_get
    if _newclass:
        next = _swig_property(_libiscsi.iscsi_discovery_address_next_get, _libiscsi.iscsi_discovery_address_next_set)
    __swig_setmethods__["target_name"] = _libiscsi.iscsi_discovery_address_target_name_set
    __swig_getmethods__["target_name"] = _libiscsi.iscsi_discovery_address_target_name_get
    if _newclass:
        target_name = _swig_property(_libiscsi.iscsi_discovery_address_target_name_get, _libiscsi.iscsi_discovery_address_target_name_set)
    __swig_setmethods__["portals"] = _libiscsi.iscsi_discovery_address_portals_set
    __swig_getmethods__["portals"] = _libiscsi.iscsi_discovery_address_portals_get
    if _newclass:
        portals = _swig_property(_libiscsi.iscsi_discovery_address_portals_get, _libiscsi.iscsi_discovery_address_portals_set)

    def __init__(self):
        this = _libiscsi.new_iscsi_discovery_address()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_discovery_address
    __del__ = lambda self: None
iscsi_discovery_address_swigregister = _libiscsi.iscsi_discovery_address_swigregister
iscsi_discovery_address_swigregister(iscsi_discovery_address)


def iscsi_discovery_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_discovery_async(iscsi, cb, private_data)
iscsi_discovery_async = _libiscsi.iscsi_discovery_async

def iscsi_discovery_sync(iscsi: 'struct iscsi_context *') -> "struct iscsi_discovery_address *":
    return _libiscsi.iscsi_discovery_sync(iscsi)
iscsi_discovery_sync = _libiscsi.iscsi_discovery_sync

def iscsi_free_discovery_data(iscsi: 'struct iscsi_context *', da: 'iscsi_discovery_address') -> "void":
    return _libiscsi.iscsi_free_discovery_data(iscsi, da)
iscsi_free_discovery_data = _libiscsi.iscsi_free_discovery_data

def iscsi_nop_out_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', data: 'unsigned char *', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_nop_out_async(iscsi, cb, data, private_data)
iscsi_nop_out_async = _libiscsi.iscsi_nop_out_async

def iscsi_get_nops_in_flight(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_get_nops_in_flight(iscsi)
iscsi_get_nops_in_flight = _libiscsi.iscsi_get_nops_in_flight
ISCSI_TM_ABORT_TASK = _libiscsi.ISCSI_TM_ABORT_TASK
ISCSI_TM_ABORT_TASK_SET = _libiscsi.ISCSI_TM_ABORT_TASK_SET
ISCSI_TM_CLEAR_ACA = _libiscsi.ISCSI_TM_CLEAR_ACA
ISCSI_TM_CLEAR_TASK_SET = _libiscsi.ISCSI_TM_CLEAR_TASK_SET
ISCSI_TM_LUN_RESET = _libiscsi.ISCSI_TM_LUN_RESET
ISCSI_TM_TARGET_WARM_RESET = _libiscsi.ISCSI_TM_TARGET_WARM_RESET
ISCSI_TM_TARGET_COLD_RESET = _libiscsi.ISCSI_TM_TARGET_COLD_RESET
ISCSI_TM_TASK_REASSIGN = _libiscsi.ISCSI_TM_TASK_REASSIGN
ISCSI_TMR_FUNC_COMPLETE = _libiscsi.ISCSI_TMR_FUNC_COMPLETE
ISCSI_TMR_TASK_DOES_NOT_EXIST = _libiscsi.ISCSI_TMR_TASK_DOES_NOT_EXIST
ISCSI_TMR_LUN_DOES_NOT_EXIST = _libiscsi.ISCSI_TMR_LUN_DOES_NOT_EXIST
ISCSI_TMR_TASK_STILL_ALLEGIANT = _libiscsi.ISCSI_TMR_TASK_STILL_ALLEGIANT
ISCSI_TMR_TASK_ALLEGIANCE_REASS_NOT_SUPPORTED = _libiscsi.ISCSI_TMR_TASK_ALLEGIANCE_REASS_NOT_SUPPORTED
ISCSI_TMR_TMF_NOT_SUPPORTED = _libiscsi.ISCSI_TMR_TMF_NOT_SUPPORTED
ISCSI_TMR_FUNC_AUTH_FAILED = _libiscsi.ISCSI_TMR_FUNC_AUTH_FAILED
ISCSI_TMR_FUNC_REJECTED = _libiscsi.ISCSI_TMR_FUNC_REJECTED

def iscsi_task_mgmt_async(iscsi: 'struct iscsi_context *', lun: 'int', function: 'enum iscsi_task_mgmt_funcs', ritt: 'uint32_t', rcmdscn: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_async(iscsi, lun, function, ritt, rcmdscn, cb, private_data)
iscsi_task_mgmt_async = _libiscsi.iscsi_task_mgmt_async

def iscsi_task_mgmt_abort_task_async(iscsi: 'struct iscsi_context *', task: 'scsi_task', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_abort_task_async(iscsi, task, cb, private_data)
iscsi_task_mgmt_abort_task_async = _libiscsi.iscsi_task_mgmt_abort_task_async

def iscsi_task_mgmt_abort_task_set_async(iscsi: 'struct iscsi_context *', lun: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_abort_task_set_async(iscsi, lun, cb, private_data)
iscsi_task_mgmt_abort_task_set_async = _libiscsi.iscsi_task_mgmt_abort_task_set_async

def iscsi_task_mgmt_lun_reset_async(iscsi: 'struct iscsi_context *', lun: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_lun_reset_async(iscsi, lun, cb, private_data)
iscsi_task_mgmt_lun_reset_async = _libiscsi.iscsi_task_mgmt_lun_reset_async

def iscsi_task_mgmt_target_warm_reset_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_target_warm_reset_async(iscsi, cb, private_data)
iscsi_task_mgmt_target_warm_reset_async = _libiscsi.iscsi_task_mgmt_target_warm_reset_async

def iscsi_task_mgmt_target_cold_reset_async(iscsi: 'struct iscsi_context *', cb: 'iscsi_command_cb', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_task_mgmt_target_cold_reset_async(iscsi, cb, private_data)
iscsi_task_mgmt_target_cold_reset_async = _libiscsi.iscsi_task_mgmt_target_cold_reset_async

def iscsi_task_mgmt_sync(iscsi: 'struct iscsi_context *', lun: 'int', function: 'enum iscsi_task_mgmt_funcs', ritt: 'uint32_t', rcmdscn: 'uint32_t') -> "int":
    return _libiscsi.iscsi_task_mgmt_sync(iscsi, lun, function, ritt, rcmdscn)
iscsi_task_mgmt_sync = _libiscsi.iscsi_task_mgmt_sync

def iscsi_task_mgmt_abort_task_sync(iscsi: 'struct iscsi_context *', task: 'scsi_task') -> "int":
    return _libiscsi.iscsi_task_mgmt_abort_task_sync(iscsi, task)
iscsi_task_mgmt_abort_task_sync = _libiscsi.iscsi_task_mgmt_abort_task_sync

def iscsi_task_mgmt_abort_task_set_sync(iscsi: 'struct iscsi_context *', lun: 'uint32_t') -> "int":
    return _libiscsi.iscsi_task_mgmt_abort_task_set_sync(iscsi, lun)
iscsi_task_mgmt_abort_task_set_sync = _libiscsi.iscsi_task_mgmt_abort_task_set_sync

def iscsi_task_mgmt_lun_reset_sync(iscsi: 'struct iscsi_context *', lun: 'uint32_t') -> "int":
    return _libiscsi.iscsi_task_mgmt_lun_reset_sync(iscsi, lun)
iscsi_task_mgmt_lun_reset_sync = _libiscsi.iscsi_task_mgmt_lun_reset_sync

def iscsi_task_mgmt_target_warm_reset_sync(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_task_mgmt_target_warm_reset_sync(iscsi)
iscsi_task_mgmt_target_warm_reset_sync = _libiscsi.iscsi_task_mgmt_target_warm_reset_sync

def iscsi_task_mgmt_target_cold_reset_sync(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_task_mgmt_target_cold_reset_sync(iscsi)
iscsi_task_mgmt_target_cold_reset_sync = _libiscsi.iscsi_task_mgmt_target_cold_reset_sync
class iscsi_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libiscsi.iscsi_data_size_set
    __swig_getmethods__["size"] = _libiscsi.iscsi_data_size_get
    if _newclass:
        size = _swig_property(_libiscsi.iscsi_data_size_get, _libiscsi.iscsi_data_size_set)
    __swig_setmethods__["data"] = _libiscsi.iscsi_data_data_set
    __swig_getmethods__["data"] = _libiscsi.iscsi_data_data_get
    if _newclass:
        data = _swig_property(_libiscsi.iscsi_data_data_get, _libiscsi.iscsi_data_data_set)

    def __init__(self):
        this = _libiscsi.new_iscsi_data()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_data
    __del__ = lambda self: None
iscsi_data_swigregister = _libiscsi.iscsi_data_swigregister
iscsi_data_swigregister(iscsi_data)


def iscsi_set_isid_oui(iscsi: 'struct iscsi_context *', oui: 'uint32_t', qualifier: 'uint32_t') -> "int":
    return _libiscsi.iscsi_set_isid_oui(iscsi, oui, qualifier)
iscsi_set_isid_oui = _libiscsi.iscsi_set_isid_oui

def iscsi_set_isid_en(iscsi: 'struct iscsi_context *', en: 'uint32_t', qualifier: 'uint32_t') -> "int":
    return _libiscsi.iscsi_set_isid_en(iscsi, en, qualifier)
iscsi_set_isid_en = _libiscsi.iscsi_set_isid_en

def iscsi_set_isid_random(iscsi: 'struct iscsi_context *', rnd: 'uint32_t', qualifier: 'uint32_t') -> "int":
    return _libiscsi.iscsi_set_isid_random(iscsi, rnd, qualifier)
iscsi_set_isid_random = _libiscsi.iscsi_set_isid_random

def iscsi_set_isid_reserved(iscsi: 'struct iscsi_context *') -> "int":
    return _libiscsi.iscsi_set_isid_reserved(iscsi)
iscsi_set_isid_reserved = _libiscsi.iscsi_set_isid_reserved

def iscsi_scsi_command_async(iscsi: 'struct iscsi_context *', lun: 'int', task: 'scsi_task', cb: 'iscsi_command_cb', data: 'iscsi_data', private_data: 'void *') -> "int":
    return _libiscsi.iscsi_scsi_command_async(iscsi, lun, task, cb, data, private_data)
iscsi_scsi_command_async = _libiscsi.iscsi_scsi_command_async

def iscsi_reportluns_task(iscsi: 'struct iscsi_context *', report_type: 'int', alloc_len: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_reportluns_task(iscsi, report_type, alloc_len, cb, private_data)
iscsi_reportluns_task = _libiscsi.iscsi_reportluns_task

def iscsi_testunitready_task(iscsi: 'struct iscsi_context *', lun: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_testunitready_task(iscsi, lun, cb, private_data)
iscsi_testunitready_task = _libiscsi.iscsi_testunitready_task

def iscsi_inquiry_task(iscsi: 'struct iscsi_context *', lun: 'int', evpd: 'int', page_code: 'int', maxsize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_inquiry_task(iscsi, lun, evpd, page_code, maxsize, cb, private_data)
iscsi_inquiry_task = _libiscsi.iscsi_inquiry_task

def iscsi_readcapacity10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'int', pmi: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_readcapacity10_task(iscsi, lun, lba, pmi, cb, private_data)
iscsi_readcapacity10_task = _libiscsi.iscsi_readcapacity10_task

def iscsi_readcapacity16_task(iscsi: 'struct iscsi_context *', lun: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_readcapacity16_task(iscsi, lun, cb, private_data)
iscsi_readcapacity16_task = _libiscsi.iscsi_readcapacity16_task

def iscsi_readdefectdata10_task(iscsi: 'struct iscsi_context *', lun: 'int', req_plist: 'int', req_glist: 'int', defect_list_format: 'int', alloc_len: 'uint16_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_readdefectdata10_task(iscsi, lun, req_plist, req_glist, defect_list_format, alloc_len, cb, private_data)
iscsi_readdefectdata10_task = _libiscsi.iscsi_readdefectdata10_task

def iscsi_readdefectdata12_task(iscsi: 'struct iscsi_context *', lun: 'int', req_plist: 'int', req_glist: 'int', defect_list_format: 'int', address_descriptor_index: 'uint32_t', alloc_len: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_readdefectdata12_task(iscsi, lun, req_plist, req_glist, defect_list_format, address_descriptor_index, alloc_len, cb, private_data)
iscsi_readdefectdata12_task = _libiscsi.iscsi_readdefectdata12_task

def iscsi_sanitize_task(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int', sa: 'int', param_len: 'int', data: 'iscsi_data', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_task(iscsi, lun, immed, ause, sa, param_len, data, cb, private_data)
iscsi_sanitize_task = _libiscsi.iscsi_sanitize_task

def iscsi_sanitize_block_erase_task(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_block_erase_task(iscsi, lun, immed, ause, cb, private_data)
iscsi_sanitize_block_erase_task = _libiscsi.iscsi_sanitize_block_erase_task

def iscsi_sanitize_crypto_erase_task(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_crypto_erase_task(iscsi, lun, immed, ause, cb, private_data)
iscsi_sanitize_crypto_erase_task = _libiscsi.iscsi_sanitize_crypto_erase_task

def iscsi_sanitize_exit_failure_mode_task(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_exit_failure_mode_task(iscsi, lun, immed, ause, cb, private_data)
iscsi_sanitize_exit_failure_mode_task = _libiscsi.iscsi_sanitize_exit_failure_mode_task

def iscsi_get_lba_status_task(iscsi: 'struct iscsi_context *', lun: 'int', starting_lba: 'uint64_t', alloc_len: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_get_lba_status_task(iscsi, lun, starting_lba, alloc_len, cb, private_data)
iscsi_get_lba_status_task = _libiscsi.iscsi_get_lba_status_task

def iscsi_synchronizecache10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'int', num_blocks: 'int', syncnv: 'int', immed: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_synchronizecache10_task(iscsi, lun, lba, num_blocks, syncnv, immed, cb, private_data)
iscsi_synchronizecache10_task = _libiscsi.iscsi_synchronizecache10_task

def iscsi_synchronizecache16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', num_blocks: 'uint32_t', syncnv: 'int', immed: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_synchronizecache16_task(iscsi, lun, lba, num_blocks, syncnv, immed, cb, private_data)
iscsi_synchronizecache16_task = _libiscsi.iscsi_synchronizecache16_task

def iscsi_prefetch10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', num_blocks: 'int', immed: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_prefetch10_task(iscsi, lun, lba, num_blocks, immed, group, cb, private_data)
iscsi_prefetch10_task = _libiscsi.iscsi_prefetch10_task

def iscsi_prefetch16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', num_blocks: 'int', immed: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_prefetch16_task(iscsi, lun, lba, num_blocks, immed, group, cb, private_data)
iscsi_prefetch16_task = _libiscsi.iscsi_prefetch16_task

def iscsi_read6_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_read6_task(iscsi, lun, lba, datalen, blocksize, cb, private_data)
iscsi_read6_task = _libiscsi.iscsi_read6_task

def iscsi_read6_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read6_iov_task(iscsi, lun, lba, datalen, blocksize, cb, private_data, iov, niov)
iscsi_read6_iov_task = _libiscsi.iscsi_read6_iov_task

def iscsi_read10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_read10_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_read10_task = _libiscsi.iscsi_read10_task

def iscsi_read10_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read10_iov_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_read10_iov_task = _libiscsi.iscsi_read10_iov_task

def iscsi_write10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_write10_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_write10_task = _libiscsi.iscsi_write10_task

def iscsi_write10_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write10_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_write10_iov_task = _libiscsi.iscsi_write10_iov_task

def iscsi_writeverify10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify10_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data)
iscsi_writeverify10_task = _libiscsi.iscsi_writeverify10_task

def iscsi_writeverify10_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify10_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data, iov, niov)
iscsi_writeverify10_iov_task = _libiscsi.iscsi_writeverify10_iov_task

def iscsi_read12_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_read12_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_read12_task = _libiscsi.iscsi_read12_task

def iscsi_read12_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read12_iov_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_read12_iov_task = _libiscsi.iscsi_read12_iov_task

def iscsi_write12_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_write12_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_write12_task = _libiscsi.iscsi_write12_task

def iscsi_write12_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write12_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_write12_iov_task = _libiscsi.iscsi_write12_iov_task

def iscsi_writeverify12_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify12_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data)
iscsi_writeverify12_task = _libiscsi.iscsi_writeverify12_task

def iscsi_writeverify12_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify12_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data, iov, niov)
iscsi_writeverify12_iov_task = _libiscsi.iscsi_writeverify12_iov_task

def iscsi_read16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_read16_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_read16_task = _libiscsi.iscsi_read16_task

def iscsi_read16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read16_iov_task(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_read16_iov_task = _libiscsi.iscsi_read16_iov_task

def iscsi_write16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_write16_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_write16_task = _libiscsi.iscsi_write16_task

def iscsi_write16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write16_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_write16_iov_task = _libiscsi.iscsi_write16_iov_task

def iscsi_writeatomic16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeatomic16_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, group_number, cb, private_data)
iscsi_writeatomic16_task = _libiscsi.iscsi_writeatomic16_task

def iscsi_writeatomic16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeatomic16_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, group_number, cb, private_data, iov, niov)
iscsi_writeatomic16_iov_task = _libiscsi.iscsi_writeatomic16_iov_task

def iscsi_orwrite_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_orwrite_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_orwrite_task = _libiscsi.iscsi_orwrite_task

def iscsi_orwrite_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_orwrite_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_orwrite_iov_task = _libiscsi.iscsi_orwrite_iov_task

def iscsi_startstopunit_task(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', pcm: 'int', pc: 'int', no_flush: 'int', loej: 'int', start: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_startstopunit_task(iscsi, lun, immed, pcm, pc, no_flush, loej, start, cb, private_data)
iscsi_startstopunit_task = _libiscsi.iscsi_startstopunit_task

def iscsi_preventallow_task(iscsi: 'struct iscsi_context *', lun: 'int', prevent: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_preventallow_task(iscsi, lun, prevent, cb, private_data)
iscsi_preventallow_task = _libiscsi.iscsi_preventallow_task

def iscsi_compareandwrite_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_compareandwrite_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data)
iscsi_compareandwrite_task = _libiscsi.iscsi_compareandwrite_task

def iscsi_compareandwrite_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_compareandwrite_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, cb, private_data, iov, niov)
iscsi_compareandwrite_iov_task = _libiscsi.iscsi_compareandwrite_iov_task

def iscsi_writeverify16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify16_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data)
iscsi_writeverify16_task = _libiscsi.iscsi_writeverify16_task

def iscsi_writeverify16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify16_iov_task(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, cb, private_data, iov, niov)
iscsi_writeverify16_iov_task = _libiscsi.iscsi_writeverify16_iov_task

def iscsi_verify10_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify10_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data)
iscsi_verify10_task = _libiscsi.iscsi_verify10_task

def iscsi_verify10_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify10_iov_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data, iov, niov)
iscsi_verify10_iov_task = _libiscsi.iscsi_verify10_iov_task

def iscsi_verify12_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify12_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data)
iscsi_verify12_task = _libiscsi.iscsi_verify12_task

def iscsi_verify12_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify12_iov_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data, iov, niov)
iscsi_verify12_iov_task = _libiscsi.iscsi_verify12_iov_task

def iscsi_verify16_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint64_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify16_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data)
iscsi_verify16_task = _libiscsi.iscsi_verify16_task

def iscsi_verify16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint64_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify16_iov_task(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, cb, private_data, iov, niov)
iscsi_verify16_iov_task = _libiscsi.iscsi_verify16_iov_task

def iscsi_writesame10_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', num_blocks: 'uint16_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame10_task(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, cb, private_data)
iscsi_writesame10_task = _libiscsi.iscsi_writesame10_task

def iscsi_writesame10_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', num_blocks: 'uint16_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame10_iov_task(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, cb, private_data, iov, niov)
iscsi_writesame10_iov_task = _libiscsi.iscsi_writesame10_iov_task

def iscsi_writesame16_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', num_blocks: 'uint32_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame16_task(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, cb, private_data)
iscsi_writesame16_task = _libiscsi.iscsi_writesame16_task

def iscsi_writesame16_iov_task(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', num_blocks: 'uint32_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', cb: 'iscsi_command_cb', private_data: 'void *', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame16_iov_task(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, cb, private_data, iov, niov)
iscsi_writesame16_iov_task = _libiscsi.iscsi_writesame16_iov_task

def iscsi_modeselect6_task(iscsi: 'struct iscsi_context *', lun: 'int', pf: 'int', sp: 'int', mp: 'scsi_mode_page', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_modeselect6_task(iscsi, lun, pf, sp, mp, cb, private_data)
iscsi_modeselect6_task = _libiscsi.iscsi_modeselect6_task

def iscsi_modeselect10_task(iscsi: 'struct iscsi_context *', lun: 'int', pf: 'int', sp: 'int', mp: 'scsi_mode_page', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_modeselect10_task(iscsi, lun, pf, sp, mp, cb, private_data)
iscsi_modeselect10_task = _libiscsi.iscsi_modeselect10_task

def iscsi_modesense6_task(iscsi: 'struct iscsi_context *', lun: 'int', dbd: 'int', pc: 'int', page_code: 'int', sub_page_code: 'int', alloc_len: 'unsigned char', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_modesense6_task(iscsi, lun, dbd, pc, page_code, sub_page_code, alloc_len, cb, private_data)
iscsi_modesense6_task = _libiscsi.iscsi_modesense6_task

def iscsi_modesense10_task(iscsi: 'struct iscsi_context *', lun: 'int', llbaa: 'int', dbd: 'int', pc: 'int', page_code: 'int', sub_page_code: 'int', alloc_len: 'unsigned char', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_modesense10_task(iscsi, lun, llbaa, dbd, pc, page_code, sub_page_code, alloc_len, cb, private_data)
iscsi_modesense10_task = _libiscsi.iscsi_modesense10_task
class unmap_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unmap_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unmap_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _libiscsi.unmap_list_lba_set
    __swig_getmethods__["lba"] = _libiscsi.unmap_list_lba_get
    if _newclass:
        lba = _swig_property(_libiscsi.unmap_list_lba_get, _libiscsi.unmap_list_lba_set)
    __swig_setmethods__["num"] = _libiscsi.unmap_list_num_set
    __swig_getmethods__["num"] = _libiscsi.unmap_list_num_get
    if _newclass:
        num = _swig_property(_libiscsi.unmap_list_num_get, _libiscsi.unmap_list_num_set)

    def __init__(self):
        this = _libiscsi.new_unmap_list()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libiscsi.delete_unmap_list
    __del__ = lambda self: None
unmap_list_swigregister = _libiscsi.unmap_list_swigregister
unmap_list_swigregister(unmap_list)


def iscsi_persistent_reserve_in_task(iscsi: 'struct iscsi_context *', lun: 'int', sa: 'int', xferlen: 'uint16_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_persistent_reserve_in_task(iscsi, lun, sa, xferlen, cb, private_data)
iscsi_persistent_reserve_in_task = _libiscsi.iscsi_persistent_reserve_in_task

def iscsi_persistent_reserve_out_task(iscsi: 'struct iscsi_context *', lun: 'int', sa: 'int', scope: 'int', type: 'int', params: 'void *', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_persistent_reserve_out_task(iscsi, lun, sa, scope, type, params, cb, private_data)
iscsi_persistent_reserve_out_task = _libiscsi.iscsi_persistent_reserve_out_task

def iscsi_unmap_task(iscsi: 'struct iscsi_context *', lun: 'int', anchor: 'int', group: 'int', list: 'unmap_list', list_len: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_unmap_task(iscsi, lun, anchor, group, list, list_len, cb, private_data)
iscsi_unmap_task = _libiscsi.iscsi_unmap_task

def iscsi_readtoc_task(iscsi: 'struct iscsi_context *', lun: 'int', msf: 'int', format: 'int', track_session: 'int', maxsize: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_readtoc_task(iscsi, lun, msf, format, track_session, maxsize, cb, private_data)
iscsi_readtoc_task = _libiscsi.iscsi_readtoc_task

def iscsi_reserve6_task(iscsi: 'struct iscsi_context *', lun: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_reserve6_task(iscsi, lun, cb, private_data)
iscsi_reserve6_task = _libiscsi.iscsi_reserve6_task

def iscsi_release6_task(iscsi: 'struct iscsi_context *', lun: 'int', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_release6_task(iscsi, lun, cb, private_data)
iscsi_release6_task = _libiscsi.iscsi_release6_task

def iscsi_report_supported_opcodes_task(iscsi: 'struct iscsi_context *', lun: 'int', rctd: 'int', options: 'int', opcode: 'int', sa: 'int', alloc_len: 'uint32_t', cb: 'iscsi_command_cb', private_data: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_report_supported_opcodes_task(iscsi, lun, rctd, options, opcode, sa, alloc_len, cb, private_data)
iscsi_report_supported_opcodes_task = _libiscsi.iscsi_report_supported_opcodes_task

def iscsi_scsi_command_sync(iscsi: 'struct iscsi_context *', lun: 'int', task: 'scsi_task', data: 'iscsi_data') -> "struct scsi_task *":
    return _libiscsi.iscsi_scsi_command_sync(iscsi, lun, task, data)
iscsi_scsi_command_sync = _libiscsi.iscsi_scsi_command_sync

def iscsi_modeselect6_sync(iscsi: 'struct iscsi_context *', lun: 'int', pf: 'int', sp: 'int', mp: 'scsi_mode_page') -> "struct scsi_task *":
    return _libiscsi.iscsi_modeselect6_sync(iscsi, lun, pf, sp, mp)
iscsi_modeselect6_sync = _libiscsi.iscsi_modeselect6_sync

def iscsi_modeselect10_sync(iscsi: 'struct iscsi_context *', lun: 'int', pf: 'int', sp: 'int', mp: 'scsi_mode_page') -> "struct scsi_task *":
    return _libiscsi.iscsi_modeselect10_sync(iscsi, lun, pf, sp, mp)
iscsi_modeselect10_sync = _libiscsi.iscsi_modeselect10_sync

def iscsi_modesense6_sync(iscsi: 'struct iscsi_context *', lun: 'int', dbd: 'int', pc: 'int', page_code: 'int', sub_page_code: 'int', alloc_len: 'unsigned char') -> "struct scsi_task *":
    return _libiscsi.iscsi_modesense6_sync(iscsi, lun, dbd, pc, page_code, sub_page_code, alloc_len)
iscsi_modesense6_sync = _libiscsi.iscsi_modesense6_sync

def iscsi_modesense10_sync(iscsi: 'struct iscsi_context *', lun: 'int', llbaa: 'int', dbd: 'int', pc: 'int', page_code: 'int', sub_page_code: 'int', alloc_len: 'unsigned char') -> "struct scsi_task *":
    return _libiscsi.iscsi_modesense10_sync(iscsi, lun, llbaa, dbd, pc, page_code, sub_page_code, alloc_len)
iscsi_modesense10_sync = _libiscsi.iscsi_modesense10_sync

def iscsi_reportluns_sync(iscsi: 'struct iscsi_context *', report_type: 'int', alloc_len: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_reportluns_sync(iscsi, report_type, alloc_len)
iscsi_reportluns_sync = _libiscsi.iscsi_reportluns_sync

def iscsi_testunitready_sync(iscsi: 'struct iscsi_context *', lun: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_testunitready_sync(iscsi, lun)
iscsi_testunitready_sync = _libiscsi.iscsi_testunitready_sync

def iscsi_inquiry_sync(iscsi: 'struct iscsi_context *', lun: 'int', evpd: 'int', page_code: 'int', maxsize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_inquiry_sync(iscsi, lun, evpd, page_code, maxsize)
iscsi_inquiry_sync = _libiscsi.iscsi_inquiry_sync

def iscsi_read6_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read6_sync(iscsi, lun, lba, datalen, blocksize)
iscsi_read6_sync = _libiscsi.iscsi_read6_sync

def iscsi_read6_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read6_iov_sync(iscsi, lun, lba, datalen, blocksize, iov, niov)
iscsi_read6_iov_sync = _libiscsi.iscsi_read6_iov_sync

def iscsi_read10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read10_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
iscsi_read10_sync = _libiscsi.iscsi_read10_sync

def iscsi_read10_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read10_iov_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_read10_iov_sync = _libiscsi.iscsi_read10_iov_sync

def iscsi_write10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write10_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
iscsi_write10_sync = _libiscsi.iscsi_write10_sync

def iscsi_write10_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write10_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_write10_iov_sync = _libiscsi.iscsi_write10_iov_sync

def iscsi_writeverify10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify10_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number)
iscsi_writeverify10_sync = _libiscsi.iscsi_writeverify10_sync

def iscsi_writeverify10_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify10_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, iov, niov)
iscsi_writeverify10_iov_sync = _libiscsi.iscsi_writeverify10_iov_sync

def iscsi_read12_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read12_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
iscsi_read12_sync = _libiscsi.iscsi_read12_sync

def iscsi_read12_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read12_iov_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_read12_iov_sync = _libiscsi.iscsi_read12_iov_sync

def iscsi_write12_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write12_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
iscsi_write12_sync = _libiscsi.iscsi_write12_sync

def iscsi_write12_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write12_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_write12_iov_sync = _libiscsi.iscsi_write12_iov_sync

def iscsi_writeverify12_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify12_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number)
iscsi_writeverify12_sync = _libiscsi.iscsi_writeverify12_sync

def iscsi_writeverify12_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify12_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, iov, niov)
iscsi_writeverify12_iov_sync = _libiscsi.iscsi_writeverify12_iov_sync

def iscsi_read16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read16_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number)
iscsi_read16_sync = _libiscsi.iscsi_read16_sync

def iscsi_read16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', datalen: 'uint32_t', blocksize: 'int', rdprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_read16_iov_sync(iscsi, lun, lba, datalen, blocksize, rdprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_read16_iov_sync = _libiscsi.iscsi_read16_iov_sync

def iscsi_write16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write16_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
iscsi_write16_sync = _libiscsi.iscsi_write16_sync

def iscsi_write16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_write16_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_write16_iov_sync = _libiscsi.iscsi_write16_iov_sync

def iscsi_writeatomic16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeatomic16_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, group_number)
iscsi_writeatomic16_sync = _libiscsi.iscsi_writeatomic16_sync

def iscsi_writeatomic16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeatomic16_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, group_number, iov, niov)
iscsi_writeatomic16_iov_sync = _libiscsi.iscsi_writeatomic16_iov_sync

def iscsi_orwrite_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_orwrite_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
iscsi_orwrite_sync = _libiscsi.iscsi_orwrite_sync

def iscsi_orwrite_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_orwrite_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_orwrite_iov_sync = _libiscsi.iscsi_orwrite_iov_sync

def iscsi_startstopunit_sync(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', pcm: 'int', pc: 'int', no_flush: 'int', loej: 'int', start: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_startstopunit_sync(iscsi, lun, immed, pcm, pc, no_flush, loej, start)
iscsi_startstopunit_sync = _libiscsi.iscsi_startstopunit_sync

def iscsi_preventallow_sync(iscsi: 'struct iscsi_context *', lun: 'int', prevent: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_preventallow_sync(iscsi, lun, prevent)
iscsi_preventallow_sync = _libiscsi.iscsi_preventallow_sync

def iscsi_compareandwrite_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_compareandwrite_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number)
iscsi_compareandwrite_sync = _libiscsi.iscsi_compareandwrite_sync

def iscsi_compareandwrite_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', fua: 'int', fua_nv: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_compareandwrite_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, fua, fua_nv, group_number, iov, niov)
iscsi_compareandwrite_iov_sync = _libiscsi.iscsi_compareandwrite_iov_sync

def iscsi_writeverify16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify16_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number)
iscsi_writeverify16_sync = _libiscsi.iscsi_writeverify16_sync

def iscsi_writeverify16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', blocksize: 'int', wrprotect: 'int', dpo: 'int', bytchk: 'int', group_number: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writeverify16_iov_sync(iscsi, lun, lba, data, blocksize, wrprotect, dpo, bytchk, group_number, iov, niov)
iscsi_writeverify16_iov_sync = _libiscsi.iscsi_writeverify16_iov_sync

def iscsi_readcapacity10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'int', pmi: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_readcapacity10_sync(iscsi, lun, lba, pmi)
iscsi_readcapacity10_sync = _libiscsi.iscsi_readcapacity10_sync

def iscsi_readcapacity16_sync(iscsi: 'struct iscsi_context *', lun: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_readcapacity16_sync(iscsi, lun)
iscsi_readcapacity16_sync = _libiscsi.iscsi_readcapacity16_sync

def iscsi_readdefectdata10_sync(iscsi: 'struct iscsi_context *', lun: 'int', req_plist: 'int', req_glist: 'int', defect_list_format: 'int', alloc_len: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.iscsi_readdefectdata10_sync(iscsi, lun, req_plist, req_glist, defect_list_format, alloc_len)
iscsi_readdefectdata10_sync = _libiscsi.iscsi_readdefectdata10_sync

def iscsi_readdefectdata12_sync(iscsi: 'struct iscsi_context *', lun: 'int', req_plist: 'int', req_glist: 'int', defect_list_format: 'int', address_descriptor_index: 'uint32_t', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.iscsi_readdefectdata12_sync(iscsi, lun, req_plist, req_glist, defect_list_format, address_descriptor_index, alloc_len)
iscsi_readdefectdata12_sync = _libiscsi.iscsi_readdefectdata12_sync

def iscsi_get_lba_status_sync(iscsi: 'struct iscsi_context *', lun: 'int', starting_lba: 'uint64_t', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.iscsi_get_lba_status_sync(iscsi, lun, starting_lba, alloc_len)
iscsi_get_lba_status_sync = _libiscsi.iscsi_get_lba_status_sync

def iscsi_sanitize_sync(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int', sa: 'int', param_len: 'int', data: 'iscsi_data') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_sync(iscsi, lun, immed, ause, sa, param_len, data)
iscsi_sanitize_sync = _libiscsi.iscsi_sanitize_sync

def iscsi_sanitize_block_erase_sync(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_block_erase_sync(iscsi, lun, immed, ause)
iscsi_sanitize_block_erase_sync = _libiscsi.iscsi_sanitize_block_erase_sync

def iscsi_sanitize_crypto_erase_sync(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_crypto_erase_sync(iscsi, lun, immed, ause)
iscsi_sanitize_crypto_erase_sync = _libiscsi.iscsi_sanitize_crypto_erase_sync

def iscsi_sanitize_exit_failure_mode_sync(iscsi: 'struct iscsi_context *', lun: 'int', immed: 'int', ause: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_sanitize_exit_failure_mode_sync(iscsi, lun, immed, ause)
iscsi_sanitize_exit_failure_mode_sync = _libiscsi.iscsi_sanitize_exit_failure_mode_sync

def iscsi_synchronizecache10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'int', num_blocks: 'int', syncnv: 'int', immed: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_synchronizecache10_sync(iscsi, lun, lba, num_blocks, syncnv, immed)
iscsi_synchronizecache10_sync = _libiscsi.iscsi_synchronizecache10_sync

def iscsi_synchronizecache16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', num_blocks: 'uint32_t', syncnv: 'int', immed: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_synchronizecache16_sync(iscsi, lun, lba, num_blocks, syncnv, immed)
iscsi_synchronizecache16_sync = _libiscsi.iscsi_synchronizecache16_sync

def iscsi_prefetch10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', num_blocks: 'int', immed: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_prefetch10_sync(iscsi, lun, lba, num_blocks, immed, group)
iscsi_prefetch10_sync = _libiscsi.iscsi_prefetch10_sync

def iscsi_prefetch16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', num_blocks: 'int', immed: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_prefetch16_sync(iscsi, lun, lba, num_blocks, immed, group)
iscsi_prefetch16_sync = _libiscsi.iscsi_prefetch16_sync

def iscsi_verify10_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify10_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize)
iscsi_verify10_sync = _libiscsi.iscsi_verify10_sync

def iscsi_verify10_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify10_iov_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, iov, niov)
iscsi_verify10_iov_sync = _libiscsi.iscsi_verify10_iov_sync

def iscsi_verify12_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify12_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize)
iscsi_verify12_sync = _libiscsi.iscsi_verify12_sync

def iscsi_verify12_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint32_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify12_iov_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, iov, niov)
iscsi_verify12_iov_sync = _libiscsi.iscsi_verify12_iov_sync

def iscsi_verify16_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint64_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify16_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize)
iscsi_verify16_sync = _libiscsi.iscsi_verify16_sync

def iscsi_verify16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', data: 'unsigned char *', lba: 'uint64_t', vprotect: 'int', dpo: 'int', bytchk: 'int', blocksize: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_verify16_iov_sync(iscsi, lun, data, lba, vprotect, dpo, bytchk, blocksize, iov, niov)
iscsi_verify16_iov_sync = _libiscsi.iscsi_verify16_iov_sync

def iscsi_writesame10_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', num_blocks: 'uint16_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame10_sync(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group)
iscsi_writesame10_sync = _libiscsi.iscsi_writesame10_sync

def iscsi_writesame10_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint32_t', data: 'unsigned char *', num_blocks: 'uint16_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame10_iov_sync(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, iov, niov)
iscsi_writesame10_iov_sync = _libiscsi.iscsi_writesame10_iov_sync

def iscsi_writesame16_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', num_blocks: 'uint32_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame16_sync(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group)
iscsi_writesame16_sync = _libiscsi.iscsi_writesame16_sync

def iscsi_writesame16_iov_sync(iscsi: 'struct iscsi_context *', lun: 'int', lba: 'uint64_t', data: 'unsigned char *', num_blocks: 'uint32_t', anchor: 'int', unmap: 'int', wrprotect: 'int', group: 'int', iov: 'scsi_iovec', niov: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_writesame16_iov_sync(iscsi, lun, lba, data, num_blocks, anchor, unmap, wrprotect, group, iov, niov)
iscsi_writesame16_iov_sync = _libiscsi.iscsi_writesame16_iov_sync

def iscsi_persistent_reserve_in_sync(iscsi: 'struct iscsi_context *', lun: 'int', sa: 'int', xferlen: 'uint16_t') -> "struct scsi_task *":
    return _libiscsi.iscsi_persistent_reserve_in_sync(iscsi, lun, sa, xferlen)
iscsi_persistent_reserve_in_sync = _libiscsi.iscsi_persistent_reserve_in_sync

def iscsi_persistent_reserve_out_sync(iscsi: 'struct iscsi_context *', lun: 'int', sa: 'int', scope: 'int', type: 'int', params: 'void *') -> "struct scsi_task *":
    return _libiscsi.iscsi_persistent_reserve_out_sync(iscsi, lun, sa, scope, type, params)
iscsi_persistent_reserve_out_sync = _libiscsi.iscsi_persistent_reserve_out_sync

def iscsi_unmap_sync(iscsi: 'struct iscsi_context *', lun: 'int', anchor: 'int', group: 'int', list: 'unmap_list', list_len: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_unmap_sync(iscsi, lun, anchor, group, list, list_len)
iscsi_unmap_sync = _libiscsi.iscsi_unmap_sync

def iscsi_readtoc_sync(iscsi: 'struct iscsi_context *', lun: 'int', msf: 'int', format: 'int', track_session: 'int', maxsize: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_readtoc_sync(iscsi, lun, msf, format, track_session, maxsize)
iscsi_readtoc_sync = _libiscsi.iscsi_readtoc_sync

def iscsi_reserve6_sync(iscsi: 'struct iscsi_context *', lun: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_reserve6_sync(iscsi, lun)
iscsi_reserve6_sync = _libiscsi.iscsi_reserve6_sync

def iscsi_release6_sync(iscsi: 'struct iscsi_context *', lun: 'int') -> "struct scsi_task *":
    return _libiscsi.iscsi_release6_sync(iscsi, lun)
iscsi_release6_sync = _libiscsi.iscsi_release6_sync

def iscsi_report_supported_opcodes_sync(iscsi: 'struct iscsi_context *', lun: 'int', rctd: 'int', options: 'int', opcode: 'int', sa: 'int', alloc_len: 'uint32_t') -> "struct scsi_task *":
    return _libiscsi.iscsi_report_supported_opcodes_sync(iscsi, lun, rctd, options, opcode, sa, alloc_len)
iscsi_report_supported_opcodes_sync = _libiscsi.iscsi_report_supported_opcodes_sync

def scsi_task_add_data_in_buffer(task: 'scsi_task', len: 'int') -> "int":
    return _libiscsi.scsi_task_add_data_in_buffer(task, len)
scsi_task_add_data_in_buffer = _libiscsi.scsi_task_add_data_in_buffer

def scsi_task_add_data_out_buffer(task: 'scsi_task', len: 'int') -> "int":
    return _libiscsi.scsi_task_add_data_out_buffer(task, len)
scsi_task_add_data_out_buffer = _libiscsi.scsi_task_add_data_out_buffer

def scsi_task_set_iov_out(task: 'scsi_task', iov: 'scsi_iovec', niov: 'int') -> "void":
    return _libiscsi.scsi_task_set_iov_out(task, iov, niov)
scsi_task_set_iov_out = _libiscsi.scsi_task_set_iov_out

def scsi_task_set_iov_in(task: 'scsi_task', iov: 'scsi_iovec', niov: 'int') -> "void":
    return _libiscsi.scsi_task_set_iov_in(task, iov, niov)
scsi_task_set_iov_in = _libiscsi.scsi_task_set_iov_in

def scsi_task_get_status(task: 'scsi_task', sense: 'scsi_sense') -> "int":
    return _libiscsi.scsi_task_get_status(task, sense)
scsi_task_get_status = _libiscsi.scsi_task_get_status

def iscsi_scsi_cancel_task(iscsi: 'struct iscsi_context *', task: 'scsi_task') -> "int":
    return _libiscsi.iscsi_scsi_cancel_task(iscsi, task)
iscsi_scsi_cancel_task = _libiscsi.iscsi_scsi_cancel_task

def iscsi_scsi_cancel_all_tasks(iscsi: 'struct iscsi_context *') -> "void":
    return _libiscsi.iscsi_scsi_cancel_all_tasks(iscsi)
iscsi_scsi_cancel_all_tasks = _libiscsi.iscsi_scsi_cancel_all_tasks

def iscsi_set_log_level(iscsi: 'struct iscsi_context *', level: 'int') -> "void":
    return _libiscsi.iscsi_set_log_level(iscsi, level)
iscsi_set_log_level = _libiscsi.iscsi_set_log_level

def iscsi_set_log_fn(iscsi: 'struct iscsi_context *', fn: 'iscsi_log_fn') -> "void":
    return _libiscsi.iscsi_set_log_fn(iscsi, fn)
iscsi_set_log_fn = _libiscsi.iscsi_set_log_fn

def iscsi_log_to_stderr(level: 'int', message: 'char const *') -> "void":
    return _libiscsi.iscsi_log_to_stderr(level, message)
iscsi_log_to_stderr = _libiscsi.iscsi_log_to_stderr

def iscsi_set_tcp_user_timeout(iscsi: 'struct iscsi_context *', timeout_ms: 'int') -> "void":
    return _libiscsi.iscsi_set_tcp_user_timeout(iscsi, timeout_ms)
iscsi_set_tcp_user_timeout = _libiscsi.iscsi_set_tcp_user_timeout

def iscsi_set_tcp_keepidle(iscsi: 'struct iscsi_context *', value: 'int') -> "void":
    return _libiscsi.iscsi_set_tcp_keepidle(iscsi, value)
iscsi_set_tcp_keepidle = _libiscsi.iscsi_set_tcp_keepidle

def iscsi_set_tcp_keepcnt(iscsi: 'struct iscsi_context *', value: 'int') -> "void":
    return _libiscsi.iscsi_set_tcp_keepcnt(iscsi, value)
iscsi_set_tcp_keepcnt = _libiscsi.iscsi_set_tcp_keepcnt

def iscsi_set_tcp_keepintvl(iscsi: 'struct iscsi_context *', value: 'int') -> "void":
    return _libiscsi.iscsi_set_tcp_keepintvl(iscsi, value)
iscsi_set_tcp_keepintvl = _libiscsi.iscsi_set_tcp_keepintvl

def iscsi_set_tcp_syncnt(iscsi: 'struct iscsi_context *', value: 'int') -> "void":
    return _libiscsi.iscsi_set_tcp_syncnt(iscsi, value)
iscsi_set_tcp_syncnt = _libiscsi.iscsi_set_tcp_syncnt

def iscsi_set_bind_interfaces(iscsi: 'struct iscsi_context *', interfaces: 'char *') -> "void":
    return _libiscsi.iscsi_set_bind_interfaces(iscsi, interfaces)
iscsi_set_bind_interfaces = _libiscsi.iscsi_set_bind_interfaces

def iscsi_set_reconnect_max_retries(iscsi: 'struct iscsi_context *', count: 'int') -> "void":
    return _libiscsi.iscsi_set_reconnect_max_retries(iscsi, count)
iscsi_set_reconnect_max_retries = _libiscsi.iscsi_set_reconnect_max_retries

def iscsi_set_no_ua_on_reconnect(iscsi: 'struct iscsi_context *', state: 'int') -> "void":
    return _libiscsi.iscsi_set_no_ua_on_reconnect(iscsi, state)
iscsi_set_no_ua_on_reconnect = _libiscsi.iscsi_set_no_ua_on_reconnect
# This file is compatible with both classic and new-style classes.


