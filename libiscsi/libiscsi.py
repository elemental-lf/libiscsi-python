# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libiscsi', [dirname(__file__)])
        except ImportError:
            import _libiscsi
            return _libiscsi
        if fp is not None:
            try:
                _mod = imp.load_module('_libiscsi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libiscsi = swig_import_helper()
    del swig_import_helper
else:
    import _libiscsi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def iscsi_get_fd(*args):
  return _libiscsi.iscsi_get_fd(*args)
iscsi_get_fd = _libiscsi.iscsi_get_fd

def iscsi_which_events(*args):
  return _libiscsi.iscsi_which_events(*args)
iscsi_which_events = _libiscsi.iscsi_which_events

def iscsi_service(*args):
  return _libiscsi.iscsi_service(*args)
iscsi_service = _libiscsi.iscsi_service

def iscsi_queue_length(*args):
  return _libiscsi.iscsi_queue_length(*args)
iscsi_queue_length = _libiscsi.iscsi_queue_length

def iscsi_set_timeout(*args):
  return _libiscsi.iscsi_set_timeout(*args)
iscsi_set_timeout = _libiscsi.iscsi_set_timeout

def iscsi_set_tcp_keepalive(*args):
  return _libiscsi.iscsi_set_tcp_keepalive(*args)
iscsi_set_tcp_keepalive = _libiscsi.iscsi_set_tcp_keepalive
MAX_STRING_SIZE = _libiscsi.MAX_STRING_SIZE
class iscsi_url(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_url, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_url, name)
    __repr__ = _swig_repr
    __swig_setmethods__["portal"] = _libiscsi.iscsi_url_portal_set
    __swig_getmethods__["portal"] = _libiscsi.iscsi_url_portal_get
    if _newclass:portal = _swig_property(_libiscsi.iscsi_url_portal_get, _libiscsi.iscsi_url_portal_set)
    __swig_setmethods__["target"] = _libiscsi.iscsi_url_target_set
    __swig_getmethods__["target"] = _libiscsi.iscsi_url_target_get
    if _newclass:target = _swig_property(_libiscsi.iscsi_url_target_get, _libiscsi.iscsi_url_target_set)
    __swig_setmethods__["user"] = _libiscsi.iscsi_url_user_set
    __swig_getmethods__["user"] = _libiscsi.iscsi_url_user_get
    if _newclass:user = _swig_property(_libiscsi.iscsi_url_user_get, _libiscsi.iscsi_url_user_set)
    __swig_setmethods__["passwd"] = _libiscsi.iscsi_url_passwd_set
    __swig_getmethods__["passwd"] = _libiscsi.iscsi_url_passwd_get
    if _newclass:passwd = _swig_property(_libiscsi.iscsi_url_passwd_get, _libiscsi.iscsi_url_passwd_set)
    __swig_setmethods__["lun"] = _libiscsi.iscsi_url_lun_set
    __swig_getmethods__["lun"] = _libiscsi.iscsi_url_lun_get
    if _newclass:lun = _swig_property(_libiscsi.iscsi_url_lun_get, _libiscsi.iscsi_url_lun_set)
    __swig_setmethods__["iscsi"] = _libiscsi.iscsi_url_iscsi_set
    __swig_getmethods__["iscsi"] = _libiscsi.iscsi_url_iscsi_get
    if _newclass:iscsi = _swig_property(_libiscsi.iscsi_url_iscsi_get, _libiscsi.iscsi_url_iscsi_set)
    def __init__(self): 
        this = _libiscsi.new_iscsi_url()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_url
    __del__ = lambda self : None;
iscsi_url_swigregister = _libiscsi.iscsi_url_swigregister
iscsi_url_swigregister(iscsi_url)

ISCSI_IMMEDIATE_DATA_NO = _libiscsi.ISCSI_IMMEDIATE_DATA_NO
ISCSI_IMMEDIATE_DATA_YES = _libiscsi.ISCSI_IMMEDIATE_DATA_YES

def iscsi_set_immediate_data(*args):
  return _libiscsi.iscsi_set_immediate_data(*args)
iscsi_set_immediate_data = _libiscsi.iscsi_set_immediate_data
ISCSI_INITIAL_R2T_NO = _libiscsi.ISCSI_INITIAL_R2T_NO
ISCSI_INITIAL_R2T_YES = _libiscsi.ISCSI_INITIAL_R2T_YES

def iscsi_set_initial_r2t(*args):
  return _libiscsi.iscsi_set_initial_r2t(*args)
iscsi_set_initial_r2t = _libiscsi.iscsi_set_initial_r2t

def iscsi_parse_full_url(*args):
  return _libiscsi.iscsi_parse_full_url(*args)
iscsi_parse_full_url = _libiscsi.iscsi_parse_full_url

def iscsi_destroy_url(*args):
  return _libiscsi.iscsi_destroy_url(*args)
iscsi_destroy_url = _libiscsi.iscsi_destroy_url

def iscsi_parse_portal_url(*args):
  return _libiscsi.iscsi_parse_portal_url(*args)
iscsi_parse_portal_url = _libiscsi.iscsi_parse_portal_url

def iscsi_get_error(*args):
  return _libiscsi.iscsi_get_error(*args)
iscsi_get_error = _libiscsi.iscsi_get_error

def iscsi_create_context(*args):
  return _libiscsi.iscsi_create_context(*args)
iscsi_create_context = _libiscsi.iscsi_create_context

def iscsi_destroy_context(*args):
  return _libiscsi.iscsi_destroy_context(*args)
iscsi_destroy_context = _libiscsi.iscsi_destroy_context

def iscsi_set_alias(*args):
  return _libiscsi.iscsi_set_alias(*args)
iscsi_set_alias = _libiscsi.iscsi_set_alias

def iscsi_set_targetname(*args):
  return _libiscsi.iscsi_set_targetname(*args)
iscsi_set_targetname = _libiscsi.iscsi_set_targetname

def iscsi_get_target_address(*args):
  return _libiscsi.iscsi_get_target_address(*args)
iscsi_get_target_address = _libiscsi.iscsi_get_target_address
ISCSI_SESSION_DISCOVERY = _libiscsi.ISCSI_SESSION_DISCOVERY
ISCSI_SESSION_NORMAL = _libiscsi.ISCSI_SESSION_NORMAL

def iscsi_set_session_type(*args):
  return _libiscsi.iscsi_set_session_type(*args)
iscsi_set_session_type = _libiscsi.iscsi_set_session_type
ISCSI_HEADER_DIGEST_NONE = _libiscsi.ISCSI_HEADER_DIGEST_NONE
ISCSI_HEADER_DIGEST_NONE_CRC32C = _libiscsi.ISCSI_HEADER_DIGEST_NONE_CRC32C
ISCSI_HEADER_DIGEST_CRC32C_NONE = _libiscsi.ISCSI_HEADER_DIGEST_CRC32C_NONE
ISCSI_HEADER_DIGEST_CRC32C = _libiscsi.ISCSI_HEADER_DIGEST_CRC32C
ISCSI_HEADER_DIGEST_LAST = _libiscsi.ISCSI_HEADER_DIGEST_LAST

def iscsi_set_header_digest(*args):
  return _libiscsi.iscsi_set_header_digest(*args)
iscsi_set_header_digest = _libiscsi.iscsi_set_header_digest

def iscsi_set_initiator_username_pwd(*args):
  return _libiscsi.iscsi_set_initiator_username_pwd(*args)
iscsi_set_initiator_username_pwd = _libiscsi.iscsi_set_initiator_username_pwd

def iscsi_is_logged_in(*args):
  return _libiscsi.iscsi_is_logged_in(*args)
iscsi_is_logged_in = _libiscsi.iscsi_is_logged_in
SCSI_STATUS_GOOD = _libiscsi.SCSI_STATUS_GOOD
SCSI_STATUS_CHECK_CONDITION = _libiscsi.SCSI_STATUS_CHECK_CONDITION
SCSI_STATUS_CONDITION_MET = _libiscsi.SCSI_STATUS_CONDITION_MET
SCSI_STATUS_BUSY = _libiscsi.SCSI_STATUS_BUSY
SCSI_STATUS_RESERVATION_CONFLICT = _libiscsi.SCSI_STATUS_RESERVATION_CONFLICT
SCSI_STATUS_TASK_SET_FULL = _libiscsi.SCSI_STATUS_TASK_SET_FULL
SCSI_STATUS_ACA_ACTIVE = _libiscsi.SCSI_STATUS_ACA_ACTIVE
SCSI_STATUS_TASK_ABORTED = _libiscsi.SCSI_STATUS_TASK_ABORTED
SCSI_STATUS_REDIRECT = _libiscsi.SCSI_STATUS_REDIRECT
SCSI_STATUS_CANCELLED = _libiscsi.SCSI_STATUS_CANCELLED
SCSI_STATUS_ERROR = _libiscsi.SCSI_STATUS_ERROR
SCSI_STATUS_TIMEOUT = _libiscsi.SCSI_STATUS_TIMEOUT

def iscsi_connect_sync(*args):
  return _libiscsi.iscsi_connect_sync(*args)
iscsi_connect_sync = _libiscsi.iscsi_connect_sync

def iscsi_full_connect_sync(*args):
  return _libiscsi.iscsi_full_connect_sync(*args)
iscsi_full_connect_sync = _libiscsi.iscsi_full_connect_sync

def iscsi_disconnect(*args):
  return _libiscsi.iscsi_disconnect(*args)
iscsi_disconnect = _libiscsi.iscsi_disconnect

def iscsi_reconnect(*args):
  return _libiscsi.iscsi_reconnect(*args)
iscsi_reconnect = _libiscsi.iscsi_reconnect

def iscsi_login_sync(*args):
  return _libiscsi.iscsi_login_sync(*args)
iscsi_login_sync = _libiscsi.iscsi_login_sync

def iscsi_logout_sync(*args):
  return _libiscsi.iscsi_logout_sync(*args)
iscsi_logout_sync = _libiscsi.iscsi_logout_sync
class iscsi_target_portal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_target_portal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_target_portal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.iscsi_target_portal_next_set
    __swig_getmethods__["next"] = _libiscsi.iscsi_target_portal_next_get
    if _newclass:next = _swig_property(_libiscsi.iscsi_target_portal_next_get, _libiscsi.iscsi_target_portal_next_set)
    __swig_setmethods__["portal"] = _libiscsi.iscsi_target_portal_portal_set
    __swig_getmethods__["portal"] = _libiscsi.iscsi_target_portal_portal_get
    if _newclass:portal = _swig_property(_libiscsi.iscsi_target_portal_portal_get, _libiscsi.iscsi_target_portal_portal_set)
    def __init__(self): 
        this = _libiscsi.new_iscsi_target_portal()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_target_portal
    __del__ = lambda self : None;
iscsi_target_portal_swigregister = _libiscsi.iscsi_target_portal_swigregister
iscsi_target_portal_swigregister(iscsi_target_portal)

class iscsi_discovery_address(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_discovery_address, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_discovery_address, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _libiscsi.iscsi_discovery_address_next_set
    __swig_getmethods__["next"] = _libiscsi.iscsi_discovery_address_next_get
    if _newclass:next = _swig_property(_libiscsi.iscsi_discovery_address_next_get, _libiscsi.iscsi_discovery_address_next_set)
    __swig_setmethods__["target_name"] = _libiscsi.iscsi_discovery_address_target_name_set
    __swig_getmethods__["target_name"] = _libiscsi.iscsi_discovery_address_target_name_get
    if _newclass:target_name = _swig_property(_libiscsi.iscsi_discovery_address_target_name_get, _libiscsi.iscsi_discovery_address_target_name_set)
    __swig_setmethods__["portals"] = _libiscsi.iscsi_discovery_address_portals_set
    __swig_getmethods__["portals"] = _libiscsi.iscsi_discovery_address_portals_get
    if _newclass:portals = _swig_property(_libiscsi.iscsi_discovery_address_portals_get, _libiscsi.iscsi_discovery_address_portals_set)
    def __init__(self): 
        this = _libiscsi.new_iscsi_discovery_address()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_discovery_address
    __del__ = lambda self : None;
iscsi_discovery_address_swigregister = _libiscsi.iscsi_discovery_address_swigregister
iscsi_discovery_address_swigregister(iscsi_discovery_address)

ISCSI_TM_ABORT_TASK = _libiscsi.ISCSI_TM_ABORT_TASK
ISCSI_TM_ABORT_TASK_SET = _libiscsi.ISCSI_TM_ABORT_TASK_SET
ISCSI_TM_CLEAR_ACA = _libiscsi.ISCSI_TM_CLEAR_ACA
ISCSI_TM_CLEAR_TASK_SET = _libiscsi.ISCSI_TM_CLEAR_TASK_SET
ISCSI_TM_LUN_RESET = _libiscsi.ISCSI_TM_LUN_RESET
ISCSI_TM_TARGET_WARM_RESET = _libiscsi.ISCSI_TM_TARGET_WARM_RESET
ISCSI_TM_TARGET_COLD_RESET = _libiscsi.ISCSI_TM_TARGET_COLD_RESET
ISCSI_TM_TASK_REASSIGN = _libiscsi.ISCSI_TM_TASK_REASSIGN

def iscsi_task_mgmt_sync(*args):
  return _libiscsi.iscsi_task_mgmt_sync(*args)
iscsi_task_mgmt_sync = _libiscsi.iscsi_task_mgmt_sync

def iscsi_task_mgmt_abort_task_sync(*args):
  return _libiscsi.iscsi_task_mgmt_abort_task_sync(*args)
iscsi_task_mgmt_abort_task_sync = _libiscsi.iscsi_task_mgmt_abort_task_sync

def iscsi_task_mgmt_abort_task_set_sync(*args):
  return _libiscsi.iscsi_task_mgmt_abort_task_set_sync(*args)
iscsi_task_mgmt_abort_task_set_sync = _libiscsi.iscsi_task_mgmt_abort_task_set_sync

def iscsi_task_mgmt_lun_reset_sync(*args):
  return _libiscsi.iscsi_task_mgmt_lun_reset_sync(*args)
iscsi_task_mgmt_lun_reset_sync = _libiscsi.iscsi_task_mgmt_lun_reset_sync

def iscsi_task_mgmt_target_warm_reset_sync(*args):
  return _libiscsi.iscsi_task_mgmt_target_warm_reset_sync(*args)
iscsi_task_mgmt_target_warm_reset_sync = _libiscsi.iscsi_task_mgmt_target_warm_reset_sync

def iscsi_task_mgmt_target_cold_reset_sync(*args):
  return _libiscsi.iscsi_task_mgmt_target_cold_reset_sync(*args)
iscsi_task_mgmt_target_cold_reset_sync = _libiscsi.iscsi_task_mgmt_target_cold_reset_sync
class iscsi_data(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iscsi_data, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iscsi_data, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libiscsi.iscsi_data_size_set
    __swig_getmethods__["size"] = _libiscsi.iscsi_data_size_get
    if _newclass:size = _swig_property(_libiscsi.iscsi_data_size_get, _libiscsi.iscsi_data_size_set)
    __swig_setmethods__["data"] = _libiscsi.iscsi_data_data_set
    __swig_getmethods__["data"] = _libiscsi.iscsi_data_data_get
    if _newclass:data = _swig_property(_libiscsi.iscsi_data_data_get, _libiscsi.iscsi_data_data_set)
    def __init__(self): 
        this = _libiscsi.new_iscsi_data()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libiscsi.delete_iscsi_data
    __del__ = lambda self : None;
iscsi_data_swigregister = _libiscsi.iscsi_data_swigregister
iscsi_data_swigregister(iscsi_data)


def iscsi_set_isid_oui(*args):
  return _libiscsi.iscsi_set_isid_oui(*args)
iscsi_set_isid_oui = _libiscsi.iscsi_set_isid_oui

def iscsi_set_isid_en(*args):
  return _libiscsi.iscsi_set_isid_en(*args)
iscsi_set_isid_en = _libiscsi.iscsi_set_isid_en

def iscsi_set_isid_random(*args):
  return _libiscsi.iscsi_set_isid_random(*args)
iscsi_set_isid_random = _libiscsi.iscsi_set_isid_random

def iscsi_set_isid_reserved(*args):
  return _libiscsi.iscsi_set_isid_reserved(*args)
iscsi_set_isid_reserved = _libiscsi.iscsi_set_isid_reserved
class unmap_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, unmap_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, unmap_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["lba"] = _libiscsi.unmap_list_lba_set
    __swig_getmethods__["lba"] = _libiscsi.unmap_list_lba_get
    if _newclass:lba = _swig_property(_libiscsi.unmap_list_lba_get, _libiscsi.unmap_list_lba_set)
    __swig_setmethods__["num"] = _libiscsi.unmap_list_num_set
    __swig_getmethods__["num"] = _libiscsi.unmap_list_num_get
    if _newclass:num = _swig_property(_libiscsi.unmap_list_num_get, _libiscsi.unmap_list_num_set)
    def __init__(self): 
        this = _libiscsi.new_unmap_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libiscsi.delete_unmap_list
    __del__ = lambda self : None;
unmap_list_swigregister = _libiscsi.unmap_list_swigregister
unmap_list_swigregister(unmap_list)


def iscsi_scsi_command_sync(*args):
  return _libiscsi.iscsi_scsi_command_sync(*args)
iscsi_scsi_command_sync = _libiscsi.iscsi_scsi_command_sync

def iscsi_modeselect6_sync(*args):
  return _libiscsi.iscsi_modeselect6_sync(*args)
iscsi_modeselect6_sync = _libiscsi.iscsi_modeselect6_sync

def iscsi_modeselect10_sync(*args):
  return _libiscsi.iscsi_modeselect10_sync(*args)
iscsi_modeselect10_sync = _libiscsi.iscsi_modeselect10_sync

def iscsi_modesense6_sync(*args):
  return _libiscsi.iscsi_modesense6_sync(*args)
iscsi_modesense6_sync = _libiscsi.iscsi_modesense6_sync

def iscsi_modesense10_sync(*args):
  return _libiscsi.iscsi_modesense10_sync(*args)
iscsi_modesense10_sync = _libiscsi.iscsi_modesense10_sync

def iscsi_reportluns_sync(*args):
  return _libiscsi.iscsi_reportluns_sync(*args)
iscsi_reportluns_sync = _libiscsi.iscsi_reportluns_sync

def iscsi_testunitready_sync(*args):
  return _libiscsi.iscsi_testunitready_sync(*args)
iscsi_testunitready_sync = _libiscsi.iscsi_testunitready_sync

def iscsi_inquiry_sync(*args):
  return _libiscsi.iscsi_inquiry_sync(*args)
iscsi_inquiry_sync = _libiscsi.iscsi_inquiry_sync

def iscsi_read6_sync(*args):
  return _libiscsi.iscsi_read6_sync(*args)
iscsi_read6_sync = _libiscsi.iscsi_read6_sync

def iscsi_read10_sync(*args):
  return _libiscsi.iscsi_read10_sync(*args)
iscsi_read10_sync = _libiscsi.iscsi_read10_sync

def iscsi_write10_sync(*args):
  return _libiscsi.iscsi_write10_sync(*args)
iscsi_write10_sync = _libiscsi.iscsi_write10_sync

def iscsi_writeverify10_sync(*args):
  return _libiscsi.iscsi_writeverify10_sync(*args)
iscsi_writeverify10_sync = _libiscsi.iscsi_writeverify10_sync

def iscsi_read12_sync(*args):
  return _libiscsi.iscsi_read12_sync(*args)
iscsi_read12_sync = _libiscsi.iscsi_read12_sync

def iscsi_write12_sync(*args):
  return _libiscsi.iscsi_write12_sync(*args)
iscsi_write12_sync = _libiscsi.iscsi_write12_sync

def iscsi_writeverify12_sync(*args):
  return _libiscsi.iscsi_writeverify12_sync(*args)
iscsi_writeverify12_sync = _libiscsi.iscsi_writeverify12_sync

def iscsi_read16_sync(*args):
  return _libiscsi.iscsi_read16_sync(*args)
iscsi_read16_sync = _libiscsi.iscsi_read16_sync

def iscsi_write16_sync(*args):
  return _libiscsi.iscsi_write16_sync(*args)
iscsi_write16_sync = _libiscsi.iscsi_write16_sync

def iscsi_orwrite_sync(*args):
  return _libiscsi.iscsi_orwrite_sync(*args)
iscsi_orwrite_sync = _libiscsi.iscsi_orwrite_sync

def iscsi_startstopunit_sync(*args):
  return _libiscsi.iscsi_startstopunit_sync(*args)
iscsi_startstopunit_sync = _libiscsi.iscsi_startstopunit_sync

def iscsi_preventallow_sync(*args):
  return _libiscsi.iscsi_preventallow_sync(*args)
iscsi_preventallow_sync = _libiscsi.iscsi_preventallow_sync

def iscsi_compareandwrite_sync(*args):
  return _libiscsi.iscsi_compareandwrite_sync(*args)
iscsi_compareandwrite_sync = _libiscsi.iscsi_compareandwrite_sync

def iscsi_writeverify16_sync(*args):
  return _libiscsi.iscsi_writeverify16_sync(*args)
iscsi_writeverify16_sync = _libiscsi.iscsi_writeverify16_sync

def iscsi_readcapacity10_sync(*args):
  return _libiscsi.iscsi_readcapacity10_sync(*args)
iscsi_readcapacity10_sync = _libiscsi.iscsi_readcapacity10_sync

def iscsi_readcapacity16_sync(*args):
  return _libiscsi.iscsi_readcapacity16_sync(*args)
iscsi_readcapacity16_sync = _libiscsi.iscsi_readcapacity16_sync

def iscsi_get_lba_status_sync(*args):
  return _libiscsi.iscsi_get_lba_status_sync(*args)
iscsi_get_lba_status_sync = _libiscsi.iscsi_get_lba_status_sync

def iscsi_sanitize_sync(*args):
  return _libiscsi.iscsi_sanitize_sync(*args)
iscsi_sanitize_sync = _libiscsi.iscsi_sanitize_sync

def iscsi_sanitize_block_erase_sync(*args):
  return _libiscsi.iscsi_sanitize_block_erase_sync(*args)
iscsi_sanitize_block_erase_sync = _libiscsi.iscsi_sanitize_block_erase_sync

def iscsi_sanitize_crypto_erase_sync(*args):
  return _libiscsi.iscsi_sanitize_crypto_erase_sync(*args)
iscsi_sanitize_crypto_erase_sync = _libiscsi.iscsi_sanitize_crypto_erase_sync

def iscsi_sanitize_exit_failure_mode_sync(*args):
  return _libiscsi.iscsi_sanitize_exit_failure_mode_sync(*args)
iscsi_sanitize_exit_failure_mode_sync = _libiscsi.iscsi_sanitize_exit_failure_mode_sync

def iscsi_synchronizecache10_sync(*args):
  return _libiscsi.iscsi_synchronizecache10_sync(*args)
iscsi_synchronizecache10_sync = _libiscsi.iscsi_synchronizecache10_sync

def iscsi_synchronizecache16_sync(*args):
  return _libiscsi.iscsi_synchronizecache16_sync(*args)
iscsi_synchronizecache16_sync = _libiscsi.iscsi_synchronizecache16_sync

def iscsi_prefetch10_sync(*args):
  return _libiscsi.iscsi_prefetch10_sync(*args)
iscsi_prefetch10_sync = _libiscsi.iscsi_prefetch10_sync

def iscsi_prefetch16_sync(*args):
  return _libiscsi.iscsi_prefetch16_sync(*args)
iscsi_prefetch16_sync = _libiscsi.iscsi_prefetch16_sync

def iscsi_verify10_sync(*args):
  return _libiscsi.iscsi_verify10_sync(*args)
iscsi_verify10_sync = _libiscsi.iscsi_verify10_sync

def iscsi_verify12_sync(*args):
  return _libiscsi.iscsi_verify12_sync(*args)
iscsi_verify12_sync = _libiscsi.iscsi_verify12_sync

def iscsi_verify16_sync(*args):
  return _libiscsi.iscsi_verify16_sync(*args)
iscsi_verify16_sync = _libiscsi.iscsi_verify16_sync

def iscsi_writesame10_sync(*args):
  return _libiscsi.iscsi_writesame10_sync(*args)
iscsi_writesame10_sync = _libiscsi.iscsi_writesame10_sync

def iscsi_writesame16_sync(*args):
  return _libiscsi.iscsi_writesame16_sync(*args)
iscsi_writesame16_sync = _libiscsi.iscsi_writesame16_sync

def iscsi_persistent_reserve_in_sync(*args):
  return _libiscsi.iscsi_persistent_reserve_in_sync(*args)
iscsi_persistent_reserve_in_sync = _libiscsi.iscsi_persistent_reserve_in_sync

def iscsi_persistent_reserve_out_sync(*args):
  return _libiscsi.iscsi_persistent_reserve_out_sync(*args)
iscsi_persistent_reserve_out_sync = _libiscsi.iscsi_persistent_reserve_out_sync

def iscsi_unmap_sync(*args):
  return _libiscsi.iscsi_unmap_sync(*args)
iscsi_unmap_sync = _libiscsi.iscsi_unmap_sync

def iscsi_readtoc_sync(*args):
  return _libiscsi.iscsi_readtoc_sync(*args)
iscsi_readtoc_sync = _libiscsi.iscsi_readtoc_sync

def iscsi_reserve6_sync(*args):
  return _libiscsi.iscsi_reserve6_sync(*args)
iscsi_reserve6_sync = _libiscsi.iscsi_reserve6_sync

def iscsi_release6_sync(*args):
  return _libiscsi.iscsi_release6_sync(*args)
iscsi_release6_sync = _libiscsi.iscsi_release6_sync

def iscsi_report_supported_opcodes_sync(*args):
  return _libiscsi.iscsi_report_supported_opcodes_sync(*args)
iscsi_report_supported_opcodes_sync = _libiscsi.iscsi_report_supported_opcodes_sync

def iscsi_set_tcp_user_timeout(*args):
  return _libiscsi.iscsi_set_tcp_user_timeout(*args)
iscsi_set_tcp_user_timeout = _libiscsi.iscsi_set_tcp_user_timeout

def iscsi_set_tcp_keepidle(*args):
  return _libiscsi.iscsi_set_tcp_keepidle(*args)
iscsi_set_tcp_keepidle = _libiscsi.iscsi_set_tcp_keepidle

def iscsi_set_tcp_keepcnt(*args):
  return _libiscsi.iscsi_set_tcp_keepcnt(*args)
iscsi_set_tcp_keepcnt = _libiscsi.iscsi_set_tcp_keepcnt

def iscsi_set_tcp_keepintvl(*args):
  return _libiscsi.iscsi_set_tcp_keepintvl(*args)
iscsi_set_tcp_keepintvl = _libiscsi.iscsi_set_tcp_keepintvl

def iscsi_set_tcp_syncnt(*args):
  return _libiscsi.iscsi_set_tcp_syncnt(*args)
iscsi_set_tcp_syncnt = _libiscsi.iscsi_set_tcp_syncnt

def iscsi_set_bind_interfaces(*args):
  return _libiscsi.iscsi_set_bind_interfaces(*args)
iscsi_set_bind_interfaces = _libiscsi.iscsi_set_bind_interfaces

def iscsi_set_reconnect_max_retries(*args):
  return _libiscsi.iscsi_set_reconnect_max_retries(*args)
iscsi_set_reconnect_max_retries = _libiscsi.iscsi_set_reconnect_max_retries
# This file is compatible with both classic and new-style classes.


